[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"# ATHENA"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"ATHENA aims to help students automate the process of organising their schedule."},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"After the user inputs pre-allocated time slots for work and relaxation, ATHENA figures out the best timetable based on the user’s needs."},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"The cool thing is, it can be updated anytime during the week."},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":"ATHENA helps to reduce the amount of time and effort that users need to spend planning their time by finding free spaces to slot tasks in,"},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":"with the goal of reducing dead space (unused free time) in the user’s timetable. The planner will also make sure the user has enough time to eat, exercise and sleep."},{"lineNumber":9,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":10,"author":{"gitId":"daniellimws"},"content":"The user can set up ATHENA to follow a fixed weekly routine, and only needs to update a task list."},{"lineNumber":11,"author":{"gitId":"daniellimws"},"content":"ATHENA will then plan the timetable based on the importance and deadlines of the tasks in the list, making sure that the user is able to finish everything on time."},{"lineNumber":12,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":13,"author":{"gitId":"daniellimws"},"content":"Refer to our [User Guide](https://ay2021s1-cs2113t-w12-2.github.io/tp/UserGuide.html) to learn more about how you can use ATHENA."},{"lineNumber":14,"author":{"gitId":"daniellimws"},"content":"If you want to work on ATHENA, refer to our [Developer Guide](https://ay2021s1-cs2113t-w12-2.github.io/tp/DeveloperGuide.html) to learn more about the project. "},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11 (use the exact version), update Intellij to the most recent version."},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"1. **Configure Intellij for JDK 11**, as described [here](https://se-education.org/guides/tutorials/intellijJdk.html)."},{"lineNumber":21,"author":{"gitId":"-"},"content":"1. **Import the project _as a Gradle project_**, as described [here](https://se-education.org/guides/tutorials/intellijImportGradleProject.html)."},{"lineNumber":22,"author":{"gitId":"daniellimws"},"content":"1. **Verify the set up**: After the importing is complete, locate `src/java/athena/Athena.java`, right-click it, and choose `Run Athena.main()`. If the setup is correct, you should see something like the one below:"},{"lineNumber":23,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"```"},{"lineNumber":25,"author":{"gitId":"-"},"content":"\u003e Task :compileJava"},{"lineNumber":26,"author":{"gitId":"-"},"content":"\u003e Task :processResources NO-SOURCE"},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003e Task :classes"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"daniellimws"},"content":"\u003e Task :Athena.main()"},{"lineNumber":30,"author":{"gitId":"daniellimws"},"content":"     ___   .__________.  __    __   _______  .__   __.      ___"},{"lineNumber":31,"author":{"gitId":"daniellimws"},"content":"    /   \\  |          | |  |  |  | |   ____| |  \\ |  |     /   \\"},{"lineNumber":32,"author":{"gitId":"daniellimws"},"content":"   /  ^  \\ `---|  |---` |  |__|  | |  |__    |   \\|  |    /  ^  \\"},{"lineNumber":33,"author":{"gitId":"daniellimws"},"content":"  /  /_\\  \\    |  |     |   __   | |   __|   |  . `  |   /  /_\\  \\"},{"lineNumber":34,"author":{"gitId":"daniellimws"},"content":" /  _____  \\   |  |     |  |  |  | |  |____  |  |\\   |  /  _____  \\"},{"lineNumber":35,"author":{"gitId":"daniellimws"},"content":"/__/     \\__\\  |__|     |__|  |__| |_______| |__| \\__| /__/     \\__\\"},{"lineNumber":36,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":37,"author":{"gitId":"daniellimws"},"content":"Hello! I\u0027m the Goddess of Wisdom and War, the mighty ATHENA!"},{"lineNumber":38,"author":{"gitId":"daniellimws"},"content":"..."},{"lineNumber":39,"author":{"gitId":"daniellimws"},"content":"Okay okay I\u0027m not a Goddess but I am your Automated Timetable Helper Encourager n\u0027 Assistant!"},{"lineNumber":40,"author":{"gitId":"daniellimws"},"content":"What can I do? Are you challenging me to a duel?"},{"lineNumber":41,"author":{"gitId":"daniellimws"},"content":"..."},{"lineNumber":42,"author":{"gitId":"daniellimws"},"content":"Oh you mean in terms of tasks? Just type \"help\" to witness my mighty repertoire!"},{"lineNumber":43,"author":{"gitId":"daniellimws"},"content":"So, what would you like to do today?"},{"lineNumber":44,"author":{"gitId":"-"},"content":"```"},{"lineNumber":45,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":46,"author":{"gitId":"daniellimws"},"content":"Type something and press enter to see what ATHENA can do."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"## Build automation using Gradle"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"* This project uses Gradle for build automation and dependency management. It includes a basic build script as well (i.e. the `build.gradle` file)."},{"lineNumber":51,"author":{"gitId":"-"},"content":"* If you are new to Gradle, refer to the [Gradle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/gradle.html)."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"## Testing"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"### JUnit tests"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"daniellimws"},"content":"* All tests are located under `src/test`."},{"lineNumber":58,"author":{"gitId":"-"},"content":"* If you are new to JUnit, refer to the [JUnit Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/junit.html)."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"## Checkstyle"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"* A sample CheckStyle rule configuration is provided in this project."},{"lineNumber":63,"author":{"gitId":"-"},"content":"* If you are new to Checkstyle, refer to the [Checkstyle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/checkstyle.html)."},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"## CI using GitHub Actions"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The project uses [GitHub actions](https://github.com/features/actions) for CI. When you push a commit to this repo or PR against it, GitHub actions will run automatically to build and verify the code as updated by the commit/PR."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"## Documentation"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"`/docs` folder contains a skeleton version of the project documentation."},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"Steps for publishing documentation to the public:"},{"lineNumber":74,"author":{"gitId":"-"},"content":"1. If you are using this project template for an individual project, go your fork on GitHub.\u003cbr\u003e"},{"lineNumber":75,"author":{"gitId":"-"},"content":"   If you are using this project template for a team project, go to the team fork on GitHub."},{"lineNumber":76,"author":{"gitId":"-"},"content":"1. Click on the `settings` tab."},{"lineNumber":77,"author":{"gitId":"-"},"content":"1. Scroll down to the `GitHub Pages` section."},{"lineNumber":78,"author":{"gitId":"-"},"content":"1. Set the `source` as `master branch /docs folder`."},{"lineNumber":79,"author":{"gitId":"-"},"content":"1. Optionally, use the `choose a theme` button to choose a theme for your documentation."}],"authorContributionMap":{"daniellimws":33,"-":46}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"alstontham"},"content":"    compile group: \u0027org.fusesource.jansi\u0027, name: \u0027jansi\u0027, version: \u00271.8\u0027"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":33,"author":{"gitId":"daniellimws"},"content":"    mainClassName \u003d \"athena.Athena\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":37,"author":{"gitId":"daniellimws"},"content":"    archiveBaseName \u003d \"athena\""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.23\u0027"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":47,"author":{"gitId":"daniellimws"},"content":"    enableAssertions \u003d true"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"alstontham":1,"-":44,"daniellimws":3}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display | Name | Github Profile | Portfolio "},{"lineNumber":4,"author":{"gitId":"-"},"content":"--------|:----:|:--------------:|:---------:"},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"![](teamPictures/daniellimws.png) | Daniel Lim | [Github](https://github.com/daniellimws) | [Portfolio](team/daniellimws.md)"},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":"![](teamPictures/wish2023.png) | Vishesh Arora | [Github](https://github.com/wish2023) | [Portfolio](team/wish2023.md)"},{"lineNumber":7,"author":{"gitId":"amanda-chua"},"content":"![](teamPictures/amanda-chua.jpg) | Amanda Chua | [Github](https://github.com/amanda-chua) | [Portfolio](team/amanda-chua.md)"},{"lineNumber":8,"author":{"gitId":"alstontham"},"content":"![](teamPictures/alston-tham.JPG) | Alston Tham | [Github](https://github.com/alstontham) | [Portfolio](team/alstontham.md)"},{"lineNumber":9,"author":{"gitId":"daniellimws"},"content":"![](teamPictures/kafcis.jpg) | Marcus Cheong | [Github](https://github.com/Kafcis) | [Portfolio](team/kafcis.md)"},{"lineNumber":10,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":11,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":12,"author":{"gitId":"alstontham"},"content":""}],"authorContributionMap":{"alstontham":4,"amanda-chua":1,"-":4,"daniellimws":3}},{"path":"docs/DevOps.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"## Build automation"},{"lineNumber":2,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**."},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":"Given below are how to use Gradle for some important project tasks."},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":9,"author":{"gitId":"daniellimws"},"content":"* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e"},{"lineNumber":10,"author":{"gitId":"daniellimws"},"content":"  e.g. `./gradlew clean`"},{"lineNumber":11,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":12,"author":{"gitId":"daniellimws"},"content":"* **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e"},{"lineNumber":13,"author":{"gitId":"daniellimws"},"content":"  e.g. `./gradlew shadowJar`."},{"lineNumber":14,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":15,"author":{"gitId":"daniellimws"},"content":"* **`run`**: Builds and runs the application.\u003cbr\u003e"},{"lineNumber":16,"author":{"gitId":"daniellimws"},"content":"  **`runShadow`**: Builds the application as a fat JAR, and then runs it."},{"lineNumber":17,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":18,"author":{"gitId":"daniellimws"},"content":"* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e"},{"lineNumber":19,"author":{"gitId":"daniellimws"},"content":"  **`checkstyleTest`**: Runs the code style check for the test code base."},{"lineNumber":20,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":21,"author":{"gitId":"daniellimws"},"content":"* **`test`**: Runs all tests.\u003c"},{"lineNumber":22,"author":{"gitId":"daniellimws"},"content":"  * `./gradlew test` — Runs all tests"},{"lineNumber":23,"author":{"gitId":"daniellimws"},"content":"  * `./gradlew clean test` — Cleans the project and runs tests"},{"lineNumber":24,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":25,"author":{"gitId":"daniellimws"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":26,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":27,"author":{"gitId":"daniellimws"},"content":"## Continuous integration (CI)"},{"lineNumber":28,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":29,"author":{"gitId":"daniellimws"},"content":"This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required."},{"lineNumber":30,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":31,"author":{"gitId":"daniellimws"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":32,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":33,"author":{"gitId":"daniellimws"},"content":"## Making a release"},{"lineNumber":34,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":35,"author":{"gitId":"daniellimws"},"content":"Here are the steps to create a new release."},{"lineNumber":36,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":37,"author":{"gitId":"daniellimws"},"content":"1. Generate a fat JAR file using Gradle (i.e., `gradlew shadow`)."},{"lineNumber":38,"author":{"gitId":"daniellimws"},"content":"2. Tag the repo with the version number. e.g. `v2.0`"},{"lineNumber":39,"author":{"gitId":"daniellimws"},"content":"3. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created."}],"authorContributionMap":{"daniellimws":39}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Developer Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"amanda-chua"},"content":"- [**Developer Guide**](#developer-guide)"},{"lineNumber":4,"author":{"gitId":"alstontham"},"content":"  - [Introduction](#introduction)"},{"lineNumber":5,"author":{"gitId":"amanda-chua"},"content":"  - [**Setting up and getting started**](#setting-up-and-getting-started)"},{"lineNumber":6,"author":{"gitId":"alstontham"},"content":"    - [Prerequisites](#prerequisites)"},{"lineNumber":7,"author":{"gitId":"alstontham"},"content":"    - [Setting up the project in your computer](#setting-up-the-project-in-your-computer)"},{"lineNumber":8,"author":{"gitId":"alstontham"},"content":"  - [**Design \u0026 implementation**](#design--implementation)"},{"lineNumber":9,"author":{"gitId":"alstontham"},"content":"    - [Architecture](#architecture)"},{"lineNumber":10,"author":{"gitId":"alstontham"},"content":"    - [UI component](#ui-component)"},{"lineNumber":11,"author":{"gitId":"daniellimws"},"content":"    - [Parser component](#parser-component)"},{"lineNumber":12,"author":{"gitId":"wish2023"},"content":"    - [TaskList component](#tasklist-component)"},{"lineNumber":13,"author":{"gitId":"amanda-chua"},"content":"    - [Storage component](#storage-component)"},{"lineNumber":14,"author":{"gitId":"amanda-chua"},"content":"    - [TimeAllocator component](#timeallocator-component)"},{"lineNumber":15,"author":{"gitId":"alstontham"},"content":"    - [Timetable component](#timetable-component)"},{"lineNumber":16,"author":{"gitId":"alstontham"},"content":"  - [**Implementation**](#implementation)"},{"lineNumber":17,"author":{"gitId":"amanda-chua"},"content":"    - [Data storage](#data-storage)"},{"lineNumber":18,"author":{"gitId":"amanda-chua"},"content":"    - [User Command Processing](#user-command-processing)"},{"lineNumber":19,"author":{"gitId":"alstontham"},"content":"    - [Add task feature](#add-task-feature)"},{"lineNumber":20,"author":{"gitId":"alstontham"},"content":"    - [Edit task feature](#edit-task-feature)"},{"lineNumber":21,"author":{"gitId":"alstontham"},"content":"    - [List feature](#list-feature)"},{"lineNumber":22,"author":{"gitId":"alstontham"},"content":"    - [Mark task as done feature](#mark-task-as-done-feature)"},{"lineNumber":23,"author":{"gitId":"wish2023"},"content":"    - [Delete task feature](#delete-task-feature)"},{"lineNumber":24,"author":{"gitId":"wish2023"},"content":"    - [View task feature](#view-task-feature)"},{"lineNumber":25,"author":{"gitId":"amanda-chua"},"content":"    - [Time allocation to task in timetable](#time-allocation-to-task-in-timetable)"},{"lineNumber":26,"author":{"gitId":"amanda-chua"},"content":"  - [**Appendix: Instructions for manual testing**](#appendix-instructions-for-manual-testing)"},{"lineNumber":27,"author":{"gitId":"alstontham"},"content":"    - [Launch and shutdown](#launch-and-shutdown)"},{"lineNumber":28,"author":{"gitId":"alstontham"},"content":"    - [Adding a task](#adding-a-task)"},{"lineNumber":29,"author":{"gitId":"alstontham"},"content":"    - [Editing a task](#editing-a-task)"},{"lineNumber":30,"author":{"gitId":"alstontham"},"content":"    - [Listing all tasks](#listing-all-tasks)"},{"lineNumber":31,"author":{"gitId":"daniellimws"},"content":"    - [Marking a task as done](#marking-a-task-as-done)"},{"lineNumber":32,"author":{"gitId":"daniellimws"},"content":"    - [Deleting a task](#deleting-a-task)"},{"lineNumber":33,"author":{"gitId":"daniellimws"},"content":"    - [Viewing the full details of a task](#viewing-the-full-details-of-a-task)"},{"lineNumber":34,"author":{"gitId":"alstontham"},"content":"    - [Help](#help)"},{"lineNumber":35,"author":{"gitId":"daniellimws"},"content":"    - [Data storage](#data-storage-1)"},{"lineNumber":36,"author":{"gitId":"amanda-chua"},"content":"  - [**Appendix: Requirements**](#appendix-requirements)"},{"lineNumber":37,"author":{"gitId":"amanda-chua"},"content":"  - [**Product scope**](#product-scope)"},{"lineNumber":38,"author":{"gitId":"daniellimws"},"content":"    - [Target user profile](#target-user-profile)"},{"lineNumber":39,"author":{"gitId":"daniellimws"},"content":"    - [Value proposition](#value-proposition)"},{"lineNumber":40,"author":{"gitId":"wish2023"},"content":"    - [User Stories](#user-stories)"},{"lineNumber":41,"author":{"gitId":"amanda-chua"},"content":"    - [Non-Functional Requirements](#non-functional-requirements)"},{"lineNumber":42,"author":{"gitId":"daniellimws"},"content":"  - [**Other Guides: Documentation, Testing, Dev-ops**](#other-guides-documentation-testing-dev-ops)"},{"lineNumber":43,"author":{"gitId":"amanda-chua"},"content":"  - [**Glossary**](#glossary)"},{"lineNumber":44,"author":{"gitId":"alstontham"},"content":"    "},{"lineNumber":45,"author":{"gitId":"alstontham"},"content":"## Introduction"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"alstontham"},"content":"Welcome to ATHENA\u0027s Developer Guide! ATHENA (which stands for Automated Timetable Helper Encourager n\u0027 Assistant), is a desktop daily life planner that aims to help students automate the process of organising their schedule. It is a Command Line Interface (CLI) based application that helps users figure out the best timetable after the user has input their pre-allocated time slots for work and relaxation."},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"alstontham"},"content":"This document describes the software architecture and design of ATHENA that should hopefully help you - a developer, designer, or software tester - understand  the inner workings of ATHENA. "},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"alstontham"},"content":"Do refer to the [glossary](#glossary) if you encounter any unfamiliar terms used in this document."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"alstontham"},"content":"## Setting up and getting started"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"alstontham"},"content":"### Prerequisites"},{"lineNumber":57,"author":{"gitId":"alstontham"},"content":"1. Ensure you have `JDK 11` installed on your computer."},{"lineNumber":58,"author":{"gitId":"alstontham"},"content":"2. Install IntelliJ IDEA (referred to as IntelliJ in the rest of this document)."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"alstontham"},"content":"### Setting up the project in your computer"},{"lineNumber":61,"author":{"gitId":"alstontham"},"content":"1. Fork [this](https://https://github.com/AY2021S1-CS2113T-W12-2/tp) repository, and clone the fork onto your computer."},{"lineNumber":62,"author":{"gitId":"alstontham"},"content":"2. Open IntelliJ (If you do not see the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."},{"lineNumber":63,"author":{"gitId":"alstontham"},"content":"3. Set up the correct JDK version for Gradle  "},{"lineNumber":64,"author":{"gitId":"alstontham"},"content":"   1. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`."},{"lineNumber":65,"author":{"gitId":"alstontham"},"content":"   2. Click `New…` and select the directory where you have installed `JDK 11`."},{"lineNumber":66,"author":{"gitId":"alstontham"},"content":"   3. Click `OK`."},{"lineNumber":67,"author":{"gitId":"alstontham"},"content":"4. By default, IntelliJ has the Gradle plugin installed. If you have disabled it, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable it."},{"lineNumber":68,"author":{"gitId":"alstontham"},"content":"5. Click `Import Project`(or `Open or Import` in newer versions of IntelliJ)."},{"lineNumber":69,"author":{"gitId":"alstontham"},"content":"6. Locate the `build.gradle` file and select it. Click `OK`. If prompted, choose to `Open as Project` (not `Open as File`)."},{"lineNumber":70,"author":{"gitId":"alstontham"},"content":"7. Click `OK` to accept the default settings, if prompted. "},{"lineNumber":71,"author":{"gitId":"alstontham"},"content":"8. Wait for the importing process to finish, then you are good to go!"},{"lineNumber":72,"author":{"gitId":"alstontham"},"content":"9. Verify the setup:"},{"lineNumber":73,"author":{"gitId":"alstontham"},"content":"    1. Run `Athena` and try a few commands such as `list` or `help`."},{"lineNumber":74,"author":{"gitId":"alstontham"},"content":"    2. Run the JUnit tests to ensure they all pass."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"amanda-chua"},"content":"## **Design \u0026 implementation**"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"amanda-chua"},"content":"### Architecture"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"amanda-chua"},"content":"![Architecture Diagram](structures/ArchitectureDiagram.png)"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"amanda-chua"},"content":"The ***Architecture Diagram*** shown above displays the high-level design of ATHENA. It is done with an N-tier architectural style, where the higher layers make use of services provided by lower layers. A quick overview of each component is shown below."},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"amanda-chua"},"content":"[`Athena`](https://github.com/AY2021S1-CS2113T-W12-2/tp/blob/master/src/main/java/athena/Athena.java) is responsible for:"},{"lineNumber":85,"author":{"gitId":"amanda-chua"},"content":"* At application launch: Initializes the components and connects them up with each other."},{"lineNumber":86,"author":{"gitId":"amanda-chua"},"content":"* At application shut down: Shuts down the components."},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"amanda-chua"},"content":"The rest of the application mainly consists of these components:"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"amanda-chua"},"content":"* [**`Ui`**](#athenaUi-component): The user interface of ATHENA."},{"lineNumber":91,"author":{"gitId":"amanda-chua"},"content":"* [**`Parser`**](#parser-component): The component that parses user input and executes commands."},{"lineNumber":92,"author":{"gitId":"amanda-chua"},"content":"* [**`TaskList`**](#tasklist-component): The list storing all the user\u0027s tasks."},{"lineNumber":93,"author":{"gitId":"amanda-chua"},"content":"* [**`Storage`**](#storage-component): The component that reads data from, and writes data to, the hard disk."},{"lineNumber":94,"author":{"gitId":"amanda-chua"},"content":"* [**`TimeAllocator`**](#timeallocator-component): The component that allocates tasks without a specified time to a free time slot."},{"lineNumber":95,"author":{"gitId":"amanda-chua"},"content":"* [**`Timetable`**](#timetable-component): The component to generate an output for the *list* command."},{"lineNumber":96,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":97,"author":{"gitId":"amanda-chua"},"content":"The sections below provide more details for each component."},{"lineNumber":98,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":99,"author":{"gitId":"alstontham"},"content":"### UI component"},{"lineNumber":100,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":101,"author":{"gitId":"alstontham"},"content":"![UiStructure](https://raw.githubusercontent.com/alstontham/tp/DG-UG/docs/structures/UiStructure.png)"},{"lineNumber":102,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":103,"author":{"gitId":"daniellimws"},"content":"[`AthenaUi.java`](https://github.com/AY2021S1-CS2113T-W12-2/tp/blob/master/src/main/java/athena/ui/AthenaUi.java)"},{"lineNumber":104,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":105,"author":{"gitId":"alstontham"},"content":"1. `Ui` consists of `AthenaUi` and `ColorText`."},{"lineNumber":106,"author":{"gitId":"alstontham"},"content":"2. `AthenaUi` implements the `Ui` interface and outputs messages that the user sees."},{"lineNumber":107,"author":{"gitId":"alstontham"},"content":"3. `ColorText` applies relevant colors to certain output messages."},{"lineNumber":108,"author":{"gitId":"alstontham"},"content":"4. `AthenaUi` also prints out error messages tied to `CommandException`s that get thrown by `Command`s in `Athena`."},{"lineNumber":109,"author":{"gitId":"alstontham"},"content":"5. `LogicManager` requires `AthenaUi` to execute user commands."},{"lineNumber":110,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":111,"author":{"gitId":"amanda-chua"},"content":"### Parser component"},{"lineNumber":112,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":113,"author":{"gitId":"amanda-chua"},"content":"![Structure of the Parser Component](structures/ParserStructure.png)"},{"lineNumber":114,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":115,"author":{"gitId":"amanda-chua"},"content":"[`Parser.java`](https://github.com/AY2021S1-CS2113T-W12-2/tp/blob/master/src/main/java/athena/Parser.java)"},{"lineNumber":116,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":117,"author":{"gitId":"amanda-chua"},"content":"1. `Parser` class will parse the user command."},{"lineNumber":118,"author":{"gitId":"amanda-chua"},"content":"2. A `Command` object is then created, which is executed by `Athena`."},{"lineNumber":119,"author":{"gitId":"amanda-chua"},"content":"3. The command execution can alter the `TaskList` (e.g. Adding a task)."},{"lineNumber":120,"author":{"gitId":"amanda-chua"},"content":"4. At the end of each command execution, a corresponding method in `AthenaUi` is called to print a message to the user."},{"lineNumber":121,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":122,"author":{"gitId":"amanda-chua"},"content":"The following sequence diagram illustrates how the `Parser` works:"},{"lineNumber":123,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":124,"author":{"gitId":"amanda-chua"},"content":"![ParserSequenceDiagram](sequenceDiagrams/Parser.png)"},{"lineNumber":125,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":126,"author":{"gitId":"amanda-chua"},"content":"The respective Command sequence diagrams are illustrated [here](#implementation) under the Implementation section of this document."},{"lineNumber":127,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":128,"author":{"gitId":"wish2023"},"content":"### TaskList component"},{"lineNumber":129,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":130,"author":{"gitId":"wish2023"},"content":"![TaskListStructure](structures/TaskListStructure.png)"},{"lineNumber":131,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":132,"author":{"gitId":"wish2023"},"content":"[`TaskList.java`](https://github.com/AY2021S1-CS2113T-W12-2/tp/blob/master/src/main/java/athena/TaskList.java)"},{"lineNumber":133,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":134,"author":{"gitId":"wish2023"},"content":"1. The `TaskList` stores task data in `Task` type objects."},{"lineNumber":135,"author":{"gitId":"wish2023"},"content":"2. The `TaskList` is updated in `Athena`."},{"lineNumber":136,"author":{"gitId":"wish2023"},"content":"3. A new `Task` object is created everytime the user uses the *add* command."},{"lineNumber":137,"author":{"gitId":"wish2023"},"content":"4. The `Task` object is removed with the *delete* command."},{"lineNumber":138,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":139,"author":{"gitId":"Kafcis"},"content":"### Storage component"},{"lineNumber":140,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":141,"author":{"gitId":"daniellimws"},"content":"![`Storage.java`](structures/StorageStructure.png)"},{"lineNumber":142,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":143,"author":{"gitId":"Kafcis"},"content":"[`Storage.java`](https://github.com/AY2021S1-CS2113T-W12-2/tp/blob/master/src/main/java/athena/Storage.java)"},{"lineNumber":144,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":145,"author":{"gitId":"Kafcis"},"content":"1. The `Storage` takes in a `TaskList` object and converts it into an equivalent .csv file."},{"lineNumber":146,"author":{"gitId":"Kafcis"},"content":"2. `Athena` creates a `TaskList` from `data.csv`."},{"lineNumber":147,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":148,"author":{"gitId":"Kafcis"},"content":"### TimeAllocator component"},{"lineNumber":149,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":150,"author":{"gitId":"daniellimws"},"content":"![`TimeAllocator.java`](structures/TimeAllocatorStructure.png)"},{"lineNumber":151,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":152,"author":{"gitId":"Kafcis"},"content":"[`TimeAllocator.java`](https://github.com/AY2021S1-CS2113T-W12-2/tp/blob/master/src/main/java/athena/TimeAllocator.java)"},{"lineNumber":153,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":154,"author":{"gitId":"Kafcis"},"content":"The `TimeAllocator` allocates tasks without a specified time to a free time slot. i.e. Tasks that were added using the *add* command without the *t/* parameter."},{"lineNumber":155,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":156,"author":{"gitId":"Kafcis"},"content":"1. The `TimeAllocator` keeps track of 3 `TaskList`s. One containing all of the user\u0027s tasks, one containing only fixed tasks, and another containing only flexible tasks."},{"lineNumber":157,"author":{"gitId":"Kafcis"},"content":"2. The `TimeAllocator` creates `Log`s and a `TimeSlot` when allocating tasks."},{"lineNumber":158,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":159,"author":{"gitId":"daniellimws"},"content":"### Timetable component"},{"lineNumber":160,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":161,"author":{"gitId":"daniellimws"},"content":"![`Timetable Component`](structures/TimetableStructure.png)"},{"lineNumber":162,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":163,"author":{"gitId":"daniellimws"},"content":"[`Timetable.java`](https://github.com/AY2021S1-CS2113T-W12-2/tp/blob/master/src/main/java/athena/timetable/Timetable.java)"},{"lineNumber":164,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":165,"author":{"gitId":"daniellimws"},"content":"The `Timetable` component is used to generate an output for the *list* command, when the user requests for Athena to print out the existing tasks. It groups the tasks by their dates and draws an ASCII art timetable for the user."},{"lineNumber":166,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":167,"author":{"gitId":"daniellimws"},"content":"1. The `ListCommand` creates a `Timetable` to generate an output when the user enters the *list* command."},{"lineNumber":168,"author":{"gitId":"daniellimws"},"content":"2. The `Timetable` uses the specified `Importance` and `Forecast` to filter the tasks in the `TaskList`. It also stores the `Forecast` for later use."},{"lineNumber":169,"author":{"gitId":"daniellimws"},"content":"3. The `Timetable` groups the tasks by their `LocalDate` in a `TimetableDay`."},{"lineNumber":170,"author":{"gitId":"daniellimws"},"content":"4. The `Timetable` also creates a `TimetableDrawer` that is used to generate the timetable ASCII art."},{"lineNumber":171,"author":{"gitId":"daniellimws"},"content":"5. The `Timetable` and `TimetableDrawer` store a `TreeMap\u003cLocalDate, TimetableDay\u003e` to query for a `TimetableDay` based on a specific `LocalDate` quickly."},{"lineNumber":172,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":173,"author":{"gitId":"amanda-chua"},"content":"## **Implementation**"},{"lineNumber":174,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":175,"author":{"gitId":"amanda-chua"},"content":"This section describes some important details about how certain features are implemented."},{"lineNumber":176,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":177,"author":{"gitId":"Kafcis"},"content":"### Data storage"},{"lineNumber":178,"author":{"gitId":"Kafcis"},"content":"When Athena is launched, it loads the tasks saved in *data.csv*, a comma-separated values (csv) file located in the same directory as the program JAR file. After processing a command issued by the user, Athena automatically saves the tasks into *data.csv*. "},{"lineNumber":179,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":180,"author":{"gitId":"Kafcis"},"content":"The storage mechanism is facilitated by `Storage`. It reads and writes the `Task` objects in `TaskList` to `data.csv`."},{"lineNumber":181,"author":{"gitId":"Kafcis"},"content":"It implements the following operations:"},{"lineNumber":182,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":183,"author":{"gitId":"Kafcis"},"content":"* `Storage#saveTaskListData` - Writes the current tasks into the save file."},{"lineNumber":184,"author":{"gitId":"Kafcis"},"content":"* `Storage#loadTaskListData` - Loads the tasks from the save file into the application."},{"lineNumber":185,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":186,"author":{"gitId":"Kafcis"},"content":"These operations are called by `Athena`, when the program is launched, and after each user command."},{"lineNumber":187,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":188,"author":{"gitId":"Kafcis"},"content":"Given below is an example usage scenario and how the storage mechanism behaves at each step."},{"lineNumber":189,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":190,"author":{"gitId":"Kafcis"},"content":"**Step 1.** The user launches the application for the first time. The `TaskList` is initialized to be empty. At this time, there is no *data.csv* file present. So, when `Storage` calls `Storage#loadTaskListData`, this is detected and an empty *data.csv* file is created next to the jar file. Since there was no save file, the `TaskList` remains empty."},{"lineNumber":191,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":192,"author":{"gitId":"Kafcis"},"content":"**Step 2.** The user adds a task to the application, by executing `add n/Assignment1 t/1100 D/16-09-2020 d/2 r/Today i/high a/Refer to lecture notes`. The `TaskList` now contains 1 task (Assignment 1). After the command is executed, `Athena` calls `Storage#saveTaskListData` to automatically save the tasks in the `TaskList` into the save file."},{"lineNumber":193,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":194,"author":{"gitId":"Kafcis"},"content":"**Step 3.** The user closes the application. Nothing happens since the data in the `TaskList` is already saved."},{"lineNumber":195,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":196,"author":{"gitId":"Kafcis"},"content":"**Step 4.** The user launches the application again. The `TaskList` is initialized to be empty. `Storage#loadTaskListData` will read from `data.csv` and add the tasks inside the file into the empty `TaskList`. The `TaskList` now contains the task added earlier (Assignment 1) in **Step 3**."},{"lineNumber":197,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":198,"author":{"gitId":"Kafcis"},"content":"The following sequence diagram illustrates how the loading from storage operation works:"},{"lineNumber":199,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":200,"author":{"gitId":"Kafcis"},"content":"![LoadStorageSequenceDiagram](sequenceDiagrams/loadStorage.png)"},{"lineNumber":201,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":202,"author":{"gitId":"Kafcis"},"content":"The following sequence diagram illustrates how the saving to storage operation works:"},{"lineNumber":203,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":204,"author":{"gitId":"Kafcis"},"content":"![SaveStorageSequenceDiagram](sequenceDiagrams/saveStorage.png)"},{"lineNumber":205,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":206,"author":{"gitId":"amanda-chua"},"content":"### User command processing"},{"lineNumber":207,"author":{"gitId":"amanda-chua"},"content":"The processing of user commands is facilitated by `AthenaUi`, Parser` and the `Command` subclasses."},{"lineNumber":208,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":209,"author":{"gitId":"amanda-chua"},"content":"The following operations are implemented:"},{"lineNumber":210,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":211,"author":{"gitId":"amanda-chua"},"content":"* `AthenaUi#detectInput` - Read user input from the standard input stream."},{"lineNumber":212,"author":{"gitId":"amanda-chua"},"content":"* `Parser#parse` - Split the user\u0027s input based on the command type and the various parameters given. The parameters can be entered in any order. A `Command` object based on the type of command entered is returned. "},{"lineNumber":213,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":214,"author":{"gitId":"amanda-chua"},"content":"    The following table shows each command with their corresponding `Command` subclass."},{"lineNumber":215,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":216,"author":{"gitId":"amanda-chua"},"content":"    Command Type | `Command` Subclass"},{"lineNumber":217,"author":{"gitId":"amanda-chua"},"content":"    ---|----"},{"lineNumber":218,"author":{"gitId":"amanda-chua"},"content":"    add | `AddCommand`"},{"lineNumber":219,"author":{"gitId":"amanda-chua"},"content":"    edit | `EditCommand`"},{"lineNumber":220,"author":{"gitId":"amanda-chua"},"content":"    list | `ListCommand`"},{"lineNumber":221,"author":{"gitId":"amanda-chua"},"content":"    done | `DoneCommand`"},{"lineNumber":222,"author":{"gitId":"amanda-chua"},"content":"    delete | `DeleteCommand`"},{"lineNumber":223,"author":{"gitId":"amanda-chua"},"content":"    view | `ViewCommand`"},{"lineNumber":224,"author":{"gitId":"amanda-chua"},"content":"    help | `HelpCommand`"},{"lineNumber":225,"author":{"gitId":"amanda-chua"},"content":"    exit | `ExitCommand`"},{"lineNumber":226,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":227,"author":{"gitId":"amanda-chua"},"content":"**Step 1.**  The user input will be read in by the `AthenaUi` class. `Athena` will call for `Parser#parse` to parse the user input and retrieve the respective command type and parameters."},{"lineNumber":228,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":229,"author":{"gitId":"amanda-chua"},"content":"**Step 2.** `Parser#parse` will then create a `Command` object based on the user input. The `Command` object is returned to `Athena`."},{"lineNumber":230,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":231,"author":{"gitId":"amanda-chua"},"content":"**Step 3.** `Athena` will call `Command#execute` to execute the command."},{"lineNumber":232,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":233,"author":{"gitId":"amanda-chua"},"content":"The specific implementation of each command is explained in the following subsections. "},{"lineNumber":234,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":235,"author":{"gitId":"amanda-chua"},"content":"### Add task feature"},{"lineNumber":236,"author":{"gitId":"amanda-chua"},"content":"The mechanism to add a task is facilitated by the `AddCommand` class. The user is able to add a task with the `add` command."},{"lineNumber":237,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":238,"author":{"gitId":"amanda-chua"},"content":"`AddCommand#execute` is called and the `Task` described by the user input is added to the `TaskList`."},{"lineNumber":239,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":240,"author":{"gitId":"amanda-chua"},"content":"`AddCommand` and `TaskList` implements the following operations:"},{"lineNumber":241,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":242,"author":{"gitId":"amanda-chua"},"content":"* `AddCommand#execute` - Adds the specified task into `TaskList` and calls `AthenaUi` to print a message to the output."},{"lineNumber":243,"author":{"gitId":"amanda-chua"},"content":"* `TaskList#addTask` - Creates a task based on the given parameters and adds it into the list."},{"lineNumber":244,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":245,"author":{"gitId":"amanda-chua"},"content":"The process starts with `Parser#parse` parsing the user input and returns an `AddCommand` object. This is described in the [**user command processing**](#user-command-processing) section."},{"lineNumber":246,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":247,"author":{"gitId":"amanda-chua"},"content":"Given below is an example usage scenario and how the task adding mechanism behaves at each step."},{"lineNumber":248,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":249,"author":{"gitId":"amanda-chua"},"content":"**Step 1.** The user launches the application for the first time. The `TaskList` is initialized to be empty."},{"lineNumber":250,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":251,"author":{"gitId":"amanda-chua"},"content":"![AddTaskEmptyListObjectDiagram](objectDiagrams/addTask/empty.png)"},{"lineNumber":252,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":253,"author":{"gitId":"amanda-chua"},"content":"**Step 2.** The user adds a task to the application, by entering `add n/Assignment1 t/1100 D/16-11-2020 d/2 r/Today i/high a/Refer to lecture notes`. `Parser#parse` parses the user input, and creates an `AddCommand` object. The `AddCommand` object is returned to `Athena`."},{"lineNumber":254,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":255,"author":{"gitId":"amanda-chua"},"content":"**Step 3.** `Athena` calls `AddCommand#execute`, which calls `TaskList#addTask` to create a task based on the given parameters, and adds the task to the list. The `TaskList` now contains 1 task (Assignment1)."},{"lineNumber":256,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":257,"author":{"gitId":"amanda-chua"},"content":"![AddTaskOneTaskObjectDiagram](objectDiagrams/addTask/onetask.png)"},{"lineNumber":258,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":259,"author":{"gitId":"amanda-chua"},"content":"**Step 4.** `AthenaUi` prints a message to inform the user of whether the command has succeeded or failed."},{"lineNumber":260,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":261,"author":{"gitId":"amanda-chua"},"content":"The following sequence diagram illustrates how **Step 3** of the task adding operation works:"},{"lineNumber":262,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":263,"author":{"gitId":"amanda-chua"},"content":"![AddTaskSequenceDiagram](sequenceDiagrams/AddCommand.png)"},{"lineNumber":264,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":265,"author":{"gitId":"amanda-chua"},"content":"### Edit task feature"},{"lineNumber":266,"author":{"gitId":"amanda-chua"},"content":"The mechanism to edit a task is facilitated by the `EditCommand` class. The user is able to edit a task with the `edit` command."},{"lineNumber":267,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":268,"author":{"gitId":"amanda-chua"},"content":"`EditCommand#execute` is called and the `Task` described by the user input is edited in the `TaskList`."},{"lineNumber":269,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":270,"author":{"gitId":"amanda-chua"},"content":"`EditCommand`, `TaskList` implements the following operations:"},{"lineNumber":271,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":272,"author":{"gitId":"amanda-chua"},"content":"* `EditCommand#execute` -  Edits the specified task in `TaskList` and calls `AthenaUi` to print a message to the output."},{"lineNumber":273,"author":{"gitId":"amanda-chua"},"content":"* `TaskList#editTask` - Edits a task based on the given parameters and adds the updated task into the list."},{"lineNumber":274,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":275,"author":{"gitId":"amanda-chua"},"content":"The process starts with `Parser#parse` parsing the user input and returns an `EditCommand` object. This is described in the [**user command processing**](#user-command-processing) section."},{"lineNumber":276,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":277,"author":{"gitId":"amanda-chua"},"content":"Given below is an example usage scenario and how the task editing mechanism behaves at each step."},{"lineNumber":278,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":279,"author":{"gitId":"amanda-chua"},"content":"**Step 1.** The user launches the application. The `TaskList` contains at least one `Task`."},{"lineNumber":280,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":281,"author":{"gitId":"amanda-chua"},"content":"![BeforeEditTaskObjectDiagram](objectDiagrams/editTask/BeforeEditTask.png) "},{"lineNumber":282,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":283,"author":{"gitId":"amanda-chua"},"content":"**Step 2.** The user edits a task to the application, by inputting `edit 1 t/1200`. `Parser#parse` parses the user input, and creates an `EditCommand` object. The `EditCommand` object is returned to `Athena`."},{"lineNumber":284,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":285,"author":{"gitId":"amanda-chua"},"content":"**Step 3.** `Athena` calls `EditCommand#execute`, which calls `TaskList#editTask` to edit the specified task based on the given parameters. The `TaskList` now has the start time of task with index 1 changed from \"1100\" to \"1200\". "},{"lineNumber":286,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":287,"author":{"gitId":"amanda-chua"},"content":"![EditTaskOneObjectDiagram](objectDiagrams/editTask/AfterEditTask.png) "},{"lineNumber":288,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":289,"author":{"gitId":"amanda-chua"},"content":"**Step 4.** `AthenaUi` prints a message to inform the user of whether the command has succeeded or failed. "},{"lineNumber":290,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":291,"author":{"gitId":"amanda-chua"},"content":"The following sequence diagram illustrates how **Step 3** of the editing task operation works:"},{"lineNumber":292,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":293,"author":{"gitId":"amanda-chua"},"content":"![EditTaskSequenceDiagram](sequenceDiagrams/EditCommand.png)"},{"lineNumber":294,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":295,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":296,"author":{"gitId":"daniellimws"},"content":"### List feature"},{"lineNumber":297,"author":{"gitId":"daniellimws"},"content":"The mechanism to print out the user\u0027s tasks is facilitated by the `ListCommand` class. The user is able to see a list of their tasks with the `list` command, and can provide filters to display the tasks based on their `Importance` and `Time`."},{"lineNumber":298,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":299,"author":{"gitId":"daniellimws"},"content":"`ListCommand#execute` is called, and a `Timetable`is used to group the user\u0027s tasks by their dates before printing them out."},{"lineNumber":300,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":301,"author":{"gitId":"daniellimws"},"content":"`ListCommand` and `Timetable` implements the following operations:"},{"lineNumber":302,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":303,"author":{"gitId":"daniellimws"},"content":"* `ListCommand#execute` - Passes the given filters to `Timetable`."},{"lineNumber":304,"author":{"gitId":"daniellimws"},"content":"* `Timetable#populateTimetable` - Groups the tasks by their dates in a `TimetableDay`."},{"lineNumber":305,"author":{"gitId":"daniellimws"},"content":"* `Timetable#toString` - Prepares a string with a ASCII art timetable and a list of the user\u0027s tasks, so that it can be printed to the user."},{"lineNumber":306,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":307,"author":{"gitId":"amanda-chua"},"content":"The process starts with `Parser#parse` parsing the user input and returning a `ListCommand` object. This is described in the [**user command processing**](#user-command-processing) section."},{"lineNumber":308,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":309,"author":{"gitId":"daniellimws"},"content":"Given below is an example usage scenario and how this mechanism behaves at each step."},{"lineNumber":310,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":311,"author":{"gitId":"daniellimws"},"content":"**Step 1.** The user launches the application. The `TaskList` contains the `Task`s for the week."},{"lineNumber":312,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":313,"author":{"gitId":"daniellimws"},"content":"**Step 2.** The user wants to see the `HIGH` `IMPORTANCE` tasks within one week from now, by entering `list i/HIGH f/WEEK`. `Parser#parse` parses the user input, and creates a `ListCommand` object. The `ListCommand` object is returned to `Athena`."},{"lineNumber":314,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":315,"author":{"gitId":"daniellimws"},"content":"**Step 3.** `Athena` calls `ListCommand#execute`, which creates a `Timetable` with the `TaskList` and the filter values provided by the user. `Timetable` calls `Timetable#populateTimetable` to groups"},{"lineNumber":316,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":317,"author":{"gitId":"daniellimws"},"content":"**Step 4.** `AthenaUi` prints the output generated by `Timetable#toString`."},{"lineNumber":318,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":319,"author":{"gitId":"daniellimws"},"content":"![ListSequenceDiagram](sequenceDiagrams/ListCommand.png)"},{"lineNumber":320,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":321,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":322,"author":{"gitId":"daniellimws"},"content":"### Mark task as done feature"},{"lineNumber":323,"author":{"gitId":"daniellimws"},"content":"The mechanism to mark a task as done is facilitated by the `DoneCommand` class. The user can use this feature through the `done` command."},{"lineNumber":324,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":325,"author":{"gitId":"daniellimws"},"content":"`DoneCommand#execute` is called and the `Task` selected by the user is marked as done by the `TaskList`."},{"lineNumber":326,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":327,"author":{"gitId":"daniellimws"},"content":"`DoneCommand` and `TaskList` implements the following operations:"},{"lineNumber":328,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":329,"author":{"gitId":"daniellimws"},"content":"* `DoneCommand#execute` - Passes the task number of the corresponding task to `TaskList` to mark the task as done, then calls `AthenaUi` to print a message to the output."},{"lineNumber":330,"author":{"gitId":"daniellimws"},"content":"* `TaskList#markTaskAsDone` - Searches for the task with the given number, and marks it as done."},{"lineNumber":331,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":332,"author":{"gitId":"amanda-chua"},"content":"The process starts with `Parser#parse` parsing the user input and returning a `DoneCommand` object. This is described in the [**user command processing**](#user-command-processing) section."},{"lineNumber":333,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":334,"author":{"gitId":"daniellimws"},"content":"Given below is an example usage scenario and how this mechanism behaves at each step."},{"lineNumber":335,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":336,"author":{"gitId":"daniellimws"},"content":"**Step 1.** The user launches the application. The `TaskList` contains at least one `Task`."},{"lineNumber":337,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":338,"author":{"gitId":"daniellimws"},"content":"![DoneTaskNotDoneObjectDiagram](objectDiagrams/doneTask/beforeDone.png)"},{"lineNumber":339,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":340,"author":{"gitId":"daniellimws"},"content":"**Step 2.** The user marks **Task 1** as done, by entering `done 1`. `Parser#parse` parses the user input, and creates a `DoneCommand` object. The `DoneCommand` object is returned to `Athena`."},{"lineNumber":341,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":342,"author":{"gitId":"daniellimws"},"content":"**Step 3.** `Athena` calls `DoneCommand#execute`, which calls `TaskList#markTaskAsDone` to mark **Task 1** as done. **Task 1** is now marked as done."},{"lineNumber":343,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":344,"author":{"gitId":"daniellimws"},"content":"![DoneTaskDoneObjectDiagram](objectDiagrams/doneTask/afterDone.png)"},{"lineNumber":345,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":346,"author":{"gitId":"daniellimws"},"content":"**Step 4.** `AthenaUi` prints a message to inform the user of whether the command has succeeded or failed."},{"lineNumber":347,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":348,"author":{"gitId":"daniellimws"},"content":"The following sequence diagram illustrates how **Step 3** of the marking task as done operation works:"},{"lineNumber":349,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":350,"author":{"gitId":"daniellimws"},"content":"![DoneSequenceDiagram](sequenceDiagrams/DoneCommand.png)"},{"lineNumber":351,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":352,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":353,"author":{"gitId":"wish2023"},"content":"### Delete task feature"},{"lineNumber":354,"author":{"gitId":"wish2023"},"content":"The mechanism to delete a task is facilitated by the `DeleteCommand` class. The user is able to delete a task with the `delete` command."},{"lineNumber":355,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":356,"author":{"gitId":"wish2023"},"content":"`DeleteCommand#execute` is called and the `Task` selected by the user is deleted from the `TaskList`."},{"lineNumber":357,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":358,"author":{"gitId":"wish2023"},"content":"`DeleteCommand` and `TaskList` implements the following operations:"},{"lineNumber":359,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":360,"author":{"gitId":"wish2023"},"content":"* `DeleteCommand#execute` - Passes the task number of the corresponding task to `TaskList` to delete the task, then calls `AthenaUi` to print a message to the output."},{"lineNumber":361,"author":{"gitId":"wish2023"},"content":"* `TaskList#deleteTask` - Searches for the task with the given task number, then deletes it."},{"lineNumber":362,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":363,"author":{"gitId":"amanda-chua"},"content":"The process starts with `Parser#parse` parsing the user input and returning a `DeleteCommand` object. This is described in the [*User command processing*](#user-command-processing) section."},{"lineNumber":364,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":365,"author":{"gitId":"wish2023"},"content":"Given below is an example usage scenario and how this mechanism behaves at each step."},{"lineNumber":366,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":367,"author":{"gitId":"wish2023"},"content":"**Step 1.** The user launches the application. The `TaskList` contains at least one `Task`."},{"lineNumber":368,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":369,"author":{"gitId":"wish2023"},"content":"![BeforeDeleteTaskObjectDiagram](objectDiagrams/deleteTask/notDeleted.png)"},{"lineNumber":370,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":371,"author":{"gitId":"wish2023"},"content":"**Step 2.** The user deletes **Task 1** by entering `delete 1`. `Parser#parse` parses the user input, and creates a `DeleteCommand` object. The `DeleteCommand` object is returned to `Athena`."},{"lineNumber":372,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":373,"author":{"gitId":"wish2023"},"content":"**Step 3.** `Athena` calls `DeleteCommand#execute`, which calls `TaskList#deleteTask` to delete **Task 1**. **Task 1** is now deleted."},{"lineNumber":374,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":375,"author":{"gitId":"wish2023"},"content":"![AfterDeleteTaskObjectDiagram](objectDiagrams/deleteTask/deleted.png)"},{"lineNumber":376,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":377,"author":{"gitId":"wish2023"},"content":"**Step 4.** `AthenaUi` prints a message to inform the user of whether the command has succeeded or failed."},{"lineNumber":378,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":379,"author":{"gitId":"wish2023"},"content":"The following sequence diagram illustrates how **Step 3** of the task deleting operation works:"},{"lineNumber":380,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":381,"author":{"gitId":"wish2023"},"content":"![DeleteSequenceDiagram](sequenceDiagrams/DeleteCommand.png)"},{"lineNumber":382,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":383,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":384,"author":{"gitId":"wish2023"},"content":"### View task feature"},{"lineNumber":385,"author":{"gitId":"wish2023"},"content":"The mechanism to view a task is facilitated by the `ViewCommand` class. The user is able to view a task with the `view` command."},{"lineNumber":386,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":387,"author":{"gitId":"wish2023"},"content":"`ViewCommand#execute` is called and the details of the `Task` selected by the user are displayed by the `TaskList`."},{"lineNumber":388,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":389,"author":{"gitId":"wish2023"},"content":"`ViewCommand` and `TaskList` implement the following operations:"},{"lineNumber":390,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":391,"author":{"gitId":"wish2023"},"content":"* `ViewCommand#execute` - Passes the selected task number to `TaskList` of that task that is to be viewed, then calls `AthenaUi` to print a message to the output."},{"lineNumber":392,"author":{"gitId":"wish2023"},"content":"* `TaskList#getTaskDescription` - Searches for the task with the given number, and return the details of the task."},{"lineNumber":393,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":394,"author":{"gitId":"amanda-chua"},"content":"The process starts with `Parser#parse` parsing the user input and returning a `ViewCommand` object. This is described in the [*User command processing*](#user-command-processing) section."},{"lineNumber":395,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":396,"author":{"gitId":"wish2023"},"content":"Given below is an example usage scenario and how this mechanism behaves at each step."},{"lineNumber":397,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":398,"author":{"gitId":"wish2023"},"content":"**Step 1.** The user launches the application. The `TaskList` contains at least one `Task`."},{"lineNumber":399,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":400,"author":{"gitId":"wish2023"},"content":"**Step 2.** The user views **Task 1** by entering `view 1`. `Parser#parse` parses the user input, and creates a `ViewCommand` object. The `ViewCommand` object is returned to `Athena`."},{"lineNumber":401,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":402,"author":{"gitId":"wish2023"},"content":"**Step 3.** `Athena` calls `ViewCommand#execute`, which calls `TaskList` to view **Task 1**. The details of **Task 1** can now be viewed."},{"lineNumber":403,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":404,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":405,"author":{"gitId":"wish2023"},"content":"**Step 4.** `AthenaUi` prints a message to inform the user of whether the command has succeeded or failed."},{"lineNumber":406,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":407,"author":{"gitId":"wish2023"},"content":"The following sequence diagram illustrates how **Step 3** of the task viewing operation works:"},{"lineNumber":408,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":409,"author":{"gitId":"wish2023"},"content":"![ViewSequenceDiagram](sequenceDiagrams/ViewCommand.png)"},{"lineNumber":410,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":411,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":412,"author":{"gitId":"Kafcis"},"content":"### Time allocation to task in timetable"},{"lineNumber":413,"author":{"gitId":"Kafcis"},"content":"The time allocation mechanism is facilitated by `TimeAllocator`. It allocates time slots to `Task` objects in a `TaskList` that are not given a fixed time slot by the user. It implements the following operations:"},{"lineNumber":414,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":415,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":416,"author":{"gitId":"Kafcis"},"content":"Implementation"},{"lineNumber":417,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":418,"author":{"gitId":"Kafcis"},"content":"* `TimeAllocator#runAllocate` - Creates `Log` and `TimeSlot` objects based on the tasks available. It also changes the `startTime` of the allocated tasks."},{"lineNumber":419,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":420,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":421,"author":{"gitId":"Kafcis"},"content":"When Athena executes any command, the current `Tasklist` is used to generate a `TimeAllocator` object."},{"lineNumber":422,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":423,"author":{"gitId":"Kafcis"},"content":"`TimeAllocator` keeps `tasklist`,`fixedTaskList` and `flexibleTaskList` objects."},{"lineNumber":424,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":425,"author":{"gitId":"Kafcis"},"content":"`TimeAllocator#runAllocate` creates a `Log` object named dayLog and a `TimeSlot` object to keep track of the current allocations for the day. "},{"lineNumber":426,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":427,"author":{"gitId":"Kafcis"},"content":"Before the allocation of `Task` objects begin, an ArrayList `unassignedTimeTasks` is created from `flexibleTaskList`."},{"lineNumber":428,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":429,"author":{"gitId":"Kafcis"},"content":"Fixed tasks that occur on the same day are placed into the `dayLog` first."},{"lineNumber":430,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":431,"author":{"gitId":"Kafcis"},"content":"`TimeSlot#findNextSlot` continually finds the next possible locations for the `Task` objects in `flexibleTaskList`."},{"lineNumber":432,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":433,"author":{"gitId":"Kafcis"},"content":"The method will iterate through all the combinations of `Log` objects with the existing `flexibleTaskList` until it finds one that completely takes up the time in the `TimeSlot` or it returns the best possible timetable after going through all the possibilities."},{"lineNumber":434,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":435,"author":{"gitId":"Kafcis"},"content":"The dayLog is used to assign the `startTime` of the allocated `Task` objects, and also removes them from `unassignedTimeTasks`."},{"lineNumber":436,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":437,"author":{"gitId":"Kafcis"},"content":"This process is repeated to fill up the time for the subsequent days."},{"lineNumber":438,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":439,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":440,"author":{"gitId":"Kafcis"},"content":"Shown below is an example usage scenario and how the allocation mechanism behaves at each step."},{"lineNumber":441,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":442,"author":{"gitId":"Kafcis"},"content":"**Step 1**. The user launches the application. The *data.csv* file located next to the application JAR file contains 5 tasks. These tasks are loaded into the `TaskList`. 3 of them have a fixed time slot, while the other 2 are not assigned any time slot."},{"lineNumber":443,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":444,"author":{"gitId":"Kafcis"},"content":"**Step 2.** The user executes any command and the allocator will run automatically."},{"lineNumber":445,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":446,"author":{"gitId":"Kafcis"},"content":"**Step 3**. The application allocates a time slot for the `Task` objects without a fixed time slot."},{"lineNumber":447,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":448,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":449,"author":{"gitId":"Kafcis"},"content":"The following sequence diagram illustrates how the allocate operation works:"},{"lineNumber":450,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":451,"author":{"gitId":"Kafcis"},"content":"![TimeAllocatorSequenceDiagram](sequenceDiagrams/TimeAllocator.png)"},{"lineNumber":452,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":453,"author":{"gitId":"Kafcis"},"content":"**Step 4.** The user executes `list` to get an overview of the week. The user sees all 5 tasks in the printed timetable."},{"lineNumber":454,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":455,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":456,"author":{"gitId":"daniellimws"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":457,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":458,"author":{"gitId":"amanda-chua"},"content":"## Appendix: Instructions for manual testing"},{"lineNumber":459,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":460,"author":{"gitId":"amanda-chua"},"content":"Given below are instructions to test the app manually."},{"lineNumber":461,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":462,"author":{"gitId":"amanda-chua"},"content":"#### Launch and shutdown"},{"lineNumber":463,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":464,"author":{"gitId":"amanda-chua"},"content":"1. Initial launch"},{"lineNumber":465,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":466,"author":{"gitId":"amanda-chua"},"content":"    1. Ensure that you have **Java 11** or above installed."},{"lineNumber":467,"author":{"gitId":"amanda-chua"},"content":"    2. Download the latest version of **ATHENA** [here](https://github.com/AY2021S1-CS2113T-W12-2/tp/releases)."},{"lineNumber":468,"author":{"gitId":"amanda-chua"},"content":"    3. Copy the downloaded Athena.jar into your **Desktop**."},{"lineNumber":469,"author":{"gitId":"amanda-chua"},"content":"    4. Open the terminal/command prompt and enter `cd Desktop`."},{"lineNumber":470,"author":{"gitId":"amanda-chua"},"content":"    5. Then, enter `java -jar Athena.jar`."},{"lineNumber":471,"author":{"gitId":"amanda-chua"},"content":"    "},{"lineNumber":472,"author":{"gitId":"amanda-chua"},"content":"        **Expected:** Shows the command line interface with welcome message."},{"lineNumber":473,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":474,"author":{"gitId":"amanda-chua"},"content":"2. Shutdown ATHENA"},{"lineNumber":475,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":476,"author":{"gitId":"amanda-chua"},"content":"   1. Enter `exit` into the terminal/command prompt while **ATHENA** is running."},{"lineNumber":477,"author":{"gitId":"amanda-chua"},"content":"   "},{"lineNumber":478,"author":{"gitId":"amanda-chua"},"content":"        **Expected**: A farewell message by ATHENA will be shown.   "},{"lineNumber":479,"author":{"gitId":"amanda-chua"},"content":"    "},{"lineNumber":480,"author":{"gitId":"amanda-chua"},"content":"#### Adding a task"},{"lineNumber":481,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":482,"author":{"gitId":"amanda-chua"},"content":"Adding a task to the list."},{"lineNumber":483,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":484,"author":{"gitId":"amanda-chua"},"content":"1. **Test case:** `add n/Assignment1 t/1100 D/16-09-2020 d/2 r/Today i/high a/Refer to lecture notes`\u003cbr\u003e"},{"lineNumber":485,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":486,"author":{"gitId":"amanda-chua"},"content":"   **Expected:** First task is added to the list. Details of the added task are shown."},{"lineNumber":487,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":488,"author":{"gitId":"amanda-chua"},"content":"2. **Test case:** `add t/1100 D/16-09-2020`\u003cbr\u003e"},{"lineNumber":489,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":490,"author":{"gitId":"amanda-chua"},"content":"   **Expected:** No task is added. Error details are shown."},{"lineNumber":491,"author":{"gitId":"amanda-chua"},"content":"   "},{"lineNumber":492,"author":{"gitId":"amanda-chua"},"content":"#### Editing a task"},{"lineNumber":493,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":494,"author":{"gitId":"amanda-chua"},"content":"Editing a task details while all tasks are shown."},{"lineNumber":495,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":496,"author":{"gitId":"amanda-chua"},"content":"**Prerequisites:** List all tasks using the `list` command."},{"lineNumber":497,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":498,"author":{"gitId":"amanda-chua"},"content":"1. **Test case:** `edit 1 n/new name`\u003cbr\u003e"},{"lineNumber":499,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":500,"author":{"gitId":"amanda-chua"},"content":"   **Expected:** Name of the task with index 1 in the list is changed to `new name`."},{"lineNumber":501,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":502,"author":{"gitId":"amanda-chua"},"content":"2. **Test case:** `edit 1`\u003cbr\u003e"},{"lineNumber":503,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":504,"author":{"gitId":"amanda-chua"},"content":"   **Expected:** No task is edited as there are no parameters entered. Error details are shown."},{"lineNumber":505,"author":{"gitId":"amanda-chua"},"content":"   "},{"lineNumber":506,"author":{"gitId":"amanda-chua"},"content":"3. **Test case:** `edit -1`\u003cbr\u003e"},{"lineNumber":507,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":508,"author":{"gitId":"amanda-chua"},"content":"   **Expected:** No task is edited. Error details are shown."},{"lineNumber":509,"author":{"gitId":"amanda-chua"},"content":"   "},{"lineNumber":510,"author":{"gitId":"amanda-chua"},"content":"4. **Other incorrect edit commands to try:** `edit`, `edit x` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":511,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":512,"author":{"gitId":"amanda-chua"},"content":"   **Expected:** No task is edited. Error details are shown."},{"lineNumber":513,"author":{"gitId":"amanda-chua"},"content":"   "},{"lineNumber":514,"author":{"gitId":"amanda-chua"},"content":"#### Listing all tasks"},{"lineNumber":515,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":516,"author":{"gitId":"amanda-chua"},"content":"Listing all the tasks with or without filters."},{"lineNumber":517,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":518,"author":{"gitId":"amanda-chua"},"content":"1. **Test case:** `list`\u003cbr\u003e"},{"lineNumber":519,"author":{"gitId":"amanda-chua"},"content":"   **Expected:** All the tasks will be listed."},{"lineNumber":520,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":521,"author":{"gitId":"amanda-chua"},"content":"2. **Test case:** `list i/HIGH f/TODAY`\u003cbr\u003e"},{"lineNumber":522,"author":{"gitId":"amanda-chua"},"content":"   **Expected:** All the tasks today with high importance will be shown."},{"lineNumber":523,"author":{"gitId":"amanda-chua"},"content":"   "},{"lineNumber":524,"author":{"gitId":"amanda-chua"},"content":"3. **Test case:** `list f/TOMORROW`\u003cbr\u003e"},{"lineNumber":525,"author":{"gitId":"amanda-chua"},"content":"   **Expected:** No task is listed. Error details is shown."},{"lineNumber":526,"author":{"gitId":"amanda-chua"},"content":"   "},{"lineNumber":527,"author":{"gitId":"amanda-chua"},"content":"#### Marking a task as done"},{"lineNumber":528,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":529,"author":{"gitId":"amanda-chua"},"content":"Marking a task as done while all tasks are shown."},{"lineNumber":530,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":531,"author":{"gitId":"amanda-chua"},"content":"**Prerequisites:** List all tasks using the `list` command."},{"lineNumber":532,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":533,"author":{"gitId":"amanda-chua"},"content":"1. **Test case:** `done 1`\u003cbr\u003e"},{"lineNumber":534,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":535,"author":{"gitId":"amanda-chua"},"content":"   **Expected:** Task with index 1 is marked as done in the list. Details of the task are shown."},{"lineNumber":536,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":537,"author":{"gitId":"amanda-chua"},"content":"2. **Test case:** `done -1`\u003cbr\u003e"},{"lineNumber":538,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":539,"author":{"gitId":"amanda-chua"},"content":"   **Expected:** No task is marked as done. Error details are shown."},{"lineNumber":540,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":541,"author":{"gitId":"amanda-chua"},"content":"3. **Other incorrect delete commands to try:** `done`, `done x` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":542,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":543,"author":{"gitId":"amanda-chua"},"content":"    **Expected:** No task is marked as done. Error details are shown.   "},{"lineNumber":544,"author":{"gitId":"amanda-chua"},"content":"      "},{"lineNumber":545,"author":{"gitId":"amanda-chua"},"content":"#### Deleting a task"},{"lineNumber":546,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":547,"author":{"gitId":"amanda-chua"},"content":"Deleting a task while all tasks are shown."},{"lineNumber":548,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":549,"author":{"gitId":"amanda-chua"},"content":"**Prerequisite:** List all tasks using the `list` command to see the existing tasks."},{"lineNumber":550,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":551,"author":{"gitId":"amanda-chua"},"content":"1. **Test case:** `delete 0` \u003cbr\u003e"},{"lineNumber":552,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":553,"author":{"gitId":"amanda-chua"},"content":"    **Prerequisite:** There should be at least one task in the list. If not, follow the steps in [*Adding a task*](#adding-a-task) to add a task.\u003cbr\u003e"},{"lineNumber":554,"author":{"gitId":"amanda-chua"},"content":"    "},{"lineNumber":555,"author":{"gitId":"amanda-chua"},"content":"    **Expected:** Task with index 0 is deleted from the list. Details of the deleted task are shown."},{"lineNumber":556,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":557,"author":{"gitId":"amanda-chua"},"content":"2. **Test case:** `delete -1`\u003cbr\u003e"},{"lineNumber":558,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":559,"author":{"gitId":"amanda-chua"},"content":"   **Expected:** No task is deleted. Error details are shown."},{"lineNumber":560,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":561,"author":{"gitId":"amanda-chua"},"content":"3. **Other incorrect delete commands to try:** `delete`, `delete x` (x can be any number that doesn\u0027t belong to a task in the list)\u003cbr\u003e"},{"lineNumber":562,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":563,"author":{"gitId":"amanda-chua"},"content":"   **Expected:** No task is deleted. Error details are shown."},{"lineNumber":564,"author":{"gitId":"amanda-chua"},"content":" "},{"lineNumber":565,"author":{"gitId":"amanda-chua"},"content":"      "},{"lineNumber":566,"author":{"gitId":"amanda-chua"},"content":"#### Viewing the full details of a task"},{"lineNumber":567,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":568,"author":{"gitId":"amanda-chua"},"content":"Viewing a task details while all tasks are shown."},{"lineNumber":569,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":570,"author":{"gitId":"amanda-chua"},"content":"**Prerequisites:** List all tasks using the `list` command."},{"lineNumber":571,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":572,"author":{"gitId":"amanda-chua"},"content":"1. **Test case:** `view 1`\u003cbr\u003e"},{"lineNumber":573,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":574,"author":{"gitId":"amanda-chua"},"content":"   **Expected:** Details of the task with index 1 in the list are shown."},{"lineNumber":575,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":576,"author":{"gitId":"amanda-chua"},"content":"2. **Test case:** `view -1`\u003cbr\u003e"},{"lineNumber":577,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":578,"author":{"gitId":"amanda-chua"},"content":"   **Expected:** No task details are shown. Error details are shown."},{"lineNumber":579,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":580,"author":{"gitId":"amanda-chua"},"content":"3. **Other incorrect view commands to try:** `view`, `view x` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":581,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":582,"author":{"gitId":"amanda-chua"},"content":"   **Expected:** No task details are shown. Error details are shown."},{"lineNumber":583,"author":{"gitId":"amanda-chua"},"content":"      "},{"lineNumber":584,"author":{"gitId":"amanda-chua"},"content":"#### Help"},{"lineNumber":585,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":586,"author":{"gitId":"amanda-chua"},"content":"Guide on the use of ATHENA."},{"lineNumber":587,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":588,"author":{"gitId":"amanda-chua"},"content":"1. **Test case:** `help`\u003cbr\u003e"},{"lineNumber":589,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":590,"author":{"gitId":"amanda-chua"},"content":"   **Expected:** A guide on how to use ATHENA will be shown."},{"lineNumber":591,"author":{"gitId":"alstontham"},"content":"   "},{"lineNumber":592,"author":{"gitId":"daniellimws"},"content":"#### Data storage"},{"lineNumber":593,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":594,"author":{"gitId":"daniellimws"},"content":"Storage of user data (i.e. tasks)."},{"lineNumber":595,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":596,"author":{"gitId":"daniellimws"},"content":"Testing if ATHENA is able to handle corrupted data files."},{"lineNumber":597,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":598,"author":{"gitId":"daniellimws"},"content":"**Prerequisite:** Open *data.csv* located next to *Athena.jar*."},{"lineNumber":599,"author":{"gitId":"daniellimws"},"content":"       "},{"lineNumber":600,"author":{"gitId":"daniellimws"},"content":"1. **Test case:** Add `,aaaa` at the end of the last line."},{"lineNumber":601,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":602,"author":{"gitId":"daniellimws"},"content":"    **Problem:** The task on that line is corrupted. "},{"lineNumber":603,"author":{"gitId":"daniellimws"},"content":"      "},{"lineNumber":604,"author":{"gitId":"daniellimws"},"content":"      **Expected:** When you launch Athena again, it will fail to start, and an error message will be given."},{"lineNumber":605,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":606,"author":{"gitId":"daniellimws"},"content":"2. **Test case:** Remove one of the commas (`,`) from the file. (If *data.csv* is not empty)"},{"lineNumber":607,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":608,"author":{"gitId":"daniellimws"},"content":"    **Problem:** The task on that line is corrupted. "},{"lineNumber":609,"author":{"gitId":"daniellimws"},"content":"      "},{"lineNumber":610,"author":{"gitId":"daniellimws"},"content":"    **Expected:** When you launch Athena again, it will fail to start, and an error message will be given."},{"lineNumber":611,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":612,"author":{"gitId":"daniellimws"},"content":"3. **Test case:** Add `aaaaa` at the end of the file."},{"lineNumber":613,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":614,"author":{"gitId":"daniellimws"},"content":"    **Problem:** An invalid task is added."},{"lineNumber":615,"author":{"gitId":"daniellimws"},"content":"      "},{"lineNumber":616,"author":{"gitId":"daniellimws"},"content":"    **Expected:** When you launch Athena again, it will fail to start, and an error message will be given."},{"lineNumber":617,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":618,"author":{"gitId":"alstontham"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":619,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":620,"author":{"gitId":"alstontham"},"content":"## Appendix: Requirements"},{"lineNumber":621,"author":{"gitId":"alstontham"},"content":"### Product scope"},{"lineNumber":622,"author":{"gitId":"alstontham"},"content":"#### Target user profile"},{"lineNumber":623,"author":{"gitId":"alstontham"},"content":"* is a university student"},{"lineNumber":624,"author":{"gitId":"alstontham"},"content":"* has a need to manage a significant number of tasks"},{"lineNumber":625,"author":{"gitId":"alstontham"},"content":"* can type fast and prefers typing over mouse interactions"},{"lineNumber":626,"author":{"gitId":"alstontham"},"content":"* is comfortable using the command line interface"},{"lineNumber":627,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":628,"author":{"gitId":"alstontham"},"content":"#### Value proposition"},{"lineNumber":629,"author":{"gitId":"alstontham"},"content":"* ATHENA helps students to automate the process of organising their schedule. After the user inputs pre-allocated time slots for work and relaxation, ATHENA figures out the best theoretical timetable based on the user’s needs."},{"lineNumber":630,"author":{"gitId":"alstontham"},"content":"* The timetable can be updated anytime during the week."},{"lineNumber":631,"author":{"gitId":"alstontham"},"content":"* ATHENA helps to reduce the amount of time and effort that users need to spend planning their time by finding free spaces to slot tasks in, with the goal of reducing dead space in the user’s timetable. "},{"lineNumber":632,"author":{"gitId":"alstontham"},"content":"* The planner will also make sure the user has enough time to eat, exercise and sleep. The user can set up ATHENA to follow a fixed weekly routine, and only needs to update a task list. ATHENA will then plan the timetable based on the importance and deadlines of the tasks in the list, making sure that the user is able to finish everything on time."},{"lineNumber":633,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":634,"author":{"gitId":"wish2023"},"content":"### User Stories"},{"lineNumber":635,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":636,"author":{"gitId":"wish2023"},"content":"| Version | As a ...          | I want to ...                                  | So that I ...                                     |"},{"lineNumber":637,"author":{"gitId":"wish2023"},"content":"| ------- | ----------------- | ---------------------------------------------- | ------------------------------------------------- |"},{"lineNumber":638,"author":{"gitId":"wish2023"},"content":"| `v1.0`  | forgetful student | upload my tasks for the week                   | remember to do them                               |"},{"lineNumber":639,"author":{"gitId":"wish2023"},"content":"| `v1.0`  | student           | mark my tasks as done                          | know that I have done them and can put them aside |"},{"lineNumber":640,"author":{"gitId":"wish2023"},"content":"| `v1.0`  | student           | get reminded to do the tasks that are due soon | will be on time                                   |"},{"lineNumber":641,"author":{"gitId":"wish2023"},"content":"| `v1.0`  | student           | edit the tasks I added                         | update accordingly to small changes               |"},{"lineNumber":642,"author":{"gitId":"wish2023"},"content":"| `v1.0`  | student           | delete the tasks I added                       | remove tasks that are not needed to do anymore    |"},{"lineNumber":643,"author":{"gitId":"wish2023"},"content":"| `v1.0`  | student           | set my tasks according to importance            | complete the more important tasks first           |"},{"lineNumber":644,"author":{"gitId":"wish2023"},"content":"| `v1.0`  | student           | leave some notes for a task                    | remember about it                                 |"},{"lineNumber":645,"author":{"gitId":"wish2023"},"content":"| `v2.0`  | student           | have a planner that tells me what time to rest | don’t exhaust myself                              |"},{"lineNumber":646,"author":{"gitId":"wish2023"},"content":"| `v2.0`  | student           | see an overview of the week ahead              | make sure that I am staying on top of my tasks    |"},{"lineNumber":647,"author":{"gitId":"wish2023"},"content":"| `v2.0`  | student           | view the details of a task                     | can ensure I am on the right track with tasks     |"},{"lineNumber":648,"author":{"gitId":"wish2023"},"content":"| `v2.0`  | busy student      | know what tasks to work on next                | don’t need to spend time planning                 |"},{"lineNumber":649,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":650,"author":{"gitId":"Kafcis"},"content":"### Non-Functional Requirements"},{"lineNumber":651,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":652,"author":{"gitId":"Kafcis"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` installed."},{"lineNumber":653,"author":{"gitId":"Kafcis"},"content":"2.  A user with above average typing speed for regular English text should be able to use the features of ATHENA faster than by using the mouse."},{"lineNumber":654,"author":{"gitId":"Kafcis"},"content":"3.  A user who wants to manually modify the save file can do so by using a text editor or spreadsheet application."},{"lineNumber":655,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":656,"author":{"gitId":"daniellimws"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":657,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":658,"author":{"gitId":"daniellimws"},"content":"## **Other Guides: Documentation, Testing, Dev-ops**"},{"lineNumber":659,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":660,"author":{"gitId":"daniellimws"},"content":"This section contains links to other relevant guides that may be of use."},{"lineNumber":661,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":662,"author":{"gitId":"daniellimws"},"content":"* [Documentation guide](./Documentation.md)"},{"lineNumber":663,"author":{"gitId":"daniellimws"},"content":"* [Testing guide](./Testing.md)"},{"lineNumber":664,"author":{"gitId":"daniellimws"},"content":"* [Dev-ops guide](./DevOps.md)"},{"lineNumber":665,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":666,"author":{"gitId":"wish2023"},"content":"---"},{"lineNumber":667,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":668,"author":{"gitId":"wish2023"},"content":"## **Glossary**"},{"lineNumber":669,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":670,"author":{"gitId":"wish2023"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":671,"author":{"gitId":"wish2023"},"content":"* **Task**: The activity a user intends to schedule. It could be a lecture, a social gathering, etc."},{"lineNumber":672,"author":{"gitId":"wish2023"},"content":"* **Flexible Task**: A task without an explicit time given by the user. ATHENA will allocate or shift the task based on the rest of the timetable."},{"lineNumber":673,"author":{"gitId":"wish2023"},"content":"* **Fixed Task**: A task with an explicit time given by the user. These tasks can be edited freely."},{"lineNumber":674,"author":{"gitId":"wish2023"},"content":"* **Command**: An instruction meant to update the TaskList in a certain way."}],"authorContributionMap":{"alstontham":70,"Kafcis":97,"amanda-chua":275,"-":16,"daniellimws":118,"wish2023":98}},{"path":"docs/Documentation.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"**Setting up and maintaining the project website:**"},{"lineNumber":2,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"* We use GitHub Pages to manage documentation."},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"* The `docs/` folder is used for documentation."},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"* To learn how set it up and maintain the project website, follow the [guide by GitHub on configuring a source for GitHub Pages](https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site#choosing-a-publishing-source)."},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":"**Style guidance:**"},{"lineNumber":9,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":10,"author":{"gitId":"daniellimws"},"content":"* Follow the [**_Google developer documentation style guide_**](https://developers.google.com/style)."},{"lineNumber":11,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":12,"author":{"gitId":"daniellimws"},"content":"* Also relevant is the [_[se-edu/guides] **Markdown coding standard**_](https://se-education.org/guides/conventions/markdown.html)"},{"lineNumber":13,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":14,"author":{"gitId":"daniellimws"},"content":"**Diagrams:**"},{"lineNumber":15,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":16,"author":{"gitId":"daniellimws"},"content":"* See the [_[se-edu/guides] **Using PlantUML**_](https://se-education.org/guides/tutorials/plantUml.html)"},{"lineNumber":17,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":18,"author":{"gitId":"daniellimws"},"content":"**Converting a document to the PDF format:**"},{"lineNumber":19,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":20,"author":{"gitId":"daniellimws"},"content":"* See the guide [_[se-edu/guides] **Saving web documents as PDF files**_](https://se-education.org/guides/tutorials/savingPdf.html)"}],"authorContributionMap":{"daniellimws":20}},{"path":"docs/README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"amanda-chua"},"content":"# ATHENA (Automated Timetable Helper Encourager n\u0027 Assistant)"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"ATHENA aims to help students automate the process of organising their schedule."},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"To start using ATHENA, you can set up ATHENA by entering your desired periods for work and rest. Then, at any time in the week, you can add tasks that need to be completed."},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"ATHENA will figure out the best timetable based on your available time slots."},{"lineNumber":6,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":"ATHENA helps to reduce the amount of time and effort you need to spend planning your time by finding available periods in a day,"},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":"with the goal of reducing dead space in the your schedule."},{"lineNumber":9,"author":{"gitId":"daniellimws"},"content":"Don\u0027t worry, ATHENA will make sure you have enough time to eat, exercise and sleep, while making sure that you can finish all your tasks on time."},{"lineNumber":10,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":11,"author":{"gitId":"daniellimws"},"content":"[Download the latest release](https://github.com/AY2021S1-CS2113T-W12-2/tp/releases)."},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"Useful links:"},{"lineNumber":14,"author":{"gitId":"daniellimws"},"content":"* [GitHub](https://github.com/AY2021S1-CS2113T-W12-2/tp)"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* [User Guide](UserGuide.md)"},{"lineNumber":16,"author":{"gitId":"-"},"content":"* [Developer Guide](DeveloperGuide.md)"},{"lineNumber":17,"author":{"gitId":"-"},"content":"* [About Us](AboutUs.md)"}],"authorContributionMap":{"amanda-chua":3,"-":6,"daniellimws":8}},{"path":"docs/Testing.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"## Running tests"},{"lineNumber":2,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"There are two ways to run tests."},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"* **Method 1: Using IntelliJ JUnit test runner**"},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":"  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":"  * To run a subset of tests, you can right-click on a test package,"},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":"    test class, or a test, for example `parse_unknownCommandWord_returnsHelp` in `athena.ParserTest` and choose `Run ParserTest.parse_unknownCommandWord_returnsHelp`"},{"lineNumber":9,"author":{"gitId":"daniellimws"},"content":"* **Method 2: Using Gradle**"},{"lineNumber":10,"author":{"gitId":"daniellimws"},"content":"  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"},{"lineNumber":11,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":12,"author":{"gitId":"daniellimws"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."},{"lineNumber":13,"author":{"gitId":"daniellimws"},"content":"\u003c/div\u003e"},{"lineNumber":14,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":15,"author":{"gitId":"daniellimws"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":16,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":17,"author":{"gitId":"daniellimws"},"content":"## Types of tests"},{"lineNumber":18,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":19,"author":{"gitId":"daniellimws"},"content":"This project has three types of tests:"},{"lineNumber":20,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":21,"author":{"gitId":"daniellimws"},"content":"1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"daniellimws"},"content":"   e.g. `athena.task.TaskTest`"},{"lineNumber":23,"author":{"gitId":"daniellimws"},"content":"1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"},{"lineNumber":24,"author":{"gitId":"daniellimws"},"content":"   e.g. `athena.commands.AddCommandTest`"},{"lineNumber":25,"author":{"gitId":"daniellimws"},"content":"1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"},{"lineNumber":26,"author":{"gitId":"daniellimws"},"content":"   e.g. \u003cdon\u0027t have this for now\u003e"}],"authorContributionMap":{"daniellimws":26}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"alstontham"},"content":"- [Introduction](#introduction)"},{"lineNumber":4,"author":{"gitId":"alstontham"},"content":"- [Quick Start](#quick-start)"},{"lineNumber":5,"author":{"gitId":"alstontham"},"content":"- [Features](#features)"},{"lineNumber":6,"author":{"gitId":"alstontham"},"content":"    - [View Help](#view-help-help)"},{"lineNumber":7,"author":{"gitId":"alstontham"},"content":"    - [Add a task](#add-a-task-add-or-a)  "},{"lineNumber":8,"author":{"gitId":"alstontham"},"content":"    - [List tasks](#list-tasks-list-or-l)  "},{"lineNumber":9,"author":{"gitId":"alstontham"},"content":"    - [Edit task](#edit-task-edit-or-e)  "},{"lineNumber":10,"author":{"gitId":"alstontham"},"content":"    - [Mark task as done](#mark-task-as-done-done-or-dn)  "},{"lineNumber":11,"author":{"gitId":"alstontham"},"content":"    - [Delete task](#delete-task-delete-or-dl)"},{"lineNumber":12,"author":{"gitId":"alstontham"},"content":"    - [View task](#view-task-view-or-v)"},{"lineNumber":13,"author":{"gitId":"alstontham"},"content":"    - [Exit](#exit-program-exit-or-ex)"},{"lineNumber":14,"author":{"gitId":"alstontham"},"content":"    - [Saving the data](#saving-the-data)"},{"lineNumber":15,"author":{"gitId":"alstontham"},"content":"- [FAQ](#faq)    "},{"lineNumber":16,"author":{"gitId":"alstontham"},"content":"- [Command Summary](#command-summary)  "},{"lineNumber":17,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"## Introduction"},{"lineNumber":19,"author":{"gitId":"alstontham"},"content":"Welcome and thank you for choosing ATHENA! ATHENA is your Automated Timetable Helper Encourager n\u0027 Assistant and is a desktop daily life planner optimized for use via a Command Line Interface (CLI)."},{"lineNumber":20,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":21,"author":{"gitId":"alstontham"},"content":"ATHENA uses algorithmic optimisation to give you the best timetable that allows you to make the most of your time. With ATHENA, you can save time on planning your timetable and be more efficient with your time."},{"lineNumber":22,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":23,"author":{"gitId":"alstontham"},"content":"You can take a look at the table of contents above if you are looking for a specific command, or you can begin by looking at the **[Quick Start](#quick-start)** section below."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"alstontham"},"content":"We hope you enjoy using ATHENA and start being more productive today!"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Quick Start"},{"lineNumber":28,"author":{"gitId":"alstontham"},"content":"1. Ensure that you have **Java 11** or above installed."},{"lineNumber":29,"author":{"gitId":"alstontham"},"content":"2. Download the latest version of **ATHENA** [here](https://github.com/AY2021S1-CS2113T-W12-2/tp/releases)."},{"lineNumber":30,"author":{"gitId":"alstontham"},"content":"3. Copy the downloaded Athena.jar into your **Desktop**."},{"lineNumber":31,"author":{"gitId":"alstontham"},"content":"4. Open the terminal/command prompt and enter `cd Desktop`."},{"lineNumber":32,"author":{"gitId":"alstontham"},"content":"5. Then, enter `java -jar Athena.jar`."},{"lineNumber":33,"author":{"gitId":"alstontham"},"content":"6. A welcome message as seen below will be shown:"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"daniellimws"},"content":"![welcome-message](screenshots/welcome-message.png)"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"alstontham"},"content":"If you are new to the command line and require a guide: "},{"lineNumber":38,"author":{"gitId":"alstontham"},"content":"* Click [here](https://www.minitool.com/lib/cmd.html) if you use Windows"},{"lineNumber":39,"author":{"gitId":"alstontham"},"content":"* Click [here](https://flaviocopes.com/cli-for-beginners/) if you use Mac"},{"lineNumber":40,"author":{"gitId":"amanda-chua"},"content":" "},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":43,"author":{"gitId":"alstontham"},"content":"Notes about the command format:"},{"lineNumber":44,"author":{"gitId":"daniellimws"},"content":"* Words in UPPER_CASE are the parameters that you need to supply to ATHENA."},{"lineNumber":45,"author":{"gitId":"daniellimws"},"content":"e.g. To add a task using `add n/NAME`, you need to provide the NAME parameter, for example: `add n/Assignment1`."},{"lineNumber":46,"author":{"gitId":"daniellimws"},"content":"* Parameters can be entered in any order."},{"lineNumber":47,"author":{"gitId":"daniellimws"},"content":"e.g. If the command format is `add n/NAME t/TIME`, both `add n/Assignment1 t/1800` and `add t/1800 n/Assignment1` are acceptable."},{"lineNumber":48,"author":{"gitId":"daniellimws"},"content":"* Any unsupported parameter type for a command that is entered will be ignored."},{"lineNumber":49,"author":{"gitId":"daniellimws"},"content":"e.g. `list` accepts 2 parameters, `i/IMPORTANCE` and `f/FORECAST`. If you enter `list i/HIGH p/PARAMETER`, since `list` does not support `/p`, `p/PARAMETER` is ignored."},{"lineNumber":50,"author":{"gitId":"daniellimws"},"content":"* If you type in more than 1 parameter descriptions for a particular parameter type, only the first description will be taken."},{"lineNumber":51,"author":{"gitId":"daniellimws"},"content":"e.g. If you enter `add n/NAME1 n/NAME2`, only `NAME1` will be recorded as the newly added task\u0027s name."},{"lineNumber":52,"author":{"gitId":"alstontham"},"content":"* Items in square brackets are optional. e.g in `n/NAME  [d/DURATION]`, the parameters can be provided as `n/Task1 d/1` or as `n/Task1`."},{"lineNumber":53,"author":{"gitId":"daniellimws"},"content":"(Refer to the **Intermediate Usage** section of each command for more information)"},{"lineNumber":54,"author":{"gitId":"daniellimws"},"content":"* For some commands, if no parameters are specified, the command will be executed using the default values for each parameter."},{"lineNumber":55,"author":{"gitId":"alstontham"},"content":"* For dates, the program follows the **DD-MM-YYYY** format."},{"lineNumber":56,"author":{"gitId":"alstontham"},"content":"* For time, the program follows the **HHMM** format."},{"lineNumber":57,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":58,"author":{"gitId":"alstontham"},"content":"### View Help: `help`"},{"lineNumber":59,"author":{"gitId":"alstontham"},"content":"Prints out a message on how to use ATHENA."},{"lineNumber":60,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":61,"author":{"gitId":"alstontham"},"content":"#### Format: `help`"},{"lineNumber":62,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":63,"author":{"gitId":"alstontham"},"content":"#### Expected output"},{"lineNumber":64,"author":{"gitId":"daniellimws"},"content":"![help-command](screenshots/help.png)"},{"lineNumber":65,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":66,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":67,"author":{"gitId":"amanda-chua"},"content":"### Add a task: `add` or `a`"},{"lineNumber":68,"author":{"gitId":"amanda-chua"},"content":"This command adds a task to the timetable."},{"lineNumber":69,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":70,"author":{"gitId":"amanda-chua"},"content":"The guide for this command is split into three sections:"},{"lineNumber":71,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":72,"author":{"gitId":"amanda-chua"},"content":"* [Basic Usage (add)](#basic-usage-add) (For users new to command line applications)"},{"lineNumber":73,"author":{"gitId":"amanda-chua"},"content":"* [Intermediate Usage (add)](#intermediate-usage-add) (For users comfortable with command line applications)"},{"lineNumber":74,"author":{"gitId":"amanda-chua"},"content":"* [Advanced Usage (add)](#advanced-usage-add) (Extension of *Intermediate Usage (add)*)"},{"lineNumber":75,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":76,"author":{"gitId":"amanda-chua"},"content":"#### Basic Usage (add)"},{"lineNumber":77,"author":{"gitId":"amanda-chua"},"content":"In this section, for easier understanding, the `add` command will make use of all parameters."},{"lineNumber":78,"author":{"gitId":"amanda-chua"},"content":"Users new to command line applications should find it easy to use as long as they follow the descriptions in the sections below. "},{"lineNumber":79,"author":{"gitId":"amanda-chua"},"content":"Users who are comfortable with the basic usage may move on to the [Intermediate](#intermediate-usage-add) and [Advanced](#advanced-usage-add) stages to experience how ATHENA was intended to be used."},{"lineNumber":80,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":81,"author":{"gitId":"amanda-chua"},"content":"##### Command Format"},{"lineNumber":82,"author":{"gitId":"amanda-chua"},"content":"`add n/NAME t/TIME d/DURATION D/DEADLINE r/RECURRENCE i/IMPORTANCE a/ADDITIONAL-NOTES`"},{"lineNumber":83,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":84,"author":{"gitId":"amanda-chua"},"content":"##### Parameters"},{"lineNumber":85,"author":{"gitId":"amanda-chua"},"content":"The `add` command accepts 7 parameters."},{"lineNumber":86,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":87,"author":{"gitId":"amanda-chua"},"content":"* `NAME` is the name of the task."},{"lineNumber":88,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":89,"author":{"gitId":"amanda-chua"},"content":"* `TIME` is the time to start doing this task (**HHMM**). For example, 1100."},{"lineNumber":90,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":91,"author":{"gitId":"amanda-chua"},"content":"* `DURATION` is the expected time taken to complete task (in hours). For example, 2."},{"lineNumber":92,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":93,"author":{"gitId":"daniellimws"},"content":"* `DEADLINE`  is the date that you wish to complete the task by. It is not taken into consideration by ATHENA when allocating tasks. Format: **DD-MM-YYYY**. For example, 16-11-2020."},{"lineNumber":94,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":95,"author":{"gitId":"amanda-chua"},"content":"* `RECURRENCE` is one of **TODAY**, **MONDAY**, **TUESDAY**, **WEDNESDAY**, **THURSDAY**, **FRIDAY**, **SATURDAY**, **SUNDAY** or a specific date (**DD-MM-YYYY**)."},{"lineNumber":96,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":97,"author":{"gitId":"daniellimws"},"content":"   This is where you can input a specific date to do the task on."},{"lineNumber":98,"author":{"gitId":"amanda-chua"},"content":"   If the input provided is not **TODAY** or a specific date (**DD-MM-YYYY**), the program will treat the task as occuring every week. For example, **MONDAY** means the task happens every Monday."},{"lineNumber":99,"author":{"gitId":"amanda-chua"},"content":"   "},{"lineNumber":100,"author":{"gitId":"amanda-chua"},"content":"* `IMPORTANCE` is one of **HIGH**, **MEDIUM**, **LOW**."},{"lineNumber":101,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":102,"author":{"gitId":"amanda-chua"},"content":"* `ADDITIONAL-NOTES` are the additional notes of the task."},{"lineNumber":103,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":104,"author":{"gitId":"amanda-chua"},"content":"##### Example Usage"},{"lineNumber":105,"author":{"gitId":"amanda-chua"},"content":"The following shows the output from ATHENA after entering `add n/Assignment1 t/1100 D/16-11-2020 d/2 r/Today i/high a/Refer to lecture notes`."},{"lineNumber":106,"author":{"gitId":"amanda-chua"},"content":"You should expect to see a message which confirms that the task has been added."},{"lineNumber":107,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":108,"author":{"gitId":"daniellimws"},"content":"![add-command-basic](screenshots/add-basic.png)"},{"lineNumber":109,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":110,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":111,"author":{"gitId":"amanda-chua"},"content":"#### Intermediate Usage (add)"},{"lineNumber":112,"author":{"gitId":"amanda-chua"},"content":"In this section, square brackets around parameters indicate that they optional. e.g `n/NAME  [d/DURATION]` can be used as `n/Task1 d/1` or as `n/Task1`."},{"lineNumber":113,"author":{"gitId":"amanda-chua"},"content":"Users comfortable with command line applications can proceed with the Intermediate usage as detailed in the sections below and can operate ATHENA as it was intended to be used."},{"lineNumber":114,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":115,"author":{"gitId":"amanda-chua"},"content":"##### Command Format"},{"lineNumber":116,"author":{"gitId":"amanda-chua"},"content":"`add n/NAME [t/TIME] [d/DURATION] [D/DEADLINE] [r/RECURRENCE] [i/IMPORTANCE] [a/ADDITIONAL-NOTES]`"},{"lineNumber":117,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":118,"author":{"gitId":"amanda-chua"},"content":"##### Parameters"},{"lineNumber":119,"author":{"gitId":"amanda-chua"},"content":"The `add` command accepts 7 parameters:"},{"lineNumber":120,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":121,"author":{"gitId":"daniellimws"},"content":"* `NAME` is the name of the task. It is a compulsory parameter you have to include."},{"lineNumber":122,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":123,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":124,"author":{"gitId":"amanda-chua"},"content":"* `TIME` is the time to start doing this task (**HHMM**). For example, 1100."},{"lineNumber":125,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":126,"author":{"gitId":"amanda-chua"},"content":"   Default: Allocated by Athena (only available for non-recurring tasks)"},{"lineNumber":127,"author":{"gitId":"amanda-chua"},"content":"   "},{"lineNumber":128,"author":{"gitId":"daniellimws"},"content":"   \u003e ❗️ **This parameter is optional only if the task is non-recurring. Otherwise, you must specify a start time"},{"lineNumber":129,"author":{"gitId":"daniellimws"},"content":"    for the task.**"},{"lineNumber":130,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":131,"author":{"gitId":"amanda-chua"},"content":"The following parameters are optional. If they are left empty, ATHENA will use the default value assigned."},{"lineNumber":132,"author":{"gitId":"amanda-chua"},"content":"* `DURATION` is the expected time taken to complete task (in hours). For example, 2."},{"lineNumber":133,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":134,"author":{"gitId":"amanda-chua"},"content":"   Default: 1 hour."},{"lineNumber":135,"author":{"gitId":"daniellimws"},"content":"* `DEADLINE` is the date that you wish to complete the task by. It is not taken into consideration by ATHENA when allocating tasks. Format: **DD-MM-YYYY**. For example, 16-11-2020."},{"lineNumber":136,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":137,"author":{"gitId":"amanda-chua"},"content":"   Default: No deadline."},{"lineNumber":138,"author":{"gitId":"amanda-chua"},"content":"* `RECURRENCE` is one of **TODAY**, **MONDAY**, **TUESDAY**, **WEDNESDAY**, **THURSDAY**, **FRIDAY**, **SATURDAY**, **SUNDAY** or a specific date (**DD-MM-YYYY**)."},{"lineNumber":139,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":140,"author":{"gitId":"daniellimws"},"content":"   This is where you can input a specific date to do the task on. "},{"lineNumber":141,"author":{"gitId":"amanda-chua"},"content":"   If the input provided is not **TODAY** or a specific date (**DD-MM-YYYY**), the program will treat the task as occurring every week. For example, **MONDAY** means the task happens every Monday."},{"lineNumber":142,"author":{"gitId":"amanda-chua"},"content":"   "},{"lineNumber":143,"author":{"gitId":"amanda-chua"},"content":"   Default: **TODAY**."},{"lineNumber":144,"author":{"gitId":"amanda-chua"},"content":"* `IMPORTANCE` is one of **HIGH**, **MEDIUM**, **LOW**."},{"lineNumber":145,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":146,"author":{"gitId":"amanda-chua"},"content":"   Default: **MEDIUM**."},{"lineNumber":147,"author":{"gitId":"amanda-chua"},"content":"* `ADDITIONAL-NOTES` are the additional notes of the task."},{"lineNumber":148,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":149,"author":{"gitId":"amanda-chua"},"content":"   Default: No notes."},{"lineNumber":150,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":151,"author":{"gitId":"amanda-chua"},"content":"##### Example Usage"},{"lineNumber":152,"author":{"gitId":"amanda-chua"},"content":"The screenshot below shows the output from ATHENA after entering `add n/Assignment2 t/1400 i/high`."},{"lineNumber":153,"author":{"gitId":"amanda-chua"},"content":"You should expect to see a message to confirm that the task has been added, with some of the parameters having their default value assigned."},{"lineNumber":154,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":155,"author":{"gitId":"daniellimws"},"content":"![add-command-intermediate](screenshots/add-intermediate.png)"},{"lineNumber":156,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":157,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":158,"author":{"gitId":"amanda-chua"},"content":"#### Advanced Usage (add)"},{"lineNumber":159,"author":{"gitId":"amanda-chua"},"content":"This section is an extension of the [Intermediate Usage (add)](#intermediate-usage-add) section."},{"lineNumber":160,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":161,"author":{"gitId":"amanda-chua"},"content":"The `add` command supports shortcuts catered for advanced users."},{"lineNumber":162,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":163,"author":{"gitId":"amanda-chua"},"content":"##### Supported Shortcuts"},{"lineNumber":164,"author":{"gitId":"amanda-chua"},"content":"The command on the left in the table below is the shortcut of the corresponding command on the right."},{"lineNumber":165,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":166,"author":{"gitId":"amanda-chua"},"content":"| Shortcut | Expanded command |"},{"lineNumber":167,"author":{"gitId":"amanda-chua"},"content":"|----------|------------------|"},{"lineNumber":168,"author":{"gitId":"amanda-chua"},"content":"| `a`     | `add`  |"},{"lineNumber":169,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":170,"author":{"gitId":"amanda-chua"},"content":"##### Example usage"},{"lineNumber":171,"author":{"gitId":"amanda-chua"},"content":"You can just type `a` instead of `add`."},{"lineNumber":172,"author":{"gitId":"amanda-chua"},"content":"The screenshot below shows the output from ATHENA after entering `a n/Assignment3 t/1900 D/16-11-2020 d/2 a/Refer to notes`."},{"lineNumber":173,"author":{"gitId":"amanda-chua"},"content":"You should expect to see a message to confirm that the task is added with some of the parameter\u0027s default value assigned."},{"lineNumber":174,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":175,"author":{"gitId":"daniellimws"},"content":"![add-command-advanced](screenshots/add-advanced.png)"},{"lineNumber":176,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":177,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":178,"author":{"gitId":"amanda-chua"},"content":"### List tasks: `list` or `l`"},{"lineNumber":179,"author":{"gitId":"daniellimws"},"content":"This command shows your tasks organized nicely in a timetable."},{"lineNumber":180,"author":{"gitId":"daniellimws"},"content":"Each task will be printed with a number (the task ID) that is used as an identifier for other commands (e.g. `edit`, `done`, `delete`), as shown in the screenshot below."},{"lineNumber":181,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":182,"author":{"gitId":"daniellimws"},"content":"![list](screenshots/list.png)"},{"lineNumber":183,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":184,"author":{"gitId":"daniellimws"},"content":"\u003e 💡 **If the timetable is too big to fit in the screen, consider using a smaller font size in your terminal/command prompt, or stretch your window to full width. If you\u0027re unsure how to adjust font size, check out [this link](https://www.isunshare.com/windows-10/change-font-and-font-size-in-windows-10-command-prompt.html) for Windows users and [this link](https://osxdaily.com/2015/01/11/increase-text-size-terminal-app-mac-keystrokes/) for Mac users.** "},{"lineNumber":185,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":186,"author":{"gitId":"daniellimws"},"content":"The guide for this command is split into three sections:"},{"lineNumber":187,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":188,"author":{"gitId":"daniellimws"},"content":"* [Basic Usage (list)](#basic-usage-list) (For users new to command line applications)"},{"lineNumber":189,"author":{"gitId":"daniellimws"},"content":"* [Intermediate Usage (list)](#intermediate-usage-list) (For users comfortable with command line applications)"},{"lineNumber":190,"author":{"gitId":"daniellimws"},"content":"* [Advanced Usage (list)](#advanced-usage-list) (Extension of *Intermediate Usage*)"},{"lineNumber":191,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":192,"author":{"gitId":"daniellimws"},"content":"#### Basic Usage (list)"},{"lineNumber":193,"author":{"gitId":"daniellimws"},"content":"In this section, for easier understanding, the `list` command will make use of all parameters."},{"lineNumber":194,"author":{"gitId":"daniellimws"},"content":"Users new to command line applications should find it easy to use as long as they follow the descriptions in the sections below. "},{"lineNumber":195,"author":{"gitId":"daniellimws"},"content":"Users who are comfortable with the basic usage may move on to the [Intermediate](#intermediate-usage-list) and [Advanced](#advanced-usage-list) stages to experience how ATHENA was intended to be used."},{"lineNumber":196,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":197,"author":{"gitId":"daniellimws"},"content":"The `list` command accepts 2 parameters."},{"lineNumber":198,"author":{"gitId":"daniellimws"},"content":"You can indicate in your command to filter your tasks based on"},{"lineNumber":199,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":200,"author":{"gitId":"daniellimws"},"content":"* the range of days you want to see"},{"lineNumber":201,"author":{"gitId":"daniellimws"},"content":"* the importance of the tasks"},{"lineNumber":202,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":203,"author":{"gitId":"daniellimws"},"content":"##### Command Format"},{"lineNumber":204,"author":{"gitId":"daniellimws"},"content":"`list f/FORECAST i/IMPORTANCE`"},{"lineNumber":205,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":206,"author":{"gitId":"daniellimws"},"content":"* `FORECAST`: **DAY** to show the tasks occurring today, **WEEK** to show the tasks occurring in the week ahead, and **ALL** to show all your upcoming tasks."},{"lineNumber":207,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":208,"author":{"gitId":"daniellimws"},"content":"* `IMPORTANCE`: One of **HIGH**, **MEDIUM**, **LOW**, or  **ALL**."},{"lineNumber":209,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":210,"author":{"gitId":"daniellimws"},"content":"##### Example Usage"},{"lineNumber":211,"author":{"gitId":"daniellimws"},"content":"The following shows the output from ATHENA after entering `list f/Week i/High`."},{"lineNumber":212,"author":{"gitId":"daniellimws"},"content":"You should expect to see all **high importance tasks** occuring **in the week ahead**, as shown in the screenshot below."},{"lineNumber":213,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":214,"author":{"gitId":"daniellimws"},"content":"![list-week-high](screenshots/list-basic.png)"},{"lineNumber":215,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":216,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":217,"author":{"gitId":"amanda-chua"},"content":"#### Intermediate Usage (list)"},{"lineNumber":218,"author":{"gitId":"daniellimws"},"content":"The `list` command accepts 2 parameters."},{"lineNumber":219,"author":{"gitId":"daniellimws"},"content":"You can tell the command to filter your tasks based on"},{"lineNumber":220,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":221,"author":{"gitId":"daniellimws"},"content":"* the range of days you want to see"},{"lineNumber":222,"author":{"gitId":"daniellimws"},"content":"* the importance of the tasks"},{"lineNumber":223,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":224,"author":{"gitId":"daniellimws"},"content":"In this section, the two parameters listed above are optional. If they are left empty, ATHENA will use the default value assigned."},{"lineNumber":225,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":226,"author":{"gitId":"daniellimws"},"content":"##### Command Format"},{"lineNumber":227,"author":{"gitId":"daniellimws"},"content":"`list [f/FORECAST] [i/IMPORTANCE]`"},{"lineNumber":228,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":229,"author":{"gitId":"daniellimws"},"content":"* `FORECAST`: **DAY** to show the tasks occurring today, **WEEK** to show the tasks occurring in the week ahead, and **ALL** to show all your upcoming tasks."},{"lineNumber":230,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":231,"author":{"gitId":"daniellimws"},"content":"  Default: **WEEK**."},{"lineNumber":232,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":233,"author":{"gitId":"daniellimws"},"content":"* `IMPORTANCE`: One of **HIGH**, **MEDIUM**, **LOW**, **ALL**."},{"lineNumber":234,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":235,"author":{"gitId":"daniellimws"},"content":"  Default: **ALL**."},{"lineNumber":236,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":237,"author":{"gitId":"daniellimws"},"content":"##### Example Usage"},{"lineNumber":238,"author":{"gitId":"daniellimws"},"content":"The following shows the output from ATHENA after entering `list f/Week i/High`."},{"lineNumber":239,"author":{"gitId":"daniellimws"},"content":"You should expect to see all **high importance tasks** occuring **in the week ahead**."},{"lineNumber":240,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":241,"author":{"gitId":"daniellimws"},"content":"![list-week-high](screenshots/list-basic.png)"},{"lineNumber":242,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":243,"author":{"gitId":"daniellimws"},"content":"Alternatively, you can let ATHENA use the default values for the parameters."},{"lineNumber":244,"author":{"gitId":"daniellimws"},"content":"For example, entering `list i/Low` will show all **low importance** tasks occuring **in the week ahead**, as shown in the screenshot below."},{"lineNumber":245,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":246,"author":{"gitId":"daniellimws"},"content":"![list-low](screenshots/list-intermediate.png)"},{"lineNumber":247,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":248,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":249,"author":{"gitId":"amanda-chua"},"content":"#### Advanced Usage (list)"},{"lineNumber":250,"author":{"gitId":"daniellimws"},"content":"This section is an extension to the [Intermediate Usage (list)](#intermediate-usage-list) section."},{"lineNumber":251,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":252,"author":{"gitId":"daniellimws"},"content":"The `list` command supports shortcuts catered for advanced users."},{"lineNumber":253,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":254,"author":{"gitId":"daniellimws"},"content":"##### Supported Shortcuts"},{"lineNumber":255,"author":{"gitId":"daniellimws"},"content":"The commands on the left in the table below are the shortcuts of the corresponding commands on the right."},{"lineNumber":256,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":257,"author":{"gitId":"daniellimws"},"content":"| Shortcut | Expanded command |"},{"lineNumber":258,"author":{"gitId":"daniellimws"},"content":"|----------|------------------|"},{"lineNumber":259,"author":{"gitId":"daniellimws"},"content":"| `l3`     | `list i/HIGH`    |"},{"lineNumber":260,"author":{"gitId":"daniellimws"},"content":"| `l2`     | `list i/MEDIUM`  |"},{"lineNumber":261,"author":{"gitId":"daniellimws"},"content":"| `l1`     | `list i/LOW`     |"},{"lineNumber":262,"author":{"gitId":"daniellimws"},"content":"| `lw`     | `list f/WEEK`    |"},{"lineNumber":263,"author":{"gitId":"daniellimws"},"content":"| `ld`     | `list f/DAY`     |"},{"lineNumber":264,"author":{"gitId":"daniellimws"},"content":"| `la`     | `list f/ALL`     |"},{"lineNumber":265,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":266,"author":{"gitId":"daniellimws"},"content":"##### Example usage"},{"lineNumber":267,"author":{"gitId":"daniellimws"},"content":"The following are all valid commands."},{"lineNumber":268,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":269,"author":{"gitId":"daniellimws"},"content":"* `l`"},{"lineNumber":270,"author":{"gitId":"daniellimws"},"content":"* `ld`"},{"lineNumber":271,"author":{"gitId":"daniellimws"},"content":"* `list f/WEEK i/medium`"},{"lineNumber":272,"author":{"gitId":"daniellimws"},"content":"* `l2 f/WEEK`"},{"lineNumber":273,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":274,"author":{"gitId":"daniellimws"},"content":"You can enter `l2 f/DAY` to list **medium importance** tasks occuring **today**, as shown in the screenshot below."},{"lineNumber":275,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":276,"author":{"gitId":"daniellimws"},"content":"![l2-day](screenshots/list-advanced.png)"},{"lineNumber":277,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":278,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":279,"author":{"gitId":"amanda-chua"},"content":"### Edit task: `edit` or `e`"},{"lineNumber":280,"author":{"gitId":"amanda-chua"},"content":"This command edits a specific task in the timetable."},{"lineNumber":281,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":282,"author":{"gitId":"amanda-chua"},"content":"The guide for this command is split into two sections:"},{"lineNumber":283,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":284,"author":{"gitId":"amanda-chua"},"content":"* [Basic Usage (edit)](#basic-usage-edit) (For users new to command line applications)"},{"lineNumber":285,"author":{"gitId":"amanda-chua"},"content":"* [Intermediate Usage (edit)](#intermediate-usage-edit) (For users comfortable with command line applications)"},{"lineNumber":286,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":287,"author":{"gitId":"daniellimws"},"content":"\u003e ❗️ **Keep in mind that you cannot edit the details of a task if the date of the task has passed. For example, if a"},{"lineNumber":288,"author":{"gitId":"daniellimws"},"content":" task has occurred yesterday, you cannot edit the details of that task.**"},{"lineNumber":289,"author":{"gitId":"-"},"content":""},{"lineNumber":290,"author":{"gitId":"amanda-chua"},"content":"#### Basic Usage (edit)"},{"lineNumber":291,"author":{"gitId":"amanda-chua"},"content":"In this section, users new to command line applications should find it easy to use as long as they follow the descriptions in the sections below."},{"lineNumber":292,"author":{"gitId":"amanda-chua"},"content":"Square brackets around parameters indicate that they are optional. e.g `TASK-ID [n/NAME] [d/DURATION]` can be used as `1 n/Task1 d/1` or as `1 n/Task1`."},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"amanda-chua"},"content":"##### Command Format"},{"lineNumber":295,"author":{"gitId":"amanda-chua"},"content":"`edit TASK-ID [n/NAME] [t/TIME] [d/DURATION] [D/DEADLINE] [r/RECURRENCE] [i/IMPORTANCE] [a/ADDITIONAL-NOTES]`"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"amanda-chua"},"content":"##### Parameters"},{"lineNumber":298,"author":{"gitId":"amanda-chua"},"content":"The `edit` command accepts 8 parameters:"},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"daniellimws"},"content":"* `TASK-ID` refers to the number shown beside the task that you want to edit in the displayed task list. It must be a non-negative integer."},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"amanda-chua"},"content":"At least one parameter shown below has to be included in the command execution:"},{"lineNumber":303,"author":{"gitId":"amanda-chua"},"content":"* `NAME` is the name of the task."},{"lineNumber":304,"author":{"gitId":"-"},"content":""},{"lineNumber":305,"author":{"gitId":"amanda-chua"},"content":"* `TIME` is the time to start doing this task (**HHMM**). For example, 1100."},{"lineNumber":306,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":307,"author":{"gitId":"daniellimws"},"content":"\u003e ❗️ **Keep in mind that you cannot edit the time of a task if the task was initially added without a specified time.**"},{"lineNumber":308,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":309,"author":{"gitId":"amanda-chua"},"content":"* `DURATION` is the expected time taken to complete task (in hours). For example, 2."},{"lineNumber":310,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":311,"author":{"gitId":"daniellimws"},"content":"* `DEADLINE` is the date that you wish to complete the task by. It is not taken into consideration by ATHENA when allocating tasks. Format: **DD-MM-YYYY**. For example, 16-11-2020."},{"lineNumber":312,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":313,"author":{"gitId":"amanda-chua"},"content":"* `RECURRENCE` is one of **TODAY**, **MONDAY**, **TUESDAY**, **WEDNESDAY**, **THURSDAY**, **FRIDAY**, **SATURDAY**, **SUNDAY** or a specific date (**DD-MM-YYYY**)."},{"lineNumber":314,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":315,"author":{"gitId":"amanda-chua"},"content":"* `IMPORTANCE` is one of **HIGH**, **MEDIUM**, **LOW**."},{"lineNumber":316,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":317,"author":{"gitId":"amanda-chua"},"content":"* `ADDITIONAL-NOTES` are the additional notes of the task."},{"lineNumber":318,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":319,"author":{"gitId":"amanda-chua"},"content":"##### Example Usage"},{"lineNumber":320,"author":{"gitId":"amanda-chua"},"content":"Firstly, use the [list command](#list-tasks-list-or-l) to view the `TASK-ID` of the task to be edited."},{"lineNumber":321,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":322,"author":{"gitId":"amanda-chua"},"content":"The screenshot below shows the output from ATHENA after entering `edit 1 t/1800`."},{"lineNumber":323,"author":{"gitId":"amanda-chua"},"content":"You should expect to see a message to confirm that the time of task with `TASK-ID` \u00271\u0027 is edited."},{"lineNumber":324,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":325,"author":{"gitId":"daniellimws"},"content":"![edit-command-basic](screenshots/edit-basic.jpg)"},{"lineNumber":326,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":327,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":328,"author":{"gitId":"amanda-chua"},"content":"#### Intermediate Usage (edit)"},{"lineNumber":329,"author":{"gitId":"amanda-chua"},"content":"The `edit` command supports shortcuts for intermediate users."},{"lineNumber":330,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":331,"author":{"gitId":"amanda-chua"},"content":"##### Supported Shortcuts"},{"lineNumber":332,"author":{"gitId":"amanda-chua"},"content":"The command on the left in the table below is the shortcut of the corresponding command on the right."},{"lineNumber":333,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":334,"author":{"gitId":"amanda-chua"},"content":"| Shortcut | Expanded command |"},{"lineNumber":335,"author":{"gitId":"amanda-chua"},"content":"|----------|------------------|"},{"lineNumber":336,"author":{"gitId":"amanda-chua"},"content":"| `e`     | `edit`  |"},{"lineNumber":337,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":338,"author":{"gitId":"amanda-chua"},"content":"##### Example usage"},{"lineNumber":339,"author":{"gitId":"amanda-chua"},"content":"Firstly, use the [list command](#list-tasks-list-or-l) to get the `TASK-ID` of the task to be edited."},{"lineNumber":340,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":341,"author":{"gitId":"daniellimws"},"content":"You can just type `e` instead of `edit`."},{"lineNumber":342,"author":{"gitId":"amanda-chua"},"content":"The screenshot below shows the output from ATHENA after entering `e 1 n/Assignment2 t/1800 D/17-11-2020 d/1 r/today i/high a/Refer to lecture notes`."},{"lineNumber":343,"author":{"gitId":"amanda-chua"},"content":"You should expect to see a message to confirm that the time of task with `TASK-ID` \u00271\u0027 is edited."},{"lineNumber":344,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":345,"author":{"gitId":"daniellimws"},"content":"![edit-command-intermediate](screenshots/edit-intermediate.jpg)"},{"lineNumber":346,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":347,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":348,"author":{"gitId":"daniellimws"},"content":"### Mark task as done: `done` or `dn`"},{"lineNumber":349,"author":{"gitId":"daniellimws"},"content":"This command marks the specified task from the timetable as done."},{"lineNumber":350,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":351,"author":{"gitId":"daniellimws"},"content":"The guide for this command is split into two sections:"},{"lineNumber":352,"author":{"gitId":"daniellimws"},"content":"* [Basic Usage (done)](#basic-usage-done) (For users new to command line applications)"},{"lineNumber":353,"author":{"gitId":"daniellimws"},"content":"* [Intermediate Usage (done)](#intermediate-usage-done) (For users comfortable with command line applications)"},{"lineNumber":354,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":355,"author":{"gitId":"daniellimws"},"content":"#### Basic Usage (done)"},{"lineNumber":356,"author":{"gitId":"daniellimws"},"content":"In this section, users new to command line applications should find it easy to use as long as they follow the descriptions in the sections below. "},{"lineNumber":357,"author":{"gitId":"daniellimws"},"content":"Users who are comfortable with the basic usage may move on to the [Intermediate](#intermediate-usage-done) stage to experience how ATHENA was intended to be used."},{"lineNumber":358,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":359,"author":{"gitId":"daniellimws"},"content":"##### Command Format"},{"lineNumber":360,"author":{"gitId":"daniellimws"},"content":"`done TASK-ID`"},{"lineNumber":361,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":362,"author":{"gitId":"daniellimws"},"content":"##### Parameters"},{"lineNumber":363,"author":{"gitId":"wish2023"},"content":"The `done` command requires 1 parameter only."},{"lineNumber":364,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":365,"author":{"gitId":"daniellimws"},"content":"* `TASK-ID` refers to the number shown beside the task that you want to mark as done in the displayed task list. It must be a non-negative integer."},{"lineNumber":366,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":367,"author":{"gitId":"daniellimws"},"content":"##### Example Usage"},{"lineNumber":368,"author":{"gitId":"daniellimws"},"content":"Firstly, use the [list command](#list-tasks-list-or-l) to get the `TASK-ID` of the task that you want to mark as done."},{"lineNumber":369,"author":{"gitId":"daniellimws"},"content":"The screenshot below shows the output from ATHENA after entering `done 0`."},{"lineNumber":370,"author":{"gitId":"daniellimws"},"content":"You should expect to see a message to confirm that the task with `TASK-ID` of `0` is marked as done. "},{"lineNumber":371,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":372,"author":{"gitId":"daniellimws"},"content":"![done](screenshots/done-basic.png)"},{"lineNumber":373,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":374,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":375,"author":{"gitId":"daniellimws"},"content":"#### Intermediate Usage (done)"},{"lineNumber":376,"author":{"gitId":"daniellimws"},"content":"The `done` command supports shortcuts for intermediate users."},{"lineNumber":377,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":378,"author":{"gitId":"daniellimws"},"content":"##### Supported Shortcuts"},{"lineNumber":379,"author":{"gitId":"daniellimws"},"content":"The command on the left in the table below is the shortcut of the corresponding command on the right."},{"lineNumber":380,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":381,"author":{"gitId":"daniellimws"},"content":"| Shortcut | Expanded command |"},{"lineNumber":382,"author":{"gitId":"daniellimws"},"content":"|----------|------------------|"},{"lineNumber":383,"author":{"gitId":"daniellimws"},"content":"| `dn`     | `done`  |"},{"lineNumber":384,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":385,"author":{"gitId":"daniellimws"},"content":"##### Example usage"},{"lineNumber":386,"author":{"gitId":"daniellimws"},"content":"Firstly, use the [list command](#list-tasks-list-or-l) to get the `TASK-ID` of the task to be marked as done."},{"lineNumber":387,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":388,"author":{"gitId":"daniellimws"},"content":"You can just type `dn` instead of `done`."},{"lineNumber":389,"author":{"gitId":"daniellimws"},"content":"The screenshot below shows the output from ATHENA after entering `dn 1`."},{"lineNumber":390,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":391,"author":{"gitId":"daniellimws"},"content":"![dn](screenshots/done-intermediate.png)"},{"lineNumber":392,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":393,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":394,"author":{"gitId":"wish2023"},"content":"### Delete task: `delete` or `dl`"},{"lineNumber":395,"author":{"gitId":"wish2023"},"content":"This command deletes the specified task from the timetable. ATHENA will ensure to leave the index of other tasks untouched."},{"lineNumber":396,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":397,"author":{"gitId":"wish2023"},"content":"The guide for this command is split into two sections:"},{"lineNumber":398,"author":{"gitId":"wish2023"},"content":"* [Basic Usage (delete)](#basic-usage-delete) (For users new to command line applications)"},{"lineNumber":399,"author":{"gitId":"wish2023"},"content":"* [Intermediate Usage (delete)](#intermediate-usage-delete) (For users comfortable with command line applications)"},{"lineNumber":400,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":401,"author":{"gitId":"wish2023"},"content":"#### Basic Usage (delete)"},{"lineNumber":402,"author":{"gitId":"wish2023"},"content":"In this section, users new to command line applications should find it easy to use as long as they follow the descriptions in the sections below. "},{"lineNumber":403,"author":{"gitId":"wish2023"},"content":"Users who are comfortable with the basic usage may move on to the [Intermediate](#intermediate-usage-delete) stage to experience how ATHENA was intended to be used."},{"lineNumber":404,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":405,"author":{"gitId":"wish2023"},"content":"##### Command Format"},{"lineNumber":406,"author":{"gitId":"wish2023"},"content":"`delete TASK-ID`"},{"lineNumber":407,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":408,"author":{"gitId":"wish2023"},"content":"##### Parameters"},{"lineNumber":409,"author":{"gitId":"wish2023"},"content":"The `delete` command requires 1 parameter only."},{"lineNumber":410,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":411,"author":{"gitId":"daniellimws"},"content":"* `TASK-ID` refers to the number shown beside the task that you want to delete in the displayed task list. It must be a non-negative integer."},{"lineNumber":412,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":413,"author":{"gitId":"wish2023"},"content":"##### Example Usage"},{"lineNumber":414,"author":{"gitId":"wish2023"},"content":"Firstly, use the [list command](#list-tasks-list-or-l) to get the `TASK-ID` of the task to be deleted."},{"lineNumber":415,"author":{"gitId":"wish2023"},"content":"The following shows the output from ATHENA after entering `delete 0`."},{"lineNumber":416,"author":{"gitId":"wish2023"},"content":"You should expect to see a message to confirm that the task with `TASK-ID` of `0` is deleted. "},{"lineNumber":417,"author":{"gitId":"wish2023"},"content":"ATHENA also prints the command required to restore the deleted task."},{"lineNumber":418,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":419,"author":{"gitId":"daniellimws"},"content":"![delete](screenshots/delete-basic.png)"},{"lineNumber":420,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":421,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":422,"author":{"gitId":"wish2023"},"content":"#### Intermediate Usage (delete)"},{"lineNumber":423,"author":{"gitId":"wish2023"},"content":"The `delete` command supports shortcuts for intermediate users."},{"lineNumber":424,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":425,"author":{"gitId":"wish2023"},"content":"| Shortcut | Expanded command |"},{"lineNumber":426,"author":{"gitId":"wish2023"},"content":"|----------|------------------|"},{"lineNumber":427,"author":{"gitId":"wish2023"},"content":"| `dl`     | `delete`  |"},{"lineNumber":428,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":429,"author":{"gitId":"wish2023"},"content":"##### Example usage"},{"lineNumber":430,"author":{"gitId":"wish2023"},"content":"Firstly, use the [list command](#list-tasks-list-or-l) to get the `TASK-ID` of the task to be deleted."},{"lineNumber":431,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":432,"author":{"gitId":"daniellimws"},"content":"You can just type `dl` instead of `delete`."},{"lineNumber":433,"author":{"gitId":"wish2023"},"content":"The screenshot below shows the output from ATHENA after entering `dl 0`."},{"lineNumber":434,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":435,"author":{"gitId":"daniellimws"},"content":"![dl](screenshots/delete-intermediate.png)"},{"lineNumber":436,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":437,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":438,"author":{"gitId":"wish2023"},"content":"### View task: `view` or `v`"},{"lineNumber":439,"author":{"gitId":"wish2023"},"content":"This command views the specified task details from the timetable."},{"lineNumber":440,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":441,"author":{"gitId":"wish2023"},"content":"The guide for this command is split into two sections:"},{"lineNumber":442,"author":{"gitId":"wish2023"},"content":"* [Basic Usage (view)](#basic-usage-view) (For users new to command line applications)"},{"lineNumber":443,"author":{"gitId":"wish2023"},"content":"* [Intermediate Usage (view)](#intermediate-usage-view) (For users comfortable with command line applications)"},{"lineNumber":444,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":445,"author":{"gitId":"wish2023"},"content":"#### Basic Usage (view)"},{"lineNumber":446,"author":{"gitId":"wish2023"},"content":"In this section, users new to command line applications should find it easy to use as long as they follow the descriptions in the sections below. "},{"lineNumber":447,"author":{"gitId":"wish2023"},"content":"Users who are comfortable with the basic usage may move on to the [Intermediate](#intermediate-usage-view) stage to experience how ATHENA was intended to be used."},{"lineNumber":448,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":449,"author":{"gitId":"wish2023"},"content":"##### Command Format"},{"lineNumber":450,"author":{"gitId":"wish2023"},"content":"`view TASK-ID`"},{"lineNumber":451,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":452,"author":{"gitId":"wish2023"},"content":"##### Parameters"},{"lineNumber":453,"author":{"gitId":"wish2023"},"content":"The `view` command requires 1 parameter only."},{"lineNumber":454,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":455,"author":{"gitId":"daniellimws"},"content":"* `TASK-ID` refers to the number shown beside the task that you want use the [list command](#list-tasks-list-or-l) to get the `TASK-ID` of the task to be viewed."},{"lineNumber":456,"author":{"gitId":"wish2023"},"content":"The following shows the output from ATHENA after entering `view 0`."},{"lineNumber":457,"author":{"gitId":"wish2023"},"content":"You should expect to see the details of your task with `TASK-ID` of `0`."},{"lineNumber":458,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":459,"author":{"gitId":"daniellimws"},"content":"![view](screenshots/view-basic.png)"},{"lineNumber":460,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":461,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":462,"author":{"gitId":"wish2023"},"content":"#### Intermediate Usage (view)"},{"lineNumber":463,"author":{"gitId":"wish2023"},"content":"The `view` command supports shortcuts for intermediate users."},{"lineNumber":464,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":465,"author":{"gitId":"wish2023"},"content":"| Shortcut | Expanded command |"},{"lineNumber":466,"author":{"gitId":"wish2023"},"content":"|----------|------------------|"},{"lineNumber":467,"author":{"gitId":"wish2023"},"content":"| `v`     | `view`  |"},{"lineNumber":468,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":469,"author":{"gitId":"daniellimws"},"content":"You can just type `v` instead of `view`."},{"lineNumber":470,"author":{"gitId":"wish2023"},"content":"The screenshot below shows the output from ATHENA after entering `v 0`."},{"lineNumber":471,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":472,"author":{"gitId":"daniellimws"},"content":"![v](screenshots/view-intermediate.png)"},{"lineNumber":473,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":474,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":475,"author":{"gitId":"wish2023"},"content":"### Exit program: `exit` or `ex`"},{"lineNumber":476,"author":{"gitId":"wish2023"},"content":"This command exits the program."},{"lineNumber":477,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":478,"author":{"gitId":"wish2023"},"content":"#### Format: `exit` or `ex`"},{"lineNumber":479,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":480,"author":{"gitId":"wish2023"},"content":"#### Expected output:"},{"lineNumber":481,"author":{"gitId":"wish2023"},"content":"The screenshot below shows the output from ATHENA after entering `exit`."},{"lineNumber":482,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":483,"author":{"gitId":"daniellimws"},"content":"![exit](screenshots/exit-basic.png)"},{"lineNumber":484,"author":{"gitId":"daniellimws"},"content":"![ex](screenshots/exit-intermediate.png)"},{"lineNumber":485,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":486,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":487,"author":{"gitId":"Kafcis"},"content":"### Saving the data"},{"lineNumber":488,"author":{"gitId":"Kafcis"},"content":"Your tasks are automatically saved in *data.csv* which is located next to the program JAR file. There is no need to save manually.  "},{"lineNumber":489,"author":{"gitId":"amanda-chua"},"content":"![saving data](screenshots/save-file-location.JPG)"},{"lineNumber":490,"author":{"gitId":"-"},"content":""},{"lineNumber":491,"author":{"gitId":"-"},"content":""},{"lineNumber":492,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":493,"author":{"gitId":"Kafcis"},"content":"In this section, we use the terms *fixed tasks* and *flexible tasks*."},{"lineNumber":494,"author":{"gitId":"-"},"content":""},{"lineNumber":495,"author":{"gitId":"Kafcis"},"content":"* *Fixed tasks* refer to tasks that were specified with a start time when added."},{"lineNumber":496,"author":{"gitId":"Kafcis"},"content":"* *Flexible tasks* refer to tasks that were not specified with a time when added. ATHENA will set the time of such tasks according to free slots available in the timetable. (Refer to [**Intermediate Usage (add)**](#intermediate-usage-add))"},{"lineNumber":497,"author":{"gitId":"-"},"content":""},{"lineNumber":498,"author":{"gitId":"Kafcis"},"content":"**Q: How do I transfer my data to another computer?**"},{"lineNumber":499,"author":{"gitId":"-"},"content":""},{"lineNumber":500,"author":{"gitId":"Kafcis"},"content":"**A**: You can copy the *data.csv* file created next to ATHENA.jar to the other computer and place it next to ATHENA.jar there."},{"lineNumber":501,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":502,"author":{"gitId":"Kafcis"},"content":"**Q: Can I make *flexible tasks* into *fixed tasks* and vice versa?**"},{"lineNumber":503,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":504,"author":{"gitId":"Kafcis"},"content":"**A**: No. Once a task is set without a time, ATHENA is given control over its time allocation permanently. One workaround is deleting the *flexible task* and adding a new *fixed task*."},{"lineNumber":505,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":506,"author":{"gitId":"Kafcis"},"content":"**Q: What happens if I do not mark tasks as done?**"},{"lineNumber":507,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":508,"author":{"gitId":"Kafcis"},"content":"**A**: For *fixed tasks*, it will just record that you did not do that task. But for *flexible tasks*, ATHENA will allocate it again at a later date so that you can have another opportunity to work on it."},{"lineNumber":509,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":510,"author":{"gitId":"Kafcis"},"content":"**Q: Why is ATHENA allocating tasks during periods that have already passed?**"},{"lineNumber":511,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":512,"author":{"gitId":"Kafcis"},"content":"**A**: ATHENA is best utilized in the mornings, before 8am. This is because once you add your flexible tasks into ATHENA, it will start by allocating tasks to fit your free spaces in the current day, starting from 8am."},{"lineNumber":513,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":514,"author":{"gitId":"Kafcis"},"content":"**Q: Why is ATHENA is not allocating some of my tasks?**"},{"lineNumber":515,"author":{"gitId":"-"},"content":""},{"lineNumber":516,"author":{"gitId":"Kafcis"},"content":"**A**: ATHENA\u0027s algorithm tries its best to allocate tasks to best of its ability. In the rare case that there is no possible slot for some tasks, it will not assign those tasks. Try to split up bigger tasks into smaller ones or reduce the amount of work you do in one task."},{"lineNumber":517,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":518,"author":{"gitId":"Kafcis"},"content":"**Q: Why is the timetable showing up weirdly?**"},{"lineNumber":519,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":520,"author":{"gitId":"Kafcis"},"content":"**A**: Try using a higher resolution screen, that should make the timetable easier to see. Alternatively, you can try using a smaller font size on your terminal/command prompt."},{"lineNumber":521,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":522,"author":{"gitId":"Kafcis"},"content":"**Q: Is it possible to stop ATHENA from auto-allocating *flexible tasks*?**"},{"lineNumber":523,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":524,"author":{"gitId":"Kafcis"},"content":"**A**: As mentioned previously, it is not possible to convert *flexible tasks* into *fixed tasks*. However, marking the task as done or deleting the task will prevent ATHENA from auto-allocating it."},{"lineNumber":525,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":526,"author":{"gitId":"Kafcis"},"content":"**Q: How does ATHENA allocate tasks for me?**"},{"lineNumber":527,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":528,"author":{"gitId":"Kafcis"},"content":"**A**: ATHENA tries to reduce the amount of dead space in your timetable, so tasks with a longer duration are allocated first. For tasks with the same duration, ATHENA will allocate them according to their importance."},{"lineNumber":529,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":530,"author":{"gitId":"Kafcis"},"content":"**Q: I added a task that occurs every week. When I enter `list f/ALL`, I see that the task is only allocated in a few of the upcoming weeks. Is my task not set to occur every week?**"},{"lineNumber":531,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":532,"author":{"gitId":"Kafcis"},"content":"**A**: Currently, for a task set to recur on a weekly basis, ATHENA will show the task for the next 10 weeks."},{"lineNumber":533,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":534,"author":{"gitId":"Kafcis"},"content":"## Command Summary"},{"lineNumber":535,"author":{"gitId":"-"},"content":""},{"lineNumber":536,"author":{"gitId":"Kafcis"},"content":"| Action            | Format                                                                                                      |"},{"lineNumber":537,"author":{"gitId":"Kafcis"},"content":"| :---------------- | :---------------------------------------------------------------------------------------------------------- |"},{"lineNumber":538,"author":{"gitId":"Kafcis"},"content":"| Help              | `help`                                                                                                      |"},{"lineNumber":539,"author":{"gitId":"Kafcis"},"content":"| Add task          | `add n/NAME [t/TIME] [d/DURATION] [D/DEADLINE] [r/RECURRENCE] [i/IMPORTANCE] [a/ADDITIONAL-NOTES]`            |"},{"lineNumber":540,"author":{"gitId":"Kafcis"},"content":"| List tasks        | `list [f/FORECAST] [i/IMPORTANCE]`                                                                          |"},{"lineNumber":541,"author":{"gitId":"Kafcis"},"content":"| Edit task         | `edit TASK-ID [n/NAME] [t/TIME] [d/DURATION] [D/DEADLINE] [r/RECURRENCE] [i/IMPORTANCE] [a/ADDITIONAL-NOTES]` |"},{"lineNumber":542,"author":{"gitId":"Kafcis"},"content":"| Mark task as done | `done TASK-ID`                                                                                                |"},{"lineNumber":543,"author":{"gitId":"Kafcis"},"content":"| Delete task       | `delete TASK-ID`                                                                                              |"},{"lineNumber":544,"author":{"gitId":"Kafcis"},"content":"| View task         | `view TASK-ID`                                                                                                |"},{"lineNumber":545,"author":{"gitId":"Kafcis"},"content":"| Exit program      | `exit`    "}],"authorContributionMap":{"alstontham":35,"Kafcis":51,"amanda-chua":172,"-":24,"daniellimws":181,"wish2023":82}},{"path":"docs/team/alstontham.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"alstontham"},"content":"# Alston Tham Yong Hao - Project Portfolio Page"},{"lineNumber":2,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":3,"author":{"gitId":"alstontham"},"content":"## Overview of project: ATHENA"},{"lineNumber":4,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":5,"author":{"gitId":"alstontham"},"content":"ATHENA is your Automated Timetable Helper Encourager n\u0027 Assistant and is a desktop daily life planner optimized for use via a Command Line Interface (CLI)."},{"lineNumber":6,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":7,"author":{"gitId":"alstontham"},"content":"ATHENA uses algorithmic optimisation to give you the best timetable that allows you to make the most of your time."},{"lineNumber":8,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":9,"author":{"gitId":"alstontham"},"content":"## Summary of Contributions"},{"lineNumber":10,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":11,"author":{"gitId":"alstontham"},"content":"Shown below are my contributions to my group\u0027s CS2113T project, ATHENA. Included are details of contributions to the main code, documentation, and other contributions throughout the development of ATHENA."},{"lineNumber":12,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":13,"author":{"gitId":"alstontham"},"content":"### Code contributed: "},{"lineNumber":14,"author":{"gitId":"alstontham"},"content":"My code contributions to this project can be found at [this page](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dalstontham\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"},{"lineNumber":15,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":16,"author":{"gitId":"alstontham"},"content":"### Project management:"},{"lineNumber":17,"author":{"gitId":"alstontham"},"content":"* Overall in-charge and head of the creative direction of the project"},{"lineNumber":18,"author":{"gitId":"alstontham"},"content":"    * Implemented all of the `UI` (User Interface) related code, as well as Javadocs comments"},{"lineNumber":19,"author":{"gitId":"alstontham"},"content":"    * In-charge of exception handling code to ensure a smooth, seamless user experience"},{"lineNumber":20,"author":{"gitId":"alstontham"},"content":"* Added appropriate issues on the team GitHub page when necessary"},{"lineNumber":21,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":22,"author":{"gitId":"alstontham"},"content":"### Enhancements implemented:"},{"lineNumber":23,"author":{"gitId":"alstontham"},"content":"* Added and amended test code for `Parser`, `TaskList`, `DeleteCommand`, `DoneCommand`, `AddCommand` and `EditCommand`"},{"lineNumber":24,"author":{"gitId":"alstontham"},"content":"* Injected the program with a persona, enhancing the user experience"},{"lineNumber":25,"author":{"gitId":"alstontham"},"content":"* Implemented colored text to improve text readability"},{"lineNumber":26,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":27,"author":{"gitId":"alstontham"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"},{"lineNumber":28,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":29,"author":{"gitId":"alstontham"},"content":"### Contributions to Documentation:"},{"lineNumber":30,"author":{"gitId":"alstontham"},"content":"  * User Guide:"},{"lineNumber":31,"author":{"gitId":"alstontham"},"content":"    * Included writeup of _Introduction_, _Quick Start_, and _Features_"},{"lineNumber":32,"author":{"gitId":"alstontham"},"content":"    * Added documentation for the `help` feature"},{"lineNumber":33,"author":{"gitId":"alstontham"},"content":"  "},{"lineNumber":34,"author":{"gitId":"alstontham"},"content":" * Developer Guide:"},{"lineNumber":35,"author":{"gitId":"alstontham"},"content":"    * Wrote the _Introduction_, _Setup_, _Target user profile_, and _Value proposition_ components"},{"lineNumber":36,"author":{"gitId":"alstontham"},"content":"    * Added the _Ui component_"},{"lineNumber":37,"author":{"gitId":"alstontham"},"content":"    "},{"lineNumber":38,"author":{"gitId":"alstontham"},"content":"### Contributions to team-based tasks:"},{"lineNumber":39,"author":{"gitId":"alstontham"},"content":"  * Suggested improvements on team member\u0027s PRs on GitHub: [#11](https://github.com/AY2021S1-CS2113T-W12-2/tp/pull/11), [#47](https://github.com/AY2021S1-CS2113T-W12-2/tp/pull/47), [#116](https://github.com/AY2021S1-CS2113T-W12-2/tp/pull/116), [#119](https://github.com/AY2021S1-CS2113T-W12-2/tp/pull/119)"},{"lineNumber":40,"author":{"gitId":"alstontham"},"content":"  * Proofread the final draft of the User Guide and Developer Guide, ensuring a consistent voice throughout"},{"lineNumber":41,"author":{"gitId":"alstontham"},"content":"  "},{"lineNumber":42,"author":{"gitId":"alstontham"},"content":"### Contributions beyond the project team:"},{"lineNumber":43,"author":{"gitId":"alstontham"},"content":"  * Reported bugs and suggestions for other teams: [#3](https://github.com/alstontham/ped/issues/3), [#4](https://github.com/alstontham/ped/issues/4), [#6](https://github.com/alstontham/ped/issues/6), [#7](https://github.com/alstontham/ped/issues/7), [#10](https://github.com/alstontham/ped/issues/10)"},{"lineNumber":44,"author":{"gitId":"alstontham"},"content":"  * Suggested improvements for other teams\u0027 User Guide and Developer Guide"}],"authorContributionMap":{"alstontham":44}},{"path":"docs/team/amanda-chua.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"amanda-chua"},"content":"# Chua Sin Eng, Amanda - Project Portfolio Page"},{"lineNumber":2,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":3,"author":{"gitId":"amanda-chua"},"content":"## Overview of project: ATHENA"},{"lineNumber":4,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":5,"author":{"gitId":"amanda-chua"},"content":"ATHENA is your Automated Timetable Helper Encourager n\u0027 Assistant and is a desktop daily life planner optimized for use via a Command Line Interface (CLI)."},{"lineNumber":6,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":7,"author":{"gitId":"amanda-chua"},"content":"ATHENA uses algorithmic optimisation to give you the best timetable that allows you to make the most of your time."},{"lineNumber":8,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":9,"author":{"gitId":"amanda-chua"},"content":"## Summary of Contributions"},{"lineNumber":10,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":11,"author":{"gitId":"amanda-chua"},"content":"Given below is a brief summary of my contributions to the project, including coding, documentation and other contributions throughout the development of ATHENA."},{"lineNumber":12,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":13,"author":{"gitId":"amanda-chua"},"content":"### Code contributed: "},{"lineNumber":14,"author":{"gitId":"amanda-chua"},"content":"The code contributed by me can be found in this [link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003damanda-chua\u0026tabRepo\u003dAY2021S1-CS2113T-W12-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)."},{"lineNumber":15,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":16,"author":{"gitId":"amanda-chua"},"content":"### Project management:"},{"lineNumber":17,"author":{"gitId":"amanda-chua"},"content":"* In-charge of the code that deals with parsing of user input and executing the various commands."},{"lineNumber":18,"author":{"gitId":"amanda-chua"},"content":"    * `Parser`"},{"lineNumber":19,"author":{"gitId":"amanda-chua"},"content":"    * `Command` and all its subclasses."},{"lineNumber":20,"author":{"gitId":"amanda-chua"},"content":"* In-charge of the documentation of the project, ensure coherence and accuracy."},{"lineNumber":21,"author":{"gitId":"amanda-chua"},"content":"* Add issues when necessary in the issue tracker on GitHub."},{"lineNumber":22,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":23,"author":{"gitId":"amanda-chua"},"content":"### Enhancements implemented:"},{"lineNumber":24,"author":{"gitId":"amanda-chua"},"content":"* Add test code for `Parser`, `AddCommand` and `DeleteCommand`"},{"lineNumber":25,"author":{"gitId":"amanda-chua"},"content":"* Implemented shortcut commands"},{"lineNumber":26,"author":{"gitId":"amanda-chua"},"content":"* Used regex to parse parameters input by user"},{"lineNumber":27,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":28,"author":{"gitId":"amanda-chua"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":30,"author":{"gitId":"amanda-chua"},"content":"### Documentation:"},{"lineNumber":31,"author":{"gitId":"amanda-chua"},"content":"  * User Guide:"},{"lineNumber":32,"author":{"gitId":"amanda-chua"},"content":"    * Created the first draft and provided a template for the team to follow. "},{"lineNumber":33,"author":{"gitId":"amanda-chua"},"content":"    * In-charge of the overall formatting."},{"lineNumber":34,"author":{"gitId":"amanda-chua"},"content":"    * Documentation for the features `add` and `edit` "},{"lineNumber":35,"author":{"gitId":"amanda-chua"},"content":"  "},{"lineNumber":36,"author":{"gitId":"amanda-chua"},"content":"  * Developer Guide:"},{"lineNumber":37,"author":{"gitId":"amanda-chua"},"content":"    * Created the first draft and provided a template for the team to follow. "},{"lineNumber":38,"author":{"gitId":"amanda-chua"},"content":"    * In-charge of the overall formatting."},{"lineNumber":39,"author":{"gitId":"amanda-chua"},"content":"    * The following are sections I contributed to:"},{"lineNumber":40,"author":{"gitId":"amanda-chua"},"content":"      1. Architecture"},{"lineNumber":41,"author":{"gitId":"amanda-chua"},"content":"      2. Parser Component  "},{"lineNumber":42,"author":{"gitId":"amanda-chua"},"content":"      3. Implementation for `User command processing`, `Add task feature` and `Edit task feature`"},{"lineNumber":43,"author":{"gitId":"amanda-chua"},"content":"      4. Instructions for manual testing (except Data Storage)"},{"lineNumber":44,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":45,"author":{"gitId":"amanda-chua"},"content":"### Contributions to team-based tasks:"},{"lineNumber":46,"author":{"gitId":"amanda-chua"},"content":"* Reviewed teammates PRs and wrote appropriate comments about code quality: [#11](https://github.com/AY2021S1-CS2113T-W12-2/tp/pull/11), [#34](https://github.com/AY2021S1-CS2113T-W12-2/tp/pull/34), "},{"lineNumber":47,"author":{"gitId":"amanda-chua"},"content":"[#61](https://github.com/AY2021S1-CS2113T-W12-2/tp/pull/61), [#235](https://github.com/AY2021S1-CS2113T-W12-2/tp/pull/235)"},{"lineNumber":48,"author":{"gitId":"amanda-chua"},"content":"* Split tasks for documentations equally among the team"},{"lineNumber":49,"author":{"gitId":"amanda-chua"},"content":"* Took notes during some team meetings to keep track of tasks to be done."},{"lineNumber":50,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":51,"author":{"gitId":"amanda-chua"},"content":"### Contributions beyond the project team:"},{"lineNumber":52,"author":{"gitId":"amanda-chua"},"content":"* Reported several bugs to the team which was assigned to me during the dry run Practical Exam. [#1](https://github.com/amanda-chua/ped/issues/1), "},{"lineNumber":53,"author":{"gitId":"amanda-chua"},"content":"[#2](https://github.com/amanda-chua/ped/issues/2), [#3](https://github.com/amanda-chua/ped/issues/3), [#4](https://github.com/amanda-chua/ped/issues/4)"},{"lineNumber":54,"author":{"gitId":"amanda-chua"},"content":"* Gave feedback on the documentations of other teams "}],"authorContributionMap":{"amanda-chua":54}},{"path":"docs/team/daniellimws.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"# Daniel Lim Wee Soong - Project Portfolio Page"},{"lineNumber":2,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"## Overview of project: ATHENA"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"ATHENA is your Automated Timetable Helper Encourager n\u0027 Assistant and is a desktop daily life planner optimized for use via a Command Line Interface (CLI)."},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":"ATHENA uses algorithmic optimisation to give you the best timetable that allows you to make the most of your time."},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":9,"author":{"gitId":"daniellimws"},"content":"## Summary of Contributions"},{"lineNumber":10,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":11,"author":{"gitId":"daniellimws"},"content":"Given below is a summary of my contributions to the project ATHENA."},{"lineNumber":12,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":13,"author":{"gitId":"daniellimws"},"content":"### Code contributed:"},{"lineNumber":14,"author":{"gitId":"daniellimws"},"content":"The code contributed by me can be found in this [link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003ddaniellimws\u0026tabRepo\u003dAY2021S1-CS2113T-W12-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)."},{"lineNumber":15,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":16,"author":{"gitId":"daniellimws"},"content":"### Project management:"},{"lineNumber":17,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":18,"author":{"gitId":"daniellimws"},"content":"* Helped with code review when my teammates open pull requests."},{"lineNumber":19,"author":{"gitId":"daniellimws"},"content":"* Opened a new milestone on GitHub every 2 weeks."},{"lineNumber":20,"author":{"gitId":"daniellimws"},"content":"* Triaged some bugs reported during PE Dry Run."},{"lineNumber":21,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":22,"author":{"gitId":"daniellimws"},"content":"### Enhancements implemented:"},{"lineNumber":23,"author":{"gitId":"daniellimws"},"content":"* Implemented the functionality to generate meaningful output when the user requests for the list of tasks, in the"},{"lineNumber":24,"author":{"gitId":"daniellimws"},"content":" following classes:"},{"lineNumber":25,"author":{"gitId":"daniellimws"},"content":"    * `ListCommand`"},{"lineNumber":26,"author":{"gitId":"daniellimws"},"content":"    * `Timetable`"},{"lineNumber":27,"author":{"gitId":"daniellimws"},"content":"    * `TimetableDay`"},{"lineNumber":28,"author":{"gitId":"daniellimws"},"content":"    * `TimetableDrawer`"},{"lineNumber":29,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":30,"author":{"gitId":"daniellimws"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"},{"lineNumber":31,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":32,"author":{"gitId":"daniellimws"},"content":"### Documentation:"},{"lineNumber":33,"author":{"gitId":"daniellimws"},"content":"  * User Guide:"},{"lineNumber":34,"author":{"gitId":"daniellimws"},"content":"    * Documented the following features:"},{"lineNumber":35,"author":{"gitId":"daniellimws"},"content":"        * `list`"},{"lineNumber":36,"author":{"gitId":"daniellimws"},"content":"        * `done`"},{"lineNumber":37,"author":{"gitId":"daniellimws"},"content":"    * Prepared the final PDF file for submission"},{"lineNumber":38,"author":{"gitId":"daniellimws"},"content":"        * Mainly add page breaks where appropriate"},{"lineNumber":39,"author":{"gitId":"daniellimws"},"content":"        * Ensure proper formatting when converting from Markdown to PDF"},{"lineNumber":40,"author":{"gitId":"daniellimws"},"content":"    "},{"lineNumber":41,"author":{"gitId":"daniellimws"},"content":"  * Developer Guide:"},{"lineNumber":42,"author":{"gitId":"daniellimws"},"content":"    * Contributed in the following areas:"},{"lineNumber":43,"author":{"gitId":"daniellimws"},"content":"        * Class diagram for `Timetable` component"},{"lineNumber":44,"author":{"gitId":"daniellimws"},"content":"        * Implementation for listing tasks"},{"lineNumber":45,"author":{"gitId":"daniellimws"},"content":"        * Implementation for marking a task as done"},{"lineNumber":46,"author":{"gitId":"daniellimws"},"content":"        * Other guides (Documentation guide, Testing guide, Dev-ops guide)"},{"lineNumber":47,"author":{"gitId":"daniellimws"},"content":"        * Instructions for manual testing the data storage feature"},{"lineNumber":48,"author":{"gitId":"daniellimws"},"content":"    * Prepared the final PDF file for submission"},{"lineNumber":49,"author":{"gitId":"daniellimws"},"content":"        * Mainly add page breaks where appropriate"},{"lineNumber":50,"author":{"gitId":"daniellimws"},"content":"        * Ensure proper formatting when converting from Markdown to PDF"},{"lineNumber":51,"author":{"gitId":"daniellimws"},"content":"    "},{"lineNumber":52,"author":{"gitId":"daniellimws"},"content":"### Contribution to team-based tasks:"},{"lineNumber":53,"author":{"gitId":"daniellimws"},"content":"* Reviewed PRs by my teammates. Notable ones include:"},{"lineNumber":54,"author":{"gitId":"daniellimws"},"content":"[#132](https://github.com/AY2021S1-CS2113T-W12-2/tp/pull/132), "},{"lineNumber":55,"author":{"gitId":"daniellimws"},"content":"[#115](https://github.com/AY2021S1-CS2113T-W12-2/tp/pull/115), "},{"lineNumber":56,"author":{"gitId":"daniellimws"},"content":"[#10](https://github.com/AY2021S1-CS2113T-W12-2/tp/pull/10)"},{"lineNumber":57,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":58,"author":{"gitId":"daniellimws"},"content":"* Triaged high severity bugs reported by peer testers:"},{"lineNumber":59,"author":{"gitId":"daniellimws"},"content":"[#221](https://github.com/AY2021S1-CS2113T-W12-2/tp/issues/221), "},{"lineNumber":60,"author":{"gitId":"daniellimws"},"content":"[#199](https://github.com/AY2021S1-CS2113T-W12-2/tp/issues/199)"},{"lineNumber":61,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":62,"author":{"gitId":"daniellimws"},"content":"* Reported high severity bugs to my team: "},{"lineNumber":63,"author":{"gitId":"daniellimws"},"content":"[#82](https://github.com/AY2021S1-CS2113T-W12-2/tp/issues/82), "},{"lineNumber":64,"author":{"gitId":"daniellimws"},"content":"[#71](https://github.com/AY2021S1-CS2113T-W12-2/tp/issues/71),"},{"lineNumber":65,"author":{"gitId":"daniellimws"},"content":"[#70](https://github.com/AY2021S1-CS2113T-W12-2/tp/issues/70)"},{"lineNumber":66,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":67,"author":{"gitId":"daniellimws"},"content":"### Contributions beyond the team:"},{"lineNumber":68,"author":{"gitId":"daniellimws"},"content":"* Reported the documentation and feature bugs found in another team\u0027s project:"},{"lineNumber":69,"author":{"gitId":"daniellimws"},"content":"[#2](https://github.com/daniellimws/ped/issues/2),"},{"lineNumber":70,"author":{"gitId":"daniellimws"},"content":"[#4](https://github.com/daniellimws/ped/issues/4),"},{"lineNumber":71,"author":{"gitId":"daniellimws"},"content":"[#5](https://github.com/daniellimws/ped/issues/5),"},{"lineNumber":72,"author":{"gitId":"daniellimws"},"content":"[#6](https://github.com/daniellimws/ped/issues/6)"}],"authorContributionMap":{"daniellimws":72}},{"path":"docs/team/kafcis.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Kafcis"},"content":"# Cheong Ray Yang, Marcus - Project Portfolio Page"},{"lineNumber":2,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":3,"author":{"gitId":"Kafcis"},"content":"## Overview of project: ATHENA"},{"lineNumber":4,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":5,"author":{"gitId":"Kafcis"},"content":"ATHENA is your Automated Timetable Helper Encourager n\u0027 Assistant and is a desktop daily life planner optimized for use via a Command Line Interface (CLI)."},{"lineNumber":6,"author":{"gitId":"Kafcis"},"content":"  "},{"lineNumber":7,"author":{"gitId":"Kafcis"},"content":"ATHENA uses algorithmic optimisation to give you the best timetable that allows you to make the most of your time."},{"lineNumber":8,"author":{"gitId":"Kafcis"},"content":"  "},{"lineNumber":9,"author":{"gitId":"Kafcis"},"content":"### Summary of Contributions"},{"lineNumber":10,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":11,"author":{"gitId":"Kafcis"},"content":"Given below is a brief summary of my contributions to the project, including coding, documentation and other contributions throughout the development of ATHENA."},{"lineNumber":12,"author":{"gitId":"Kafcis"},"content":"  "},{"lineNumber":13,"author":{"gitId":"Kafcis"},"content":"### Code contributed: "},{"lineNumber":14,"author":{"gitId":"Kafcis"},"content":"The code contributed by me can be found in this [RepoSense link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByAuthors\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dKafcis\u0026tabRepo\u003dAY2021S1-CS2113T-W12-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"},{"lineNumber":15,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":16,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":17,"author":{"gitId":"Kafcis"},"content":"### Project management:"},{"lineNumber":18,"author":{"gitId":"Kafcis"},"content":" * In-charge of the code that deals with storing and organising tasks."},{"lineNumber":19,"author":{"gitId":"Kafcis"},"content":"    * `TimeAllocator`"},{"lineNumber":20,"author":{"gitId":"Kafcis"},"content":"    * `Storage`"},{"lineNumber":21,"author":{"gitId":"Kafcis"},"content":" * Scheduling project tasks"},{"lineNumber":22,"author":{"gitId":"Kafcis"},"content":" * Played a part in modifying Tasks to fit with other classes"},{"lineNumber":23,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":24,"author":{"gitId":"Kafcis"},"content":"### Enhancements implemented:"},{"lineNumber":25,"author":{"gitId":"Kafcis"},"content":"  * Storage"},{"lineNumber":26,"author":{"gitId":"Kafcis"},"content":"  * Automated time allocation"},{"lineNumber":27,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":28,"author":{"gitId":"Kafcis"},"content":"### Documentation:"},{"lineNumber":29,"author":{"gitId":"Kafcis"},"content":"* User Guide:"},{"lineNumber":30,"author":{"gitId":"Kafcis"},"content":"    * Added documentation for the storage"},{"lineNumber":31,"author":{"gitId":"Kafcis"},"content":"    * Added FAQ"},{"lineNumber":32,"author":{"gitId":"Kafcis"},"content":"* Developer Guide:"},{"lineNumber":33,"author":{"gitId":"Kafcis"},"content":"    * Made sequence diagrams"},{"lineNumber":34,"author":{"gitId":"Kafcis"},"content":"    * Storage Component"},{"lineNumber":35,"author":{"gitId":"Kafcis"},"content":"    * Included implementations of Storage and TimeAllocator class"},{"lineNumber":36,"author":{"gitId":"Kafcis"},"content":"    * Non-Functional Requirements"},{"lineNumber":37,"author":{"gitId":"Kafcis"},"content":"    "},{"lineNumber":38,"author":{"gitId":"Kafcis"},"content":"### Contributions to team-based tasks:"},{"lineNumber":39,"author":{"gitId":"Kafcis"},"content":"* Reviewed teammates PRs and wrote appropriate comments about code quality: [#115](https://github.com/AY2021S1-CS2113T-W12-2/tp/pull/115), [#116](https://github.com/AY2021S1-CS2113T-W12-2/tp/pull/116),"},{"lineNumber":40,"author":{"gitId":"Kafcis"},"content":"    [#239](https://github.com/AY2021S1-CS2113T-W12-2/tp/pull/239)."},{"lineNumber":41,"author":{"gitId":"Kafcis"},"content":"* Scheduling and tracking tasks to be completed"},{"lineNumber":42,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":43,"author":{"gitId":"Kafcis"},"content":"### Contributions beyond the project team:"},{"lineNumber":44,"author":{"gitId":"Kafcis"},"content":"* Reported several bugs to the team which was assigned to me during the dry run Practical Exam.  [#1](https://github.com/Kafcis/ped/issues/1),"},{"lineNumber":45,"author":{"gitId":"Kafcis"},"content":"[#2](https://github.com/Kafcis/ped/issues/2), [#3](https://github.com/Kafcis/ped/issues/3), [#7](https://github.com/Kafcis/ped/issues/7),"},{"lineNumber":46,"author":{"gitId":"Kafcis"},"content":"[#8](https://github.com/Kafcis/ped/issues/8), [#9](https://github.com/Kafcis/ped/issues/9), [#10](https://github.com/Kafcis/ped/issues/10)."},{"lineNumber":47,"author":{"gitId":"Kafcis"},"content":"* Gave feedback on the documentations of other teams "},{"lineNumber":48,"author":{"gitId":"Kafcis"},"content":" "}],"authorContributionMap":{"Kafcis":48}},{"path":"docs/team/wish2023.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"wish2023"},"content":"# Arora, Vishesh P - Project Portfolio Page"},{"lineNumber":2,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":3,"author":{"gitId":"wish2023"},"content":"## Overview of project: ATHENA"},{"lineNumber":4,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":5,"author":{"gitId":"wish2023"},"content":"ATHENA is your Automated Timetable Helper Encourager n\u0027 Assistant and is a desktop daily life planner optimized for use via a Command Line Interface (CLI)."},{"lineNumber":6,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":7,"author":{"gitId":"wish2023"},"content":"ATHENA uses algorithmic optimisation to give you the best timetable that allows you to make the most of your time."},{"lineNumber":8,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":9,"author":{"gitId":"wish2023"},"content":"## Summary of Contributions"},{"lineNumber":10,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":11,"author":{"gitId":"wish2023"},"content":"Given below is a summary of my contributions to the project ATHENA."},{"lineNumber":12,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":13,"author":{"gitId":"wish2023"},"content":"### Code contributed:"},{"lineNumber":14,"author":{"gitId":"wish2023"},"content":"The code contributed by me can be found in this [link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dwish2023\u0026tabRepo\u003dAY2021S1-CS2113T-W12-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)."},{"lineNumber":15,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":16,"author":{"gitId":"wish2023"},"content":"### Project management:"},{"lineNumber":17,"author":{"gitId":"wish2023"},"content":"* In-charge of the code that handles the user tasks during program execution. Major class that I am in charge of:"},{"lineNumber":18,"author":{"gitId":"wish2023"},"content":"    * `TaskList`"},{"lineNumber":19,"author":{"gitId":"wish2023"},"content":"    * `Task`"},{"lineNumber":20,"author":{"gitId":"wish2023"},"content":"    * `Time`"},{"lineNumber":21,"author":{"gitId":"wish2023"},"content":"* Add issues when necessary on Github\u0027s issue tracker."},{"lineNumber":22,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":23,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":24,"author":{"gitId":"wish2023"},"content":"### Enhancements implemented:"},{"lineNumber":25,"author":{"gitId":"wish2023"},"content":"* Created test code for `TaskList` and `Task`."},{"lineNumber":26,"author":{"gitId":"wish2023"},"content":"* Implemented a `ForecastFilter` to enable user to filter tasks according to date."},{"lineNumber":27,"author":{"gitId":"wish2023"},"content":"* Implemented a `FilterCalculator` and `DateChecker` to examine user errors."},{"lineNumber":28,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":29,"author":{"gitId":"wish2023"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"},{"lineNumber":30,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":31,"author":{"gitId":"wish2023"},"content":"### Documentation:"},{"lineNumber":32,"author":{"gitId":"wish2023"},"content":"  * User Guide:"},{"lineNumber":33,"author":{"gitId":"wish2023"},"content":"    * Documented the following features:"},{"lineNumber":34,"author":{"gitId":"wish2023"},"content":"        * `delete`"},{"lineNumber":35,"author":{"gitId":"wish2023"},"content":"        * `view`"},{"lineNumber":36,"author":{"gitId":"wish2023"},"content":"        * `exit`"},{"lineNumber":37,"author":{"gitId":"wish2023"},"content":"    "},{"lineNumber":38,"author":{"gitId":"wish2023"},"content":"  * Developer Guide:"},{"lineNumber":39,"author":{"gitId":"wish2023"},"content":"    * Contributed in the following areas:"},{"lineNumber":40,"author":{"gitId":"wish2023"},"content":"        * `TaskList` component."},{"lineNumber":41,"author":{"gitId":"wish2023"},"content":"        * `delete` task implementation."},{"lineNumber":42,"author":{"gitId":"wish2023"},"content":"        * `view` task implementation."},{"lineNumber":43,"author":{"gitId":"wish2023"},"content":"        * User stories."},{"lineNumber":44,"author":{"gitId":"wish2023"},"content":"        * Glossary."},{"lineNumber":45,"author":{"gitId":"wish2023"},"content":"    "},{"lineNumber":46,"author":{"gitId":"wish2023"},"content":"### Contribution to team-based tasks:"},{"lineNumber":47,"author":{"gitId":"wish2023"},"content":"* Reviewed PRs within team and left noteworthy comments: [#10](https://github.com/AY2021S1-CS2113T-W12-2/tp/pull/10), "},{"lineNumber":48,"author":{"gitId":"wish2023"},"content":"[#43](https://github.com/AY2021S1-CS2113T-W12-2/tp/pull/43), "},{"lineNumber":49,"author":{"gitId":"wish2023"},"content":"[#99](https://github.com/AY2021S1-CS2113T-W12-2/tp/pull/99), "},{"lineNumber":50,"author":{"gitId":"wish2023"},"content":"[#116](https://github.com/AY2021S1-CS2113T-W12-2/tp/pull/116),"},{"lineNumber":51,"author":{"gitId":"wish2023"},"content":"[#224](https://github.com/AY2021S1-CS2113T-W12-2/tp/pull/244)"},{"lineNumber":52,"author":{"gitId":"wish2023"},"content":"* Reported important bugs to the team: [#73](https://github.com/AY2021S1-CS2113T-W12-2/tp/issues/73), "},{"lineNumber":53,"author":{"gitId":"wish2023"},"content":"[#150](https://github.com/AY2021S1-CS2113T-W12-2/tp/issues/150), "},{"lineNumber":54,"author":{"gitId":"wish2023"},"content":"[#251](https://github.com/AY2021S1-CS2113T-W12-2/tp/issues/251)"},{"lineNumber":55,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":56,"author":{"gitId":"wish2023"},"content":"### Contributions beyond the team:"},{"lineNumber":57,"author":{"gitId":"wish2023"},"content":"* Reviewed DG of a project group in this [link](https://github.com/wish2023/ped/issues). Some issues included:"},{"lineNumber":58,"author":{"gitId":"wish2023"},"content":"    * [#5](https://github.com/wish2023/ped/issues/5)"},{"lineNumber":59,"author":{"gitId":"wish2023"},"content":"    * [#9](https://github.com/wish2023/ped/issues/9)"},{"lineNumber":60,"author":{"gitId":"wish2023"},"content":"    * [#7](https://github.com/wish2023/ped/issues/7)"}],"authorContributionMap":{"wish2023":60}},{"path":"src/main/java/athena/Athena.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena;"},{"lineNumber":2,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":3,"author":{"gitId":"amanda-chua"},"content":"import athena.commands.Command;"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":5,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.storage.StorageException;"},{"lineNumber":7,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":"import java.util.NoSuchElementException;"},{"lineNumber":9,"author":{"gitId":"alstontham"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":11,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"alstontham"},"content":" * The main class of the ATHENA program."},{"lineNumber":13,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":14,"author":{"gitId":"daniellimws"},"content":"public class Athena {"},{"lineNumber":15,"author":{"gitId":"alstontham"},"content":"    private AthenaUi athenaUi;"},{"lineNumber":16,"author":{"gitId":"alstontham"},"content":"    private Storage storage;"},{"lineNumber":17,"author":{"gitId":"alstontham"},"content":"    private TaskList taskList;"},{"lineNumber":18,"author":{"gitId":"amanda-chua"},"content":"    private TimeAllocator timeAllocator;"},{"lineNumber":19,"author":{"gitId":"amanda-chua"},"content":"    private Parser parser;"},{"lineNumber":20,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":21,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"alstontham"},"content":"     * Creates an ATHENA object."},{"lineNumber":23,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"alstontham"},"content":"    public Athena() {"},{"lineNumber":25,"author":{"gitId":"alstontham"},"content":"        athenaUi \u003d new AthenaUi();"},{"lineNumber":26,"author":{"gitId":"amanda-chua"},"content":"        parser \u003d new Parser();"},{"lineNumber":27,"author":{"gitId":"Kafcis"},"content":"        storage \u003d new Storage(\"data.csv\");"},{"lineNumber":28,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":30,"author":{"gitId":"alstontham"},"content":"    public static void main(String[] args) {"},{"lineNumber":31,"author":{"gitId":"alstontham"},"content":"        Athena athena \u003d new Athena();"},{"lineNumber":32,"author":{"gitId":"alstontham"},"content":"        athena.runProgram();"},{"lineNumber":33,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":35,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"alstontham"},"content":"     * Runs the main code of the ATHENA program."},{"lineNumber":37,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"alstontham"},"content":"    public void runProgram() {"},{"lineNumber":39,"author":{"gitId":"alstontham"},"content":"        String inputString;"},{"lineNumber":40,"author":{"gitId":"alstontham"},"content":"        athenaUi.printAthenaLogo();"},{"lineNumber":41,"author":{"gitId":"alstontham"},"content":"        athenaUi.printWelcomeMessage();"},{"lineNumber":42,"author":{"gitId":"alstontham"},"content":"        boolean isExit \u003d false;"},{"lineNumber":43,"author":{"gitId":"Kafcis"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"Kafcis"},"content":"            taskList \u003d storage.loadTaskListData();"},{"lineNumber":45,"author":{"gitId":"Kafcis"},"content":"        } catch (StorageException e) {"},{"lineNumber":46,"author":{"gitId":"Kafcis"},"content":"            e.printErrorMessage();"},{"lineNumber":47,"author":{"gitId":"Kafcis"},"content":"            isExit \u003d true;"},{"lineNumber":48,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"alstontham"},"content":"        Scanner input \u003d new Scanner(System.in);"},{"lineNumber":50,"author":{"gitId":"alstontham"},"content":"        while (!isExit) {"},{"lineNumber":51,"author":{"gitId":"alstontham"},"content":"            try {"},{"lineNumber":52,"author":{"gitId":"Kafcis"},"content":"                timeAllocator \u003d new TimeAllocator(taskList);"},{"lineNumber":53,"author":{"gitId":"amanda-chua"},"content":"                timeAllocator.runAllocate();"},{"lineNumber":54,"author":{"gitId":"alstontham"},"content":"                athenaUi.printNewline();"},{"lineNumber":55,"author":{"gitId":"alstontham"},"content":"                athenaUi.printUserInputIndicator();"},{"lineNumber":56,"author":{"gitId":"alstontham"},"content":"                inputString \u003d athenaUi.detectInput(input);"},{"lineNumber":57,"author":{"gitId":"amanda-chua"},"content":"                Command userCommand \u003d parser.parse(inputString, taskList);"},{"lineNumber":58,"author":{"gitId":"amanda-chua"},"content":"                userCommand.execute(taskList, athenaUi);"},{"lineNumber":59,"author":{"gitId":"amanda-chua"},"content":"                storage.saveTaskListData(taskList);"},{"lineNumber":60,"author":{"gitId":"amanda-chua"},"content":"                isExit \u003d userCommand.getIsExit();"},{"lineNumber":61,"author":{"gitId":"alstontham"},"content":"            } catch (CommandException e) {"},{"lineNumber":62,"author":{"gitId":"alstontham"},"content":"                e.printErrorMessage();"},{"lineNumber":63,"author":{"gitId":"daniellimws"},"content":"            } catch (NoSuchElementException e) {"},{"lineNumber":64,"author":{"gitId":"daniellimws"},"content":"                isExit \u003d true;"},{"lineNumber":65,"author":{"gitId":"alstontham"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"alstontham"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"daniellimws"},"content":"        input.close();"},{"lineNumber":68,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Kafcis"},"content":"}"}],"authorContributionMap":{"alstontham":39,"Kafcis":10,"amanda-chua":11,"daniellimws":9}},{"path":"src/main/java/athena/DateChecker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"amanda-chua"},"content":"package athena;"},{"lineNumber":2,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":3,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.DateHasPassedException;"},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.InvalidRecurrenceException;"},{"lineNumber":6,"author":{"gitId":"wish2023"},"content":"import athena.exceptions.command.InvalidTimeFormatException;"},{"lineNumber":7,"author":{"gitId":"wish2023"},"content":"import athena.exceptions.command.TimeNotHourlyException;"},{"lineNumber":8,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":9,"author":{"gitId":"wish2023"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitId":"wish2023"},"content":"import java.time.LocalTime;"},{"lineNumber":11,"author":{"gitId":"wish2023"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":12,"author":{"gitId":"wish2023"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":13,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":14,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":15,"author":{"gitId":"wish2023"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"wish2023"},"content":" * Checks if a user\u0027s date is valid and has not passed."},{"lineNumber":17,"author":{"gitId":"wish2023"},"content":" */"},{"lineNumber":18,"author":{"gitId":"wish2023"},"content":"public class DateChecker {"},{"lineNumber":19,"author":{"gitId":"wish2023"},"content":"    public static final String TODAY \u003d \"today\";"},{"lineNumber":20,"author":{"gitId":"wish2023"},"content":"    public static final String DD_MM_YYYY \u003d \"dd-MM-yyyy\";"},{"lineNumber":21,"author":{"gitId":"wish2023"},"content":"    String recurrenceString;"},{"lineNumber":22,"author":{"gitId":"wish2023"},"content":"    String startTimeString;"},{"lineNumber":23,"author":{"gitId":"wish2023"},"content":"    LocalDate recurrence;"},{"lineNumber":24,"author":{"gitId":"wish2023"},"content":"    LocalTime startTime;"},{"lineNumber":25,"author":{"gitId":"wish2023"},"content":"    DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"},{"lineNumber":26,"author":{"gitId":"wish2023"},"content":"    DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");"},{"lineNumber":27,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":28,"author":{"gitId":"wish2023"},"content":"    public DateChecker(String recurrenceString, String startTimeString)"},{"lineNumber":29,"author":{"gitId":"wish2023"},"content":"            throws DateHasPassedException, InvalidRecurrenceException,"},{"lineNumber":30,"author":{"gitId":"wish2023"},"content":"            InvalidTimeFormatException, TimeNotHourlyException {"},{"lineNumber":31,"author":{"gitId":"wish2023"},"content":"        setStringAttributes(recurrenceString, startTimeString);"},{"lineNumber":32,"author":{"gitId":"wish2023"},"content":"        setRecurrence(recurrenceString);"},{"lineNumber":33,"author":{"gitId":"wish2023"},"content":"        if (isNonEmptyTime(startTimeString)) {"},{"lineNumber":34,"author":{"gitId":"wish2023"},"content":"            setStartTime(startTimeString);"},{"lineNumber":35,"author":{"gitId":"wish2023"},"content":"            checkHourlyTime();"},{"lineNumber":36,"author":{"gitId":"wish2023"},"content":"            checkDatePassed();"},{"lineNumber":37,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":40,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"wish2023"},"content":"     * Checks if user\u0027s time is hourly."},{"lineNumber":42,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"wish2023"},"content":"     * @throws TimeNotHourlyException Exception thrown if time is not hourly"},{"lineNumber":44,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"wish2023"},"content":"    private void checkHourlyTime() throws TimeNotHourlyException {"},{"lineNumber":46,"author":{"gitId":"wish2023"},"content":"        if (startTime.getMinute() !\u003d 0) {"},{"lineNumber":47,"author":{"gitId":"wish2023"},"content":"            throw new TimeNotHourlyException();"},{"lineNumber":48,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":51,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"wish2023"},"content":"     * Checks if the starting time of a task is not empty."},{"lineNumber":53,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"wish2023"},"content":"     * @param startTimeString the starting time of a task as a String"},{"lineNumber":55,"author":{"gitId":"wish2023"},"content":"     * @return whether the starting time of a task is not empty."},{"lineNumber":56,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"wish2023"},"content":"    private boolean isNonEmptyTime(String startTimeString) {"},{"lineNumber":58,"author":{"gitId":"wish2023"},"content":"        return !startTimeString.equals(\"\");"},{"lineNumber":59,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":61,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"wish2023"},"content":"     * Sets the starting time to be converted from its parameter as a String"},{"lineNumber":63,"author":{"gitId":"wish2023"},"content":"     * to LocalTime."},{"lineNumber":64,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"wish2023"},"content":"     * @param startTimeString the starting time of a task as a String"},{"lineNumber":66,"author":{"gitId":"wish2023"},"content":"     * @throws InvalidTimeFormatException Exception thrown when user mistypes time"},{"lineNumber":67,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"wish2023"},"content":"    private void setStartTime(String startTimeString) throws InvalidTimeFormatException {"},{"lineNumber":69,"author":{"gitId":"wish2023"},"content":"        try {"},{"lineNumber":70,"author":{"gitId":"wish2023"},"content":"            this.startTime \u003d LocalTime.parse(startTimeString, timeFormatter);"},{"lineNumber":71,"author":{"gitId":"wish2023"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":72,"author":{"gitId":"wish2023"},"content":"            throw new InvalidTimeFormatException();"},{"lineNumber":73,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":76,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"wish2023"},"content":"     * Attempts to set recurrence."},{"lineNumber":78,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"wish2023"},"content":"     * @param recurrenceString the date the task will occur"},{"lineNumber":80,"author":{"gitId":"wish2023"},"content":"     * @throws InvalidRecurrenceException if the user mistypes recurrence"},{"lineNumber":81,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"wish2023"},"content":"    private void setRecurrence(String recurrenceString) throws InvalidRecurrenceException {"},{"lineNumber":83,"author":{"gitId":"wish2023"},"content":"        try {"},{"lineNumber":84,"author":{"gitId":"wish2023"},"content":"            checkDefaultDate(recurrenceString);"},{"lineNumber":85,"author":{"gitId":"wish2023"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":86,"author":{"gitId":"wish2023"},"content":"            throw new InvalidRecurrenceException();"},{"lineNumber":87,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":90,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"wish2023"},"content":"     * Sets recurrence to be its parameter but as a LocalDate."},{"lineNumber":92,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"wish2023"},"content":"     * @param recurrenceString the date the task will occur"},{"lineNumber":94,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"wish2023"},"content":"    private void checkDefaultDate(String recurrenceString) {"},{"lineNumber":96,"author":{"gitId":"wish2023"},"content":"        if (isDayOfWeek(recurrenceString.toLowerCase())) {"},{"lineNumber":97,"author":{"gitId":"wish2023"},"content":"            return;"},{"lineNumber":98,"author":{"gitId":"wish2023"},"content":"        } else if (recurrenceString.toLowerCase().equals(TODAY)) {"},{"lineNumber":99,"author":{"gitId":"wish2023"},"content":"            this.recurrence \u003d LocalDate.now();"},{"lineNumber":100,"author":{"gitId":"wish2023"},"content":"        } else if (recurrenceString.length() \u003d\u003d DD_MM_YYYY.length()) {"},{"lineNumber":101,"author":{"gitId":"wish2023"},"content":"            this.recurrence \u003d LocalDate.parse(recurrenceString, dateFormatter);"},{"lineNumber":102,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":105,"author":{"gitId":"wish2023"},"content":"    private boolean isDayOfWeek(String recurrenceString) {"},{"lineNumber":106,"author":{"gitId":"wish2023"},"content":"        return recurrenceString.equals(\"sunday\")"},{"lineNumber":107,"author":{"gitId":"wish2023"},"content":"                || recurrenceString.equals(\"monday\")"},{"lineNumber":108,"author":{"gitId":"wish2023"},"content":"                || recurrenceString.equals(\"tuesday\")"},{"lineNumber":109,"author":{"gitId":"wish2023"},"content":"                || recurrenceString.equals(\"wednesday\")"},{"lineNumber":110,"author":{"gitId":"wish2023"},"content":"                || recurrenceString.equals(\"thursday\")"},{"lineNumber":111,"author":{"gitId":"wish2023"},"content":"                || recurrenceString.equals(\"friday\")"},{"lineNumber":112,"author":{"gitId":"wish2023"},"content":"                || recurrenceString.equals(\"saturday\");"},{"lineNumber":113,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":115,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"wish2023"},"content":"     * Sets the String type attributes of DateChecker."},{"lineNumber":117,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":118,"author":{"gitId":"wish2023"},"content":"     * @param recurrenceString  the date the task will occur"},{"lineNumber":119,"author":{"gitId":"wish2023"},"content":"     * @param startTimeString   the starting time of a task as a String"},{"lineNumber":120,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"wish2023"},"content":"    private void setStringAttributes(String recurrenceString, String startTimeString) {"},{"lineNumber":122,"author":{"gitId":"wish2023"},"content":"        this.recurrenceString \u003d recurrenceString;"},{"lineNumber":123,"author":{"gitId":"wish2023"},"content":"        this.startTimeString \u003d startTimeString;"},{"lineNumber":124,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":126,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"wish2023"},"content":"     * Checks if a user\u0027s date has already passed."},{"lineNumber":128,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":129,"author":{"gitId":"wish2023"},"content":"     * @throws DateHasPassedException Exception thrown if the user\u0027s date has already passed"},{"lineNumber":130,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"wish2023"},"content":"    private void checkDatePassed() throws DateHasPassedException {"},{"lineNumber":132,"author":{"gitId":"wish2023"},"content":"        if (recurrence \u003d\u003d null) {"},{"lineNumber":133,"author":{"gitId":"wish2023"},"content":"            return;"},{"lineNumber":134,"author":{"gitId":"wish2023"},"content":"        } else if (recurrence.compareTo(LocalDate.now()) \u003c 0) {"},{"lineNumber":135,"author":{"gitId":"wish2023"},"content":"            throw new DateHasPassedException();"},{"lineNumber":136,"author":{"gitId":"wish2023"},"content":"        } else if (recurrence.compareTo(LocalDate.now()) \u003d\u003d 0) {"},{"lineNumber":137,"author":{"gitId":"wish2023"},"content":"            checkStartTime();"},{"lineNumber":138,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":141,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"wish2023"},"content":"     * Checks if a user\u0027s time has already passed."},{"lineNumber":143,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":144,"author":{"gitId":"wish2023"},"content":"     * @throws DateHasPassedException Exception thrown if the user\u0027s time has already passed"},{"lineNumber":145,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"wish2023"},"content":"    private void checkStartTime() throws DateHasPassedException {"},{"lineNumber":147,"author":{"gitId":"wish2023"},"content":"        if (startTime.compareTo(LocalTime.now()) \u003c 0) {"},{"lineNumber":148,"author":{"gitId":"wish2023"},"content":"            throw new DateHasPassedException();"},{"lineNumber":149,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"wish2023"},"content":"}"}],"authorContributionMap":{"amanda-chua":1,"daniellimws":2,"wish2023":148}},{"path":"src/main/java/athena/Forecast.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"alstontham"},"content":"package athena;"},{"lineNumber":2,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":3,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"alstontham"},"content":" * Enums representing forecast filters the user can select."},{"lineNumber":5,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":6,"author":{"gitId":"alstontham"},"content":"public enum Forecast {"},{"lineNumber":7,"author":{"gitId":"Kafcis"},"content":"    DAY, WEEK, ALL;"},{"lineNumber":8,"author":{"gitId":"alstontham"},"content":"}"}],"authorContributionMap":{"alstontham":7,"Kafcis":1}},{"path":"src/main/java/athena/Importance.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wish2023"},"content":"package athena;"},{"lineNumber":2,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":3,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"alstontham"},"content":" * Enums representing importance levels that users can filter tasks by."},{"lineNumber":5,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":6,"author":{"gitId":"wish2023"},"content":"public enum Importance {"},{"lineNumber":7,"author":{"gitId":"alstontham"},"content":"    HIGH, MEDIUM, LOW, ALL;"},{"lineNumber":8,"author":{"gitId":"wish2023"},"content":"}"}],"authorContributionMap":{"alstontham":4,"wish2023":4}},{"path":"src/main/java/athena/Log.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Kafcis"},"content":"package athena;"},{"lineNumber":2,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":3,"author":{"gitId":"Kafcis"},"content":"import athena.task.Task;"},{"lineNumber":4,"author":{"gitId":"Kafcis"},"content":"import athena.task.TimeData;"},{"lineNumber":5,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":6,"author":{"gitId":"Kafcis"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"Kafcis"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":9,"author":{"gitId":"Kafcis"},"content":"public class Log {"},{"lineNumber":10,"author":{"gitId":"Kafcis"},"content":"    private ArrayList\u003cInteger\u003e numberList;"},{"lineNumber":11,"author":{"gitId":"Kafcis"},"content":"    private int size;"},{"lineNumber":12,"author":{"gitId":"Kafcis"},"content":"    private int start;"},{"lineNumber":13,"author":{"gitId":"Kafcis"},"content":"    private int end;"},{"lineNumber":14,"author":{"gitId":"Kafcis"},"content":"    private ArrayList\u003cTask\u003e carryOverTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":15,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":16,"author":{"gitId":"Kafcis"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Kafcis"},"content":"     * Makes a record of the task allocation."},{"lineNumber":18,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"Kafcis"},"content":"     * @param start start time of log"},{"lineNumber":20,"author":{"gitId":"Kafcis"},"content":"     * @param end end time of log"},{"lineNumber":21,"author":{"gitId":"Kafcis"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Kafcis"},"content":"    public Log(int start, int end) {"},{"lineNumber":23,"author":{"gitId":"Kafcis"},"content":"        this.size \u003d end - start;"},{"lineNumber":24,"author":{"gitId":"Kafcis"},"content":"        this.numberList \u003d new ArrayList\u003cInteger\u003e((Collections.nCopies(size, -1)));"},{"lineNumber":25,"author":{"gitId":"Kafcis"},"content":"        this.start \u003d start;"},{"lineNumber":26,"author":{"gitId":"Kafcis"},"content":"        this.end \u003d end;"},{"lineNumber":27,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":29,"author":{"gitId":"Kafcis"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Kafcis"},"content":"     * Places the taskNumber in the log."},{"lineNumber":31,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"Kafcis"},"content":"     * @param pos position of the number in the record"},{"lineNumber":33,"author":{"gitId":"Kafcis"},"content":"     * @param number taskNumber of the associated task"},{"lineNumber":34,"author":{"gitId":"Kafcis"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Kafcis"},"content":"    public void setNumber(int pos, int number) {"},{"lineNumber":36,"author":{"gitId":"Kafcis"},"content":"        numberList.set(pos, number);"},{"lineNumber":37,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":39,"author":{"gitId":"Kafcis"},"content":"    public ArrayList\u003cInteger\u003e getNumberList() {"},{"lineNumber":40,"author":{"gitId":"Kafcis"},"content":"        return this.numberList;"},{"lineNumber":41,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":43,"author":{"gitId":"Kafcis"},"content":"    public void setNumberList(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":44,"author":{"gitId":"Kafcis"},"content":"        int space \u003d end - start;"},{"lineNumber":45,"author":{"gitId":"Kafcis"},"content":"        for (Task currTask : taskList) {"},{"lineNumber":46,"author":{"gitId":"Kafcis"},"content":"            int span \u003d currTask.getTimeInfo().getDuration();"},{"lineNumber":47,"author":{"gitId":"Kafcis"},"content":"            if (span \u003c\u003d space) {"},{"lineNumber":48,"author":{"gitId":"Kafcis"},"content":"                placeTask(space, currTask, span);"},{"lineNumber":49,"author":{"gitId":"Kafcis"},"content":"                space -\u003d span;"},{"lineNumber":50,"author":{"gitId":"Kafcis"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"Kafcis"},"content":"            if (space \u003d\u003d 0) {"},{"lineNumber":52,"author":{"gitId":"Kafcis"},"content":"                break;"},{"lineNumber":53,"author":{"gitId":"Kafcis"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":57,"author":{"gitId":"Kafcis"},"content":"    private void placeTask(int space, Task currTask, int span) {"},{"lineNumber":58,"author":{"gitId":"Kafcis"},"content":"        int taskNumber \u003d currTask.getNumber();"},{"lineNumber":59,"author":{"gitId":"Kafcis"},"content":"        for (int i \u003d 0; i \u003c span; i++) {"},{"lineNumber":60,"author":{"gitId":"Kafcis"},"content":"            int relativePos \u003d end - space - start;"},{"lineNumber":61,"author":{"gitId":"Kafcis"},"content":"            numberList.set(i + relativePos, taskNumber);"},{"lineNumber":62,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":65,"author":{"gitId":"Kafcis"},"content":"    public void setFixedTasks(ArrayList\u003cTask\u003e fixedTaskList) {"},{"lineNumber":66,"author":{"gitId":"Kafcis"},"content":"        for (Task currTask : fixedTaskList) {"},{"lineNumber":67,"author":{"gitId":"Kafcis"},"content":"            int tag \u003d currTask.getNumber();"},{"lineNumber":68,"author":{"gitId":"Kafcis"},"content":"            TimeData timeInfo \u003d currTask.getTimeInfo();"},{"lineNumber":69,"author":{"gitId":"Kafcis"},"content":"            for (int i \u003d 0; i \u003c timeInfo.getDuration(); i++) {"},{"lineNumber":70,"author":{"gitId":"Kafcis"},"content":"                this.setNumber(timeInfo.getStartTime().getHour() + i, tag);"},{"lineNumber":71,"author":{"gitId":"Kafcis"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":74,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":76,"author":{"gitId":"Kafcis"},"content":"    public boolean hasSpace() {"},{"lineNumber":77,"author":{"gitId":"Kafcis"},"content":"        return numberList.contains(-1);"},{"lineNumber":78,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":80,"author":{"gitId":"Kafcis"},"content":"    public int getSpaceNumber() {"},{"lineNumber":81,"author":{"gitId":"Kafcis"},"content":"        return numberList.indexOf(-1);"},{"lineNumber":82,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":84,"author":{"gitId":"Kafcis"},"content":"    public int getStart(int start) {"},{"lineNumber":85,"author":{"gitId":"Kafcis"},"content":"        return numberList.get(start);"},{"lineNumber":86,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":88,"author":{"gitId":"Kafcis"},"content":"    public ArrayList\u003cTask\u003e getCarryOverTasks() {"},{"lineNumber":89,"author":{"gitId":"Kafcis"},"content":"        return this.carryOverTasks;"},{"lineNumber":90,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":92,"author":{"gitId":"Kafcis"},"content":"    public Log(TimeSlot currSlot, ArrayList\u003cTask\u003e undefinedTimeTasks) {"},{"lineNumber":93,"author":{"gitId":"Kafcis"},"content":"        this.start \u003d currSlot.getStart();"},{"lineNumber":94,"author":{"gitId":"Kafcis"},"content":"        this.end \u003d currSlot.getEnd();"},{"lineNumber":95,"author":{"gitId":"Kafcis"},"content":"        this.carryOverTasks \u003d (ArrayList\u003cTask\u003e) undefinedTimeTasks.clone();"},{"lineNumber":96,"author":{"gitId":"Kafcis"},"content":"        Log currentLog \u003d new Log(currSlot.getStart(), currSlot.getEnd());"},{"lineNumber":97,"author":{"gitId":"Kafcis"},"content":"        Log bestLog \u003d currentLog;"},{"lineNumber":98,"author":{"gitId":"Kafcis"},"content":"        boolean hasUsableVacancy \u003d true;"},{"lineNumber":99,"author":{"gitId":"Kafcis"},"content":"        while (hasUsableVacancy) {"},{"lineNumber":100,"author":{"gitId":"Kafcis"},"content":"            currentLog \u003d new Log(currSlot.getStart(), currSlot.getEnd());"},{"lineNumber":101,"author":{"gitId":"Kafcis"},"content":"            currentLog.setNumberList(undefinedTimeTasks);"},{"lineNumber":102,"author":{"gitId":"Kafcis"},"content":"            hasUsableVacancy \u003d currentLog.hasSpace();"},{"lineNumber":103,"author":{"gitId":"Kafcis"},"content":"            if ((bestLog.getSpaceNumber() \u003c currentLog.getSpaceNumber()) | !hasUsableVacancy) {"},{"lineNumber":104,"author":{"gitId":"Kafcis"},"content":"                bestLog \u003d currentLog;"},{"lineNumber":105,"author":{"gitId":"Kafcis"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"Kafcis"},"content":"            if (!undefinedTimeTasks.isEmpty()) {"},{"lineNumber":107,"author":{"gitId":"Kafcis"},"content":"                undefinedTimeTasks.remove(0);"},{"lineNumber":108,"author":{"gitId":"Kafcis"},"content":"            } else {"},{"lineNumber":109,"author":{"gitId":"Kafcis"},"content":"                break;"},{"lineNumber":110,"author":{"gitId":"Kafcis"},"content":"            }"},{"lineNumber":111,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"Kafcis"},"content":"        this.numberList \u003d bestLog.getNumberList();"},{"lineNumber":113,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":115,"author":{"gitId":"Kafcis"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"Kafcis"},"content":"     * Removes the assigned tasks from the remaining tasks."},{"lineNumber":117,"author":{"gitId":"Kafcis"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"Kafcis"},"content":"    public void removeAssignedTasks(TaskList taskList) {"},{"lineNumber":119,"author":{"gitId":"Kafcis"},"content":"        for (int taskNumber : this.numberList) {"},{"lineNumber":120,"author":{"gitId":"Kafcis"},"content":"            try {"},{"lineNumber":121,"author":{"gitId":"Kafcis"},"content":"                this.carryOverTasks.remove(taskList.getTaskFromNumber(taskNumber));"},{"lineNumber":122,"author":{"gitId":"Kafcis"},"content":"            } catch (Exception e) {"},{"lineNumber":123,"author":{"gitId":"Kafcis"},"content":"                //do nothing"},{"lineNumber":124,"author":{"gitId":"Kafcis"},"content":"            }"},{"lineNumber":125,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":128,"author":{"gitId":"Kafcis"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"Kafcis"},"content":"     * Assigns the times to the tasks."},{"lineNumber":130,"author":{"gitId":"Kafcis"},"content":"     * @param start beginning position"},{"lineNumber":131,"author":{"gitId":"Kafcis"},"content":"     * @param bestLog log containing the order of the taskNumbers"},{"lineNumber":132,"author":{"gitId":"Kafcis"},"content":"     */"},{"lineNumber":133,"author":{"gitId":"Kafcis"},"content":"    public void populateLog(int start, Log bestLog) {"},{"lineNumber":134,"author":{"gitId":"Kafcis"},"content":"        int count \u003d 0;"},{"lineNumber":135,"author":{"gitId":"Kafcis"},"content":"        for (int taskNumber : bestLog.getNumberList()) {"},{"lineNumber":136,"author":{"gitId":"Kafcis"},"content":"            this.getNumberList().set(count + start, taskNumber);"},{"lineNumber":137,"author":{"gitId":"Kafcis"},"content":"            count++;"},{"lineNumber":138,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"Kafcis"},"content":"}"},{"lineNumber":141,"author":{"gitId":"Kafcis"},"content":""}],"authorContributionMap":{"Kafcis":141}},{"path":"src/main/java/athena/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"amanda-chua"},"content":"package athena;"},{"lineNumber":2,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":3,"author":{"gitId":"amanda-chua"},"content":"import athena.commands.AddCommand;"},{"lineNumber":4,"author":{"gitId":"amanda-chua"},"content":"import athena.commands.Command;"},{"lineNumber":5,"author":{"gitId":"amanda-chua"},"content":"import athena.commands.DeleteCommand;"},{"lineNumber":6,"author":{"gitId":"amanda-chua"},"content":"import athena.commands.DoneCommand;"},{"lineNumber":7,"author":{"gitId":"amanda-chua"},"content":"import athena.commands.EditCommand;"},{"lineNumber":8,"author":{"gitId":"amanda-chua"},"content":"import athena.commands.ExitCommand;"},{"lineNumber":9,"author":{"gitId":"amanda-chua"},"content":"import athena.commands.HelpCommand;"},{"lineNumber":10,"author":{"gitId":"amanda-chua"},"content":"import athena.commands.ListCommand;"},{"lineNumber":11,"author":{"gitId":"amanda-chua"},"content":"import athena.commands.ViewCommand;"},{"lineNumber":12,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":13,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.DeleteNoIndexException;"},{"lineNumber":14,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.DoneNoIndexException;"},{"lineNumber":15,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.EditNoIndexException;"},{"lineNumber":16,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.InvalidCommandException;"},{"lineNumber":17,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.InvalidForecastException;"},{"lineNumber":18,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.InvalidImportanceException;"},{"lineNumber":19,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.TaskNotFoundException;"},{"lineNumber":20,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.ViewNoIndexException;"},{"lineNumber":21,"author":{"gitId":"daniellimws"},"content":"import athena.task.Task;"},{"lineNumber":22,"author":{"gitId":"wish2023"},"content":"import athena.task.taskfilter.FilterCalculator;"},{"lineNumber":23,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":24,"author":{"gitId":"amanda-chua"},"content":"import java.util.HashMap;"},{"lineNumber":25,"author":{"gitId":"amanda-chua"},"content":"import java.util.regex.Matcher;"},{"lineNumber":26,"author":{"gitId":"amanda-chua"},"content":"import java.util.regex.Pattern;"},{"lineNumber":27,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":28,"author":{"gitId":"amanda-chua"},"content":"/**"},{"lineNumber":29,"author":{"gitId":"amanda-chua"},"content":" * Handles parsing of user input."},{"lineNumber":30,"author":{"gitId":"amanda-chua"},"content":" */"},{"lineNumber":31,"author":{"gitId":"amanda-chua"},"content":"public class Parser {"},{"lineNumber":32,"author":{"gitId":"amanda-chua"},"content":"    public static final String COMMAND_WORD_DELIMITER \u003d \" \";"},{"lineNumber":33,"author":{"gitId":"amanda-chua"},"content":"    public static final String NAME_DELIMITER \u003d \"n/\";"},{"lineNumber":34,"author":{"gitId":"amanda-chua"},"content":"    public static final String TIME_DELIMITER \u003d \"t/\";"},{"lineNumber":35,"author":{"gitId":"amanda-chua"},"content":"    public static final String DURATION_DELIMITER \u003d \"d/\";"},{"lineNumber":36,"author":{"gitId":"amanda-chua"},"content":"    public static final String DEADLINE_DELIMITER \u003d \"D/\";"},{"lineNumber":37,"author":{"gitId":"amanda-chua"},"content":"    public static final String RECURRENCE_DELIMITER \u003d \"r/\";"},{"lineNumber":38,"author":{"gitId":"amanda-chua"},"content":"    public static final String IMPORTANCE_DELIMITER \u003d \"i/\";"},{"lineNumber":39,"author":{"gitId":"amanda-chua"},"content":"    public static final String ADDITIONAL_NOTES_DELIMITER \u003d \"a/\";"},{"lineNumber":40,"author":{"gitId":"amanda-chua"},"content":"    public static final String FORECAST_DELIMITER \u003d \"f/\";"},{"lineNumber":41,"author":{"gitId":"amanda-chua"},"content":"    public static final String EMPTY_STRING \u003d \"\";"},{"lineNumber":42,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":43,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"amanda-chua"},"content":"     * Get parameters description."},{"lineNumber":45,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"amanda-chua"},"content":"     * @param taskInformation String representing task information"},{"lineNumber":47,"author":{"gitId":"amanda-chua"},"content":"     * @param delimiter       String representing parameter delimiter"},{"lineNumber":48,"author":{"gitId":"Kafcis"},"content":"     * @param paramPosition   int representing position of parameter"},{"lineNumber":49,"author":{"gitId":"amanda-chua"},"content":"     * @param defaultValue    String representing default value"},{"lineNumber":50,"author":{"gitId":"amanda-chua"},"content":"     * @return Description of parameter"},{"lineNumber":51,"author":{"gitId":"amanda-chua"},"content":"     * @throws InvalidCommandException Exception thrown when the the user does not specify a valid command"},{"lineNumber":52,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"amanda-chua"},"content":"    public String getParameterDesc(String taskInformation, String delimiter, int paramPosition,"},{"lineNumber":54,"author":{"gitId":"amanda-chua"},"content":"                                   String defaultValue) throws InvalidCommandException {"},{"lineNumber":55,"author":{"gitId":"amanda-chua"},"content":"        String param;"},{"lineNumber":56,"author":{"gitId":"amanda-chua"},"content":"        if (paramPosition \u003d\u003d -1) {"},{"lineNumber":57,"author":{"gitId":"amanda-chua"},"content":"            param \u003d defaultValue;"},{"lineNumber":58,"author":{"gitId":"amanda-chua"},"content":"        } else {"},{"lineNumber":59,"author":{"gitId":"amanda-chua"},"content":"            String[] retrieveParamInfo \u003d taskInformation.split(delimiter, 2);"},{"lineNumber":60,"author":{"gitId":"amanda-chua"},"content":"            CharSequence retrievedParamInfo \u003d retrieveParamInfo[1];"},{"lineNumber":61,"author":{"gitId":"amanda-chua"},"content":"            String patternStr \u003d \"\\\\s\\\\w+\\\\/\";"},{"lineNumber":62,"author":{"gitId":"amanda-chua"},"content":"            Pattern pattern \u003d Pattern.compile(patternStr);"},{"lineNumber":63,"author":{"gitId":"amanda-chua"},"content":"            Matcher matcher \u003d pattern.matcher(retrievedParamInfo);"},{"lineNumber":64,"author":{"gitId":"amanda-chua"},"content":"            if (matcher.find()) {"},{"lineNumber":65,"author":{"gitId":"amanda-chua"},"content":"                int nextParam \u003d matcher.start();"},{"lineNumber":66,"author":{"gitId":"daniellimws"},"content":"                try {"},{"lineNumber":67,"author":{"gitId":"amanda-chua"},"content":"                    param \u003d retrievedParamInfo.subSequence(0, (nextParam)).toString();"},{"lineNumber":68,"author":{"gitId":"daniellimws"},"content":"                } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":69,"author":{"gitId":"daniellimws"},"content":"                    throw new InvalidCommandException();"},{"lineNumber":70,"author":{"gitId":"daniellimws"},"content":"                }"},{"lineNumber":71,"author":{"gitId":"amanda-chua"},"content":"            } else {"},{"lineNumber":72,"author":{"gitId":"amanda-chua"},"content":"                param \u003d retrievedParamInfo.toString();"},{"lineNumber":73,"author":{"gitId":"amanda-chua"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"amanda-chua"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"amanda-chua"},"content":"        return param;"},{"lineNumber":76,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":78,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"amanda-chua"},"content":"     * Parses user input when command is add."},{"lineNumber":80,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":81,"author":{"gitId":"amanda-chua"},"content":"     * @param taskInfo      String representing task information"},{"lineNumber":82,"author":{"gitId":"Kafcis"},"content":"     * @param namePos       int representing position of name parameter"},{"lineNumber":83,"author":{"gitId":"Kafcis"},"content":"     * @param timePos       int representing position of time parameter"},{"lineNumber":84,"author":{"gitId":"Kafcis"},"content":"     * @param durationPos   int representing position of duration parameter"},{"lineNumber":85,"author":{"gitId":"Kafcis"},"content":"     * @param deadlinePos   int representing position of deadline parameter"},{"lineNumber":86,"author":{"gitId":"Kafcis"},"content":"     * @param recurrencePos int representing position of recurrence parameter"},{"lineNumber":87,"author":{"gitId":"Kafcis"},"content":"     * @param importancePos int representing position of importance parameter"},{"lineNumber":88,"author":{"gitId":"Kafcis"},"content":"     * @param addNotesPos   int representing position of additional notes parameter"},{"lineNumber":89,"author":{"gitId":"amanda-chua"},"content":"     * @return command object"},{"lineNumber":90,"author":{"gitId":"amanda-chua"},"content":"     * @throws InvalidCommandException    Exception thrown when the the user does not specify a valid command"},{"lineNumber":91,"author":{"gitId":"amanda-chua"},"content":"     * @throws InvalidImportanceException Exception thrown when the user does not specify a valid importance"},{"lineNumber":92,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"amanda-chua"},"content":"    public Command parseAddCommand(String taskInfo, int namePos, int timePos, int durationPos, int deadlinePos,"},{"lineNumber":94,"author":{"gitId":"daniellimws"},"content":"                                   int recurrencePos, int importancePos, int addNotesPos)"},{"lineNumber":95,"author":{"gitId":"daniellimws"},"content":"            throws InvalidCommandException, InvalidImportanceException {"},{"lineNumber":96,"author":{"gitId":"amanda-chua"},"content":"        String name \u003d getParameterDesc(taskInfo, NAME_DELIMITER, namePos, EMPTY_STRING);"},{"lineNumber":97,"author":{"gitId":"amanda-chua"},"content":"        String time \u003d getParameterDesc(taskInfo, TIME_DELIMITER, timePos, EMPTY_STRING);"},{"lineNumber":98,"author":{"gitId":"amanda-chua"},"content":"        boolean isFlexible \u003d (time.equals(EMPTY_STRING));"},{"lineNumber":99,"author":{"gitId":"Kafcis"},"content":"        String durationDefault \u003d \"1\";"},{"lineNumber":100,"author":{"gitId":"amanda-chua"},"content":"        String duration \u003d getParameterDesc(taskInfo, DURATION_DELIMITER, durationPos, durationDefault);"},{"lineNumber":101,"author":{"gitId":"amanda-chua"},"content":"        String deadlineDefault \u003d \"No deadline\";"},{"lineNumber":102,"author":{"gitId":"amanda-chua"},"content":"        String deadline \u003d getParameterDesc(taskInfo, DEADLINE_DELIMITER, deadlinePos, deadlineDefault);"},{"lineNumber":103,"author":{"gitId":"alstontham"},"content":"        String recurrenceDefault \u003d \"today\";"},{"lineNumber":104,"author":{"gitId":"amanda-chua"},"content":"        String recurrence \u003d getParameterDesc(taskInfo, RECURRENCE_DELIMITER, recurrencePos, recurrenceDefault);"},{"lineNumber":105,"author":{"gitId":"amanda-chua"},"content":"        String importanceDefault \u003d \"medium\";"},{"lineNumber":106,"author":{"gitId":"daniellimws"},"content":"        String importanceString \u003d getParameterDesc(taskInfo, IMPORTANCE_DELIMITER, importancePos, importanceDefault);"},{"lineNumber":107,"author":{"gitId":"daniellimws"},"content":"        Importance importance;"},{"lineNumber":108,"author":{"gitId":"daniellimws"},"content":"        try {"},{"lineNumber":109,"author":{"gitId":"daniellimws"},"content":"            importance \u003d Importance.valueOf(importanceString.toUpperCase());"},{"lineNumber":110,"author":{"gitId":"daniellimws"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":111,"author":{"gitId":"daniellimws"},"content":"            throw new InvalidImportanceException();"},{"lineNumber":112,"author":{"gitId":"daniellimws"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"amanda-chua"},"content":"        String notesDefault \u003d \"No notes\";"},{"lineNumber":114,"author":{"gitId":"amanda-chua"},"content":"        String notes \u003d getParameterDesc(taskInfo, ADDITIONAL_NOTES_DELIMITER, addNotesPos, notesDefault);"},{"lineNumber":115,"author":{"gitId":"amanda-chua"},"content":"        return new AddCommand(name, time, duration, deadline, recurrence, importance, notes, isFlexible);"},{"lineNumber":116,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":118,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"amanda-chua"},"content":"     * Parses user input when command is edit."},{"lineNumber":120,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":121,"author":{"gitId":"amanda-chua"},"content":"     * @param taskInfo      String representing task information"},{"lineNumber":122,"author":{"gitId":"Kafcis"},"content":"     * @param namePos       int representing position of name parameter"},{"lineNumber":123,"author":{"gitId":"Kafcis"},"content":"     * @param timePos       int representing position of time parameter"},{"lineNumber":124,"author":{"gitId":"Kafcis"},"content":"     * @param durationPos   int representing position of duration parameter"},{"lineNumber":125,"author":{"gitId":"Kafcis"},"content":"     * @param deadlinePos   int representing position of deadline parameter"},{"lineNumber":126,"author":{"gitId":"Kafcis"},"content":"     * @param recurrencePos int representing position of recurrence parameter"},{"lineNumber":127,"author":{"gitId":"Kafcis"},"content":"     * @param importancePos int representing position of importance parameter"},{"lineNumber":128,"author":{"gitId":"Kafcis"},"content":"     * @param addNotesPos   int representing position of additional notes parameter"},{"lineNumber":129,"author":{"gitId":"amanda-chua"},"content":"     * @return command object"},{"lineNumber":130,"author":{"gitId":"alstontham"},"content":"     * @throws TaskNotFoundException      Exception thrown when the program is unable to find a task at the index"},{"lineNumber":131,"author":{"gitId":"alstontham"},"content":"     *                                    specified by the user"},{"lineNumber":132,"author":{"gitId":"alstontham"},"content":"     * @throws EditNoIndexException       Exception thrown when the user does not specify an index of the task they"},{"lineNumber":133,"author":{"gitId":"alstontham"},"content":"     *                                    want to edit"},{"lineNumber":134,"author":{"gitId":"amanda-chua"},"content":"     * @throws InvalidCommandException    Exception thrown when the the user does not specify a valid command"},{"lineNumber":135,"author":{"gitId":"amanda-chua"},"content":"     * @throws InvalidImportanceException Exception thrown when the user does not specify a valid importance"},{"lineNumber":136,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"amanda-chua"},"content":"    public Command parseEditCommand(String taskInfo, int namePos, int timePos, int durationPos, int deadlinePos,"},{"lineNumber":138,"author":{"gitId":"amanda-chua"},"content":"                                    int recurrencePos, int importancePos, int addNotesPos, TaskList taskList)"},{"lineNumber":139,"author":{"gitId":"amanda-chua"},"content":"            throws TaskNotFoundException, EditNoIndexException, InvalidCommandException, InvalidImportanceException {"},{"lineNumber":140,"author":{"gitId":"daniellimws"},"content":"        int number \u003d getNumber(taskInfo);"},{"lineNumber":141,"author":{"gitId":"daniellimws"},"content":"        Task task \u003d taskList.getTaskFromNumber(number);"},{"lineNumber":142,"author":{"gitId":"daniellimws"},"content":"        String name \u003d getParameterDesc(taskInfo, NAME_DELIMITER, namePos, task.getName());"},{"lineNumber":143,"author":{"gitId":"daniellimws"},"content":"        String time \u003d getParameterDesc(taskInfo, TIME_DELIMITER, timePos, task.getTimeInfo().getStartTimeString());"},{"lineNumber":144,"author":{"gitId":"alstontham"},"content":"        String duration \u003d getParameterDesc(taskInfo, DURATION_DELIMITER, durationPos,"},{"lineNumber":145,"author":{"gitId":"daniellimws"},"content":"                task.getTimeInfo().getDurationString());"},{"lineNumber":146,"author":{"gitId":"daniellimws"},"content":"        String deadline \u003d getParameterDesc(taskInfo, DEADLINE_DELIMITER, deadlinePos, task.getTimeInfo().getDeadline());"},{"lineNumber":147,"author":{"gitId":"daniellimws"},"content":"        String recurrence \u003d getParameterDesc(taskInfo, RECURRENCE_DELIMITER, recurrencePos,"},{"lineNumber":148,"author":{"gitId":"daniellimws"},"content":"                task.getTimeInfo().getRecurrence());"},{"lineNumber":149,"author":{"gitId":"daniellimws"},"content":"        String importanceString \u003d getParameterDesc(taskInfo, IMPORTANCE_DELIMITER, importancePos,"},{"lineNumber":150,"author":{"gitId":"daniellimws"},"content":"                task.getImportance().toString());"},{"lineNumber":151,"author":{"gitId":"daniellimws"},"content":"        Importance importance;"},{"lineNumber":152,"author":{"gitId":"daniellimws"},"content":"        try {"},{"lineNumber":153,"author":{"gitId":"daniellimws"},"content":"            importance \u003d Importance.valueOf(importanceString.toUpperCase());"},{"lineNumber":154,"author":{"gitId":"daniellimws"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":155,"author":{"gitId":"daniellimws"},"content":"            throw new InvalidImportanceException();"},{"lineNumber":156,"author":{"gitId":"daniellimws"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"alstontham"},"content":"        String notes \u003d getParameterDesc(taskInfo, ADDITIONAL_NOTES_DELIMITER, addNotesPos,"},{"lineNumber":158,"author":{"gitId":"daniellimws"},"content":"                taskList.getTaskFromNumber(number).getNotes());"},{"lineNumber":159,"author":{"gitId":"daniellimws"},"content":"        return new EditCommand(number, name, time, duration, deadline, recurrence, importance, notes);"},{"lineNumber":160,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":162,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"alstontham"},"content":"     * Parses task information to get task number."},{"lineNumber":164,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":165,"author":{"gitId":"amanda-chua"},"content":"     * @param taskInfo String representing task information"},{"lineNumber":166,"author":{"gitId":"alstontham"},"content":"     * @return task number"},{"lineNumber":167,"author":{"gitId":"alstontham"},"content":"     * @throws EditNoIndexException Exception thrown when the user does not specify an index of the task they"},{"lineNumber":168,"author":{"gitId":"alstontham"},"content":"     *                              want to edit"},{"lineNumber":169,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":170,"author":{"gitId":"amanda-chua"},"content":"    private int getNumber(String taskInfo) throws EditNoIndexException {"},{"lineNumber":171,"author":{"gitId":"alstontham"},"content":"        try {"},{"lineNumber":172,"author":{"gitId":"daniellimws"},"content":"            int numberNextSlash \u003d taskInfo.indexOf(\"/\");"},{"lineNumber":173,"author":{"gitId":"daniellimws"},"content":"            int number \u003d Integer.parseInt(taskInfo.substring(0, (numberNextSlash - 2)));"},{"lineNumber":174,"author":{"gitId":"daniellimws"},"content":"            return number;"},{"lineNumber":175,"author":{"gitId":"daniellimws"},"content":"        } catch (StringIndexOutOfBoundsException | NumberFormatException e) {"},{"lineNumber":176,"author":{"gitId":"alstontham"},"content":"            throw new EditNoIndexException();"},{"lineNumber":177,"author":{"gitId":"alstontham"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":180,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":181,"author":{"gitId":"amanda-chua"},"content":"     * Parses user input when command is list."},{"lineNumber":182,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":183,"author":{"gitId":"amanda-chua"},"content":"     * @param taskInfo      String representing task information"},{"lineNumber":184,"author":{"gitId":"Kafcis"},"content":"     * @param importancePos int representing position of importance parameter"},{"lineNumber":185,"author":{"gitId":"Kafcis"},"content":"     * @param forecastPos   int representing position of forecast parameter"},{"lineNumber":186,"author":{"gitId":"amanda-chua"},"content":"     * @return command object"},{"lineNumber":187,"author":{"gitId":"amanda-chua"},"content":"     * @throws InvalidCommandException    Exception thrown when the the user does not specify a valid command"},{"lineNumber":188,"author":{"gitId":"amanda-chua"},"content":"     * @throws InvalidForecastException   Exception thrown when the user does not specify a valid forecast"},{"lineNumber":189,"author":{"gitId":"amanda-chua"},"content":"     * @throws InvalidImportanceException Exception thrown when the user does not specify a valid importance"},{"lineNumber":190,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":191,"author":{"gitId":"amanda-chua"},"content":"    public Command parseListCommand(String taskInfo, int importancePos, int forecastPos)"},{"lineNumber":192,"author":{"gitId":"amanda-chua"},"content":"            throws InvalidCommandException, InvalidForecastException, InvalidImportanceException {"},{"lineNumber":193,"author":{"gitId":"alstontham"},"content":"        String importanceDefault \u003d \"ALL\";"},{"lineNumber":194,"author":{"gitId":"daniellimws"},"content":"        String forecastDefault \u003d \"WEEK\";"},{"lineNumber":195,"author":{"gitId":"wish2023"},"content":"        String importanceString \u003d getParameterDesc(taskInfo, IMPORTANCE_DELIMITER, importancePos, importanceDefault);"},{"lineNumber":196,"author":{"gitId":"wish2023"},"content":"        String forecastString \u003d getParameterDesc(taskInfo, FORECAST_DELIMITER, forecastPos, forecastDefault);"},{"lineNumber":197,"author":{"gitId":"wish2023"},"content":"        FilterCalculator filterCalculator \u003d new FilterCalculator(importanceString, forecastString);"},{"lineNumber":198,"author":{"gitId":"amanda-chua"},"content":"        return new ListCommand(filterCalculator.getImportance(), filterCalculator.getForecast());"},{"lineNumber":199,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":201,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":202,"author":{"gitId":"amanda-chua"},"content":"     * Parses user input when command is done."},{"lineNumber":203,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":204,"author":{"gitId":"amanda-chua"},"content":"     * @param taskInfo String representing task information"},{"lineNumber":205,"author":{"gitId":"amanda-chua"},"content":"     * @return command object"},{"lineNumber":206,"author":{"gitId":"amanda-chua"},"content":"     * @throws DoneNoIndexException Exception thrown when the user does not specify an index of the task they"},{"lineNumber":207,"author":{"gitId":"amanda-chua"},"content":"     *                              want to mark as done"},{"lineNumber":208,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":209,"author":{"gitId":"amanda-chua"},"content":"    public Command parseDoneCommand(String taskInfo) throws DoneNoIndexException {"},{"lineNumber":210,"author":{"gitId":"amanda-chua"},"content":"        try {"},{"lineNumber":211,"author":{"gitId":"amanda-chua"},"content":"            int taskIndex \u003d Integer.parseInt(taskInfo);"},{"lineNumber":212,"author":{"gitId":"amanda-chua"},"content":"            return new DoneCommand(taskIndex);"},{"lineNumber":213,"author":{"gitId":"amanda-chua"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":214,"author":{"gitId":"amanda-chua"},"content":"            throw new DoneNoIndexException();"},{"lineNumber":215,"author":{"gitId":"amanda-chua"},"content":"        }"},{"lineNumber":216,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":218,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":219,"author":{"gitId":"amanda-chua"},"content":"     * Parses user input when command is delete."},{"lineNumber":220,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":221,"author":{"gitId":"amanda-chua"},"content":"     * @param taskInfo String representing task information"},{"lineNumber":222,"author":{"gitId":"amanda-chua"},"content":"     * @return command object"},{"lineNumber":223,"author":{"gitId":"amanda-chua"},"content":"     * @throws DeleteNoIndexException Exception thrown when the user does not specify an index of the task they"},{"lineNumber":224,"author":{"gitId":"amanda-chua"},"content":"     *                                want to delete"},{"lineNumber":225,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":226,"author":{"gitId":"amanda-chua"},"content":"    public Command parseDeleteCommand(String taskInfo) throws DeleteNoIndexException {"},{"lineNumber":227,"author":{"gitId":"amanda-chua"},"content":"        try {"},{"lineNumber":228,"author":{"gitId":"amanda-chua"},"content":"            int taskIndex \u003d Integer.parseInt(taskInfo);"},{"lineNumber":229,"author":{"gitId":"amanda-chua"},"content":"            return new DeleteCommand(taskIndex);"},{"lineNumber":230,"author":{"gitId":"amanda-chua"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":231,"author":{"gitId":"amanda-chua"},"content":"            throw new DeleteNoIndexException();"},{"lineNumber":232,"author":{"gitId":"amanda-chua"},"content":"        }"},{"lineNumber":233,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":234,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":235,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":236,"author":{"gitId":"amanda-chua"},"content":"     * Parses user input when command is view."},{"lineNumber":237,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":238,"author":{"gitId":"amanda-chua"},"content":"     * @param taskInfo String representing task information"},{"lineNumber":239,"author":{"gitId":"amanda-chua"},"content":"     * @return command object"},{"lineNumber":240,"author":{"gitId":"amanda-chua"},"content":"     * @throws ViewNoIndexException Exception thrown when the user does not specify an index of the task they"},{"lineNumber":241,"author":{"gitId":"amanda-chua"},"content":"     *                              want to view"},{"lineNumber":242,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":243,"author":{"gitId":"amanda-chua"},"content":"    public Command parseViewCommand(String taskInfo) throws ViewNoIndexException {"},{"lineNumber":244,"author":{"gitId":"amanda-chua"},"content":"        try {"},{"lineNumber":245,"author":{"gitId":"amanda-chua"},"content":"            int taskIndex \u003d Integer.parseInt(taskInfo);"},{"lineNumber":246,"author":{"gitId":"amanda-chua"},"content":"            return new ViewCommand(taskIndex);"},{"lineNumber":247,"author":{"gitId":"amanda-chua"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":248,"author":{"gitId":"amanda-chua"},"content":"            throw new ViewNoIndexException();"},{"lineNumber":249,"author":{"gitId":"amanda-chua"},"content":"        }"},{"lineNumber":250,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":251,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":252,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":253,"author":{"gitId":"amanda-chua"},"content":"     * Parses user input for shortcut commands."},{"lineNumber":254,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":255,"author":{"gitId":"amanda-chua"},"content":"     * @param userInput String representing command and information of task"},{"lineNumber":256,"author":{"gitId":"amanda-chua"},"content":"     * @return String representing what the shortcut commands meant"},{"lineNumber":257,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":258,"author":{"gitId":"amanda-chua"},"content":"    public String parseShortcutCommands(String userInput) {"},{"lineNumber":259,"author":{"gitId":"amanda-chua"},"content":"        HashMap\u003cString, String\u003e shortcutCommandsWithDetails \u003d new HashMap\u003c\u003e();"},{"lineNumber":260,"author":{"gitId":"amanda-chua"},"content":"        shortcutCommandsWithDetails.put(\"a\", \"add\");"},{"lineNumber":261,"author":{"gitId":"amanda-chua"},"content":"        shortcutCommandsWithDetails.put(\"e\", \"edit\");"},{"lineNumber":262,"author":{"gitId":"amanda-chua"},"content":"        shortcutCommandsWithDetails.put(\"l\", \"list\");"},{"lineNumber":263,"author":{"gitId":"amanda-chua"},"content":"        shortcutCommandsWithDetails.put(\"dn\", \"done\");"},{"lineNumber":264,"author":{"gitId":"amanda-chua"},"content":"        shortcutCommandsWithDetails.put(\"dl\", \"delete\");"},{"lineNumber":265,"author":{"gitId":"amanda-chua"},"content":"        shortcutCommandsWithDetails.put(\"v\", \"view\");"},{"lineNumber":266,"author":{"gitId":"amanda-chua"},"content":"        shortcutCommandsWithDetails.put(\"ex\", \"exit\");"},{"lineNumber":267,"author":{"gitId":"amanda-chua"},"content":"        shortcutCommandsWithDetails.put(\"l3\", \"list i/HIGH\");"},{"lineNumber":268,"author":{"gitId":"amanda-chua"},"content":"        shortcutCommandsWithDetails.put(\"l2\", \"list i/MEDIUM\");"},{"lineNumber":269,"author":{"gitId":"amanda-chua"},"content":"        shortcutCommandsWithDetails.put(\"l1\", \"list i/LOW\");"},{"lineNumber":270,"author":{"gitId":"amanda-chua"},"content":"        shortcutCommandsWithDetails.put(\"lw\", \"list f/WEEK\");"},{"lineNumber":271,"author":{"gitId":"amanda-chua"},"content":"        shortcutCommandsWithDetails.put(\"ld\", \"list f/DAY\");"},{"lineNumber":272,"author":{"gitId":"amanda-chua"},"content":"        shortcutCommandsWithDetails.put(\"la\", \"list f/ALL\");"},{"lineNumber":273,"author":{"gitId":"amanda-chua"},"content":"        String actualInputMeaning \u003d userInput;"},{"lineNumber":274,"author":{"gitId":"amanda-chua"},"content":"        if (shortcutCommandsWithDetails.get(actualInputMeaning) !\u003d null) {"},{"lineNumber":275,"author":{"gitId":"amanda-chua"},"content":"            actualInputMeaning \u003d shortcutCommandsWithDetails.get(actualInputMeaning);"},{"lineNumber":276,"author":{"gitId":"amanda-chua"},"content":"        }"},{"lineNumber":277,"author":{"gitId":"amanda-chua"},"content":"        return actualInputMeaning;"},{"lineNumber":278,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":279,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":280,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":281,"author":{"gitId":"amanda-chua"},"content":"     * Parses user input to split shortcut command and task information."},{"lineNumber":282,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":283,"author":{"gitId":"amanda-chua"},"content":"     * @param userInput String representing task information"},{"lineNumber":284,"author":{"gitId":"amanda-chua"},"content":"     * @return String representing full input meaning"},{"lineNumber":285,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":286,"author":{"gitId":"amanda-chua"},"content":"    public String parseShortcutCommandAndDetails(String userInput) {"},{"lineNumber":287,"author":{"gitId":"amanda-chua"},"content":"        String[] commandAndDetails \u003d userInput.split(COMMAND_WORD_DELIMITER, 2);"},{"lineNumber":288,"author":{"gitId":"amanda-chua"},"content":"        String shortcutInput \u003d parseShortcutCommands(commandAndDetails[0]);"},{"lineNumber":289,"author":{"gitId":"amanda-chua"},"content":"        String remainingTaskInfo \u003d \"\";"},{"lineNumber":290,"author":{"gitId":"amanda-chua"},"content":"        if (commandAndDetails.length \u003e 1) {"},{"lineNumber":291,"author":{"gitId":"amanda-chua"},"content":"            remainingTaskInfo \u003d commandAndDetails[1];"},{"lineNumber":292,"author":{"gitId":"amanda-chua"},"content":"        }"},{"lineNumber":293,"author":{"gitId":"amanda-chua"},"content":"        String fullInput \u003d shortcutInput + \" \" + remainingTaskInfo;"},{"lineNumber":294,"author":{"gitId":"amanda-chua"},"content":"        fullInput \u003d fullInput.trim();"},{"lineNumber":295,"author":{"gitId":"amanda-chua"},"content":"        return fullInput;"},{"lineNumber":296,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":297,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":298,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":299,"author":{"gitId":"amanda-chua"},"content":"     * Parses user input and recognises what type of command"},{"lineNumber":300,"author":{"gitId":"amanda-chua"},"content":"     * and parameters the user typed."},{"lineNumber":301,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":302,"author":{"gitId":"amanda-chua"},"content":"     * @param userInput String representing user input"},{"lineNumber":303,"author":{"gitId":"amanda-chua"},"content":"     * @param taskList  Tasks list"},{"lineNumber":304,"author":{"gitId":"amanda-chua"},"content":"     * @return new Command object based on what the user input is"},{"lineNumber":305,"author":{"gitId":"alstontham"},"content":"     * @throws CommandException Exception thrown when there is an error when the user inputs a command"},{"lineNumber":306,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":307,"author":{"gitId":"amanda-chua"},"content":"    public Command parse(String userInput, TaskList taskList) throws CommandException {"},{"lineNumber":308,"author":{"gitId":"amanda-chua"},"content":"        String fullInput \u003d parseShortcutCommandAndDetails(userInput);"},{"lineNumber":309,"author":{"gitId":"amanda-chua"},"content":"        String[] commandAndDetails \u003d fullInput.split(COMMAND_WORD_DELIMITER, 2);"},{"lineNumber":310,"author":{"gitId":"amanda-chua"},"content":"        String commandType \u003d commandAndDetails[0];"},{"lineNumber":311,"author":{"gitId":"amanda-chua"},"content":"        String taskInfo \u003d \"\";"},{"lineNumber":312,"author":{"gitId":"amanda-chua"},"content":"        if (commandAndDetails.length \u003e 1) {"},{"lineNumber":313,"author":{"gitId":"amanda-chua"},"content":"            taskInfo \u003d commandAndDetails[1];"},{"lineNumber":314,"author":{"gitId":"amanda-chua"},"content":"        }"},{"lineNumber":315,"author":{"gitId":"amanda-chua"},"content":"        int namePos \u003d taskInfo.indexOf(NAME_DELIMITER);"},{"lineNumber":316,"author":{"gitId":"amanda-chua"},"content":"        int timePos \u003d taskInfo.indexOf(TIME_DELIMITER);"},{"lineNumber":317,"author":{"gitId":"amanda-chua"},"content":"        int durationPos \u003d taskInfo.indexOf(DURATION_DELIMITER);"},{"lineNumber":318,"author":{"gitId":"amanda-chua"},"content":"        int deadlinePos \u003d taskInfo.indexOf(DEADLINE_DELIMITER);"},{"lineNumber":319,"author":{"gitId":"amanda-chua"},"content":"        int recurrencePos \u003d taskInfo.indexOf(RECURRENCE_DELIMITER);"},{"lineNumber":320,"author":{"gitId":"amanda-chua"},"content":"        int importancePos \u003d taskInfo.indexOf(IMPORTANCE_DELIMITER);"},{"lineNumber":321,"author":{"gitId":"amanda-chua"},"content":"        int addNotesPos \u003d taskInfo.indexOf(ADDITIONAL_NOTES_DELIMITER);"},{"lineNumber":322,"author":{"gitId":"amanda-chua"},"content":"        int forecastPos \u003d taskInfo.indexOf(FORECAST_DELIMITER);"},{"lineNumber":323,"author":{"gitId":"amanda-chua"},"content":"        switch (commandType) {"},{"lineNumber":324,"author":{"gitId":"amanda-chua"},"content":"        case \"add\": {"},{"lineNumber":325,"author":{"gitId":"amanda-chua"},"content":"            return parseAddCommand(taskInfo, namePos, timePos, durationPos, deadlinePos,"},{"lineNumber":326,"author":{"gitId":"amanda-chua"},"content":"                    recurrencePos, importancePos, addNotesPos);"},{"lineNumber":327,"author":{"gitId":"amanda-chua"},"content":"        }"},{"lineNumber":328,"author":{"gitId":"amanda-chua"},"content":"        case \"edit\": {"},{"lineNumber":329,"author":{"gitId":"amanda-chua"},"content":"            return parseEditCommand(taskInfo, namePos, timePos, durationPos, deadlinePos,"},{"lineNumber":330,"author":{"gitId":"alstontham"},"content":"                    recurrencePos, importancePos, addNotesPos, taskList);"},{"lineNumber":331,"author":{"gitId":"amanda-chua"},"content":"        }"},{"lineNumber":332,"author":{"gitId":"amanda-chua"},"content":"        case \"list\": {"},{"lineNumber":333,"author":{"gitId":"daniellimws"},"content":"            return parseListCommand(taskInfo, importancePos, forecastPos);"},{"lineNumber":334,"author":{"gitId":"amanda-chua"},"content":"        }"},{"lineNumber":335,"author":{"gitId":"amanda-chua"},"content":"        case \"done\": {"},{"lineNumber":336,"author":{"gitId":"amanda-chua"},"content":"            return parseDoneCommand(taskInfo);"},{"lineNumber":337,"author":{"gitId":"amanda-chua"},"content":"        }"},{"lineNumber":338,"author":{"gitId":"amanda-chua"},"content":"        case \"delete\": {"},{"lineNumber":339,"author":{"gitId":"amanda-chua"},"content":"            return parseDeleteCommand(taskInfo);"},{"lineNumber":340,"author":{"gitId":"alstontham"},"content":"        }"},{"lineNumber":341,"author":{"gitId":"amanda-chua"},"content":"        case \"view\": {"},{"lineNumber":342,"author":{"gitId":"amanda-chua"},"content":"            return parseViewCommand(taskInfo);"},{"lineNumber":343,"author":{"gitId":"amanda-chua"},"content":"        }"},{"lineNumber":344,"author":{"gitId":"alstontham"},"content":"        case \"help\": {"},{"lineNumber":345,"author":{"gitId":"alstontham"},"content":"            return new HelpCommand();"},{"lineNumber":346,"author":{"gitId":"alstontham"},"content":"        }"},{"lineNumber":347,"author":{"gitId":"alstontham"},"content":"        case \"exit\": {"},{"lineNumber":348,"author":{"gitId":"amanda-chua"},"content":"            return new ExitCommand();"},{"lineNumber":349,"author":{"gitId":"amanda-chua"},"content":"        }"},{"lineNumber":350,"author":{"gitId":"daniellimws"},"content":"        default: {"},{"lineNumber":351,"author":{"gitId":"alstontham"},"content":"            throw new InvalidCommandException();"},{"lineNumber":352,"author":{"gitId":"amanda-chua"},"content":"        }"},{"lineNumber":353,"author":{"gitId":"alstontham"},"content":"        }"},{"lineNumber":354,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":355,"author":{"gitId":"amanda-chua"},"content":"}"}],"authorContributionMap":{"Kafcis":19,"alstontham":26,"amanda-chua":255,"daniellimws":50,"wish2023":5}},{"path":"src/main/java/athena/Recurrence.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"alstontham"},"content":"package athena;"},{"lineNumber":2,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":3,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"alstontham"},"content":" * Enum representing when tasks can occur again."},{"lineNumber":5,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":6,"author":{"gitId":"alstontham"},"content":"public enum Recurrence {"},{"lineNumber":7,"author":{"gitId":"alstontham"},"content":"    TODAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY;"},{"lineNumber":8,"author":{"gitId":"alstontham"},"content":"}"}],"authorContributionMap":{"alstontham":8}},{"path":"src/main/java/athena/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Kafcis"},"content":"package athena;"},{"lineNumber":2,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":3,"author":{"gitId":"Kafcis"},"content":"import athena.exceptions.command.TaskTooLongException;"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.ClashInTaskException;"},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.InvalidDeadlineException;"},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.InvalidRecurrenceException;"},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.InvalidTimeFormatException;"},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.storage.StorageCorruptedException;"},{"lineNumber":9,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.storage.StorageException;"},{"lineNumber":10,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.storage.StorageLoadFailException;"},{"lineNumber":11,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.TaskDuringSleepTimeException;"},{"lineNumber":12,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.TaskIsDoneException;"},{"lineNumber":13,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.TaskNotFoundException;"},{"lineNumber":14,"author":{"gitId":"daniellimws"},"content":"import athena.task.Task;"},{"lineNumber":15,"author":{"gitId":"Kafcis"},"content":"import athena.task.TimeData;"},{"lineNumber":16,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":17,"author":{"gitId":"Kafcis"},"content":"import java.io.BufferedReader;"},{"lineNumber":18,"author":{"gitId":"Kafcis"},"content":"import java.io.File;"},{"lineNumber":19,"author":{"gitId":"Kafcis"},"content":"import java.io.FileReader;"},{"lineNumber":20,"author":{"gitId":"Kafcis"},"content":"import java.io.FileWriter;"},{"lineNumber":21,"author":{"gitId":"Kafcis"},"content":"import java.io.IOException;"},{"lineNumber":22,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":23,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":24,"author":{"gitId":"Kafcis"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"Kafcis"},"content":" * Converts TaskLists to .csv files and back"},{"lineNumber":26,"author":{"gitId":"Kafcis"},"content":" */"},{"lineNumber":27,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":28,"author":{"gitId":"Kafcis"},"content":"public class Storage {"},{"lineNumber":29,"author":{"gitId":"Kafcis"},"content":"    private String filePath;"},{"lineNumber":30,"author":{"gitId":"Kafcis"},"content":"    private TaskList tasks;"},{"lineNumber":31,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":32,"author":{"gitId":"Kafcis"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Kafcis"},"content":"     * Initialises Storage object."},{"lineNumber":34,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"Kafcis"},"content":"     * @param filepath Location of the save file"},{"lineNumber":36,"author":{"gitId":"Kafcis"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Kafcis"},"content":"    public Storage(String filepath) {"},{"lineNumber":38,"author":{"gitId":"Kafcis"},"content":"        this.filePath \u003d filepath;"},{"lineNumber":39,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":41,"author":{"gitId":"Kafcis"},"content":"    private String replaceCommas(String info) {"},{"lineNumber":42,"author":{"gitId":"Kafcis"},"content":"        return info.replace(\",\", \"]c}\");"},{"lineNumber":43,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":45,"author":{"gitId":"Kafcis"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"Kafcis"},"content":"     * Takes a TaskList and converts it to a .csv file."},{"lineNumber":47,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"Kafcis"},"content":"     * @param tasks tasks to be saved as strings"},{"lineNumber":49,"author":{"gitId":"Kafcis"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"Kafcis"},"content":"    public void saveTaskListData(TaskList tasks) {"},{"lineNumber":51,"author":{"gitId":"Kafcis"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":52,"author":{"gitId":"Kafcis"},"content":"        String taskString \u003d null;"},{"lineNumber":53,"author":{"gitId":"Kafcis"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"Kafcis"},"content":"            FileWriter csvWriter \u003d new FileWriter(filePath);"},{"lineNumber":55,"author":{"gitId":"Kafcis"},"content":"            for (Task task : tasks.getTasks()) {"},{"lineNumber":56,"author":{"gitId":"Kafcis"},"content":"                TimeData timeInfo \u003d task.getTimeInfo();"},{"lineNumber":57,"author":{"gitId":"wish2023"},"content":"                taskString \u003d replaceCommas(task.getName()) + \",\""},{"lineNumber":58,"author":{"gitId":"Kafcis"},"content":"                        + replaceCommas(timeInfo.getStartTimeString()) + \",\""},{"lineNumber":59,"author":{"gitId":"Kafcis"},"content":"                        + replaceCommas(timeInfo.getDurationString()) + \",\""},{"lineNumber":60,"author":{"gitId":"Kafcis"},"content":"                        + replaceCommas(timeInfo.getDeadline()) + \",\""},{"lineNumber":61,"author":{"gitId":"Kafcis"},"content":"                        + replaceCommas(timeInfo.getRecurrence()) + \",\" + task.getImportance() + \",\""},{"lineNumber":62,"author":{"gitId":"Kafcis"},"content":"                        + replaceCommas(task.getNotes()) + \",\" + task.getNumber();"},{"lineNumber":63,"author":{"gitId":"Kafcis"},"content":"                if (task.isDone()) {"},{"lineNumber":64,"author":{"gitId":"Kafcis"},"content":"                    taskString \u003d taskString + \",\" + \"true\";"},{"lineNumber":65,"author":{"gitId":"Kafcis"},"content":"                } else {"},{"lineNumber":66,"author":{"gitId":"Kafcis"},"content":"                    taskString \u003d taskString + \",\" + \"false\";"},{"lineNumber":67,"author":{"gitId":"Kafcis"},"content":"                }"},{"lineNumber":68,"author":{"gitId":"Kafcis"},"content":"                if (task.isFlexible()) {"},{"lineNumber":69,"author":{"gitId":"Kafcis"},"content":"                    taskString \u003d taskString + \",\" + \"true\";"},{"lineNumber":70,"author":{"gitId":"Kafcis"},"content":"                } else {"},{"lineNumber":71,"author":{"gitId":"Kafcis"},"content":"                    taskString \u003d taskString + \",\" + \"false\";"},{"lineNumber":72,"author":{"gitId":"Kafcis"},"content":"                }"},{"lineNumber":73,"author":{"gitId":"Kafcis"},"content":"                csvWriter.append(taskString + \"\\n\");"},{"lineNumber":74,"author":{"gitId":"Kafcis"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"Kafcis"},"content":"            csvWriter.close();"},{"lineNumber":76,"author":{"gitId":"Kafcis"},"content":"        } catch (IOException e) {"},{"lineNumber":77,"author":{"gitId":"Kafcis"},"content":"            e.printStackTrace();"},{"lineNumber":78,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":81,"author":{"gitId":"Kafcis"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"Kafcis"},"content":"     * Retrieves Tasklist from .csv file"},{"lineNumber":83,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"Kafcis"},"content":"     * @return TaskList object equivalent of save file"},{"lineNumber":85,"author":{"gitId":"Kafcis"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":87,"author":{"gitId":"Kafcis"},"content":"    public TaskList loadTaskListData() throws StorageException {"},{"lineNumber":88,"author":{"gitId":"Kafcis"},"content":"        File csvFile \u003d new File(filePath);"},{"lineNumber":89,"author":{"gitId":"daniellimws"},"content":"        TaskList loadedTaskList \u003d new TaskList();"},{"lineNumber":90,"author":{"gitId":"Kafcis"},"content":"        if (csvFile.isFile()) {"},{"lineNumber":91,"author":{"gitId":"Kafcis"},"content":"            String row;"},{"lineNumber":92,"author":{"gitId":"Kafcis"},"content":"            String[] data \u003d null;"},{"lineNumber":93,"author":{"gitId":"Kafcis"},"content":"            BufferedReader csvReader \u003d null;"},{"lineNumber":94,"author":{"gitId":"Kafcis"},"content":"            try {"},{"lineNumber":95,"author":{"gitId":"Kafcis"},"content":"                csvReader \u003d new BufferedReader(new FileReader(filePath));"},{"lineNumber":96,"author":{"gitId":"Kafcis"},"content":"                while ((row \u003d csvReader.readLine()) !\u003d null) {"},{"lineNumber":97,"author":{"gitId":"Kafcis"},"content":"                    data \u003d row.split(\",\");"},{"lineNumber":98,"author":{"gitId":"Kafcis"},"content":"                    for (int i \u003d 0; i \u003c data.length; i++) {"},{"lineNumber":99,"author":{"gitId":"Kafcis"},"content":"                        data[i] \u003d data[i].replaceAll(\"]c}\", \",\");"},{"lineNumber":100,"author":{"gitId":"Kafcis"},"content":"                    }"},{"lineNumber":101,"author":{"gitId":"daniellimws"},"content":"                    loadedTaskList.addTask(Integer.parseInt(data[7]), data[0], data[1], data[2], data[3], data[4],"},{"lineNumber":102,"author":{"gitId":"Kafcis"},"content":"                            Importance.valueOf(data[5].toUpperCase()), data[6], Boolean.parseBoolean(data[9]));"},{"lineNumber":103,"author":{"gitId":"Kafcis"},"content":"                    if (data[8].equals(\"true\")) {"},{"lineNumber":104,"author":{"gitId":"Kafcis"},"content":"                        Task currTask \u003d loadedTaskList.markTaskAsDone(Integer.parseInt(data[7]));"},{"lineNumber":105,"author":{"gitId":"Kafcis"},"content":"                    }"},{"lineNumber":106,"author":{"gitId":"Kafcis"},"content":"                }"},{"lineNumber":107,"author":{"gitId":"Kafcis"},"content":"                csvReader.close();"},{"lineNumber":108,"author":{"gitId":"Kafcis"},"content":"            } catch (IOException | TaskNotFoundException e) {"},{"lineNumber":109,"author":{"gitId":"Kafcis"},"content":"                throw new StorageLoadFailException();"},{"lineNumber":110,"author":{"gitId":"Kafcis"},"content":"            } catch (ArrayIndexOutOfBoundsException | ClashInTaskException | TaskDuringSleepTimeException"},{"lineNumber":111,"author":{"gitId":"Kafcis"},"content":"                    | InvalidTimeFormatException | TaskTooLongException | InvalidDeadlineException"},{"lineNumber":112,"author":{"gitId":"Kafcis"},"content":"                    | InvalidRecurrenceException e) {"},{"lineNumber":113,"author":{"gitId":"wish2023"},"content":"                throw new StorageCorruptedException(data);"},{"lineNumber":114,"author":{"gitId":"wish2023"},"content":"            } catch (TaskIsDoneException e) {"},{"lineNumber":115,"author":{"gitId":"wish2023"},"content":"                assert false;"},{"lineNumber":116,"author":{"gitId":"Kafcis"},"content":"            }"},{"lineNumber":117,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"daniellimws"},"content":"        return loadedTaskList;"},{"lineNumber":119,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"Kafcis"},"content":"}"}],"authorContributionMap":{"Kafcis":101,"daniellimws":15,"wish2023":4}},{"path":"src/main/java/athena/TaskImportanceComparator.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Kafcis"},"content":"package athena;"},{"lineNumber":2,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":3,"author":{"gitId":"Kafcis"},"content":"import athena.task.Task;"},{"lineNumber":4,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":5,"author":{"gitId":"Kafcis"},"content":"import java.util.Comparator;"},{"lineNumber":6,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":7,"author":{"gitId":"Kafcis"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Kafcis"},"content":" * Sorts the tasks in descending order of importance."},{"lineNumber":9,"author":{"gitId":"Kafcis"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Kafcis"},"content":"public class TaskImportanceComparator implements Comparator\u003cTask\u003e {"},{"lineNumber":11,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":12,"author":{"gitId":"Kafcis"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"Kafcis"},"content":"    public int compare(Task o1, Task o2) {"},{"lineNumber":14,"author":{"gitId":"Kafcis"},"content":"        Importance i1 \u003d o1.getImportance();"},{"lineNumber":15,"author":{"gitId":"Kafcis"},"content":"        Importance i2 \u003d o2.getImportance();"},{"lineNumber":16,"author":{"gitId":"Kafcis"},"content":"        if (i1 \u003d\u003d i2) {"},{"lineNumber":17,"author":{"gitId":"Kafcis"},"content":"            return 0;"},{"lineNumber":18,"author":{"gitId":"Kafcis"},"content":"        } else if (i1 \u003d\u003d Importance.HIGH) {"},{"lineNumber":19,"author":{"gitId":"Kafcis"},"content":"            return -1;"},{"lineNumber":20,"author":{"gitId":"daniellimws"},"content":"        } else if (i2 \u003d\u003d Importance.HIGH) {"},{"lineNumber":21,"author":{"gitId":"Kafcis"},"content":"            return 1;"},{"lineNumber":22,"author":{"gitId":"daniellimws"},"content":"        } else if (i1 \u003d\u003d Importance.MEDIUM) {"},{"lineNumber":23,"author":{"gitId":"Kafcis"},"content":"            return -1;"},{"lineNumber":24,"author":{"gitId":"daniellimws"},"content":"        } else if (i2 \u003d\u003d Importance.MEDIUM) {"},{"lineNumber":25,"author":{"gitId":"daniellimws"},"content":"            return 1;"},{"lineNumber":26,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"Kafcis"},"content":"        return 0;"},{"lineNumber":28,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Kafcis"},"content":"}"},{"lineNumber":30,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":31,"author":{"gitId":"Kafcis"},"content":""}],"authorContributionMap":{"Kafcis":27,"daniellimws":4}},{"path":"src/main/java/athena/TaskList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wish2023"},"content":"package athena;"},{"lineNumber":2,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.ClashInTaskException;"},{"lineNumber":4,"author":{"gitId":"Kafcis"},"content":"import athena.exceptions.command.DateHasPassedException;"},{"lineNumber":5,"author":{"gitId":"Kafcis"},"content":"import athena.exceptions.command.IllegalTimeModificationException;"},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.InvalidDeadlineException;"},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.InvalidRecurrenceException;"},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.InvalidTimeFormatException;"},{"lineNumber":9,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.TaskDuringSleepTimeException;"},{"lineNumber":10,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.TaskIsDoneException;"},{"lineNumber":11,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.TaskNotFoundException;"},{"lineNumber":12,"author":{"gitId":"Kafcis"},"content":"import athena.exceptions.command.TaskTooLongException;"},{"lineNumber":13,"author":{"gitId":"daniellimws"},"content":"import athena.task.Task;"},{"lineNumber":14,"author":{"gitId":"Kafcis"},"content":"import athena.task.TimeData;"},{"lineNumber":15,"author":{"gitId":"daniellimws"},"content":"import athena.task.taskfilter.TaskFilter;"},{"lineNumber":16,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":17,"author":{"gitId":"wish2023"},"content":"import java.time.LocalDate;"},{"lineNumber":18,"author":{"gitId":"wish2023"},"content":"import java.time.LocalTime;"},{"lineNumber":19,"author":{"gitId":"wish2023"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":20,"author":{"gitId":"wish2023"},"content":"import java.util.ArrayList;"},{"lineNumber":21,"author":{"gitId":"amanda-chua"},"content":"import java.util.Objects;"},{"lineNumber":22,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":23,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"alstontham"},"content":" * The list that stores the user\u0027s tasks."},{"lineNumber":25,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":26,"author":{"gitId":"wish2023"},"content":"public class TaskList {"},{"lineNumber":27,"author":{"gitId":"wish2023"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":28,"author":{"gitId":"daniellimws"},"content":"    private int maxNumber \u003d -1;"},{"lineNumber":29,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":30,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"alstontham"},"content":"     * Creates a new TaskList."},{"lineNumber":32,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"wish2023"},"content":"    public TaskList() {"},{"lineNumber":34,"author":{"gitId":"wish2023"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":37,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"alstontham"},"content":"     * Creates a new TaskList using an existing ArrayList."},{"lineNumber":39,"author":{"gitId":"alstontham"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"alstontham"},"content":"     * @param tasks ArrayList to convert to TaskList"},{"lineNumber":41,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"daniellimws"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":43,"author":{"gitId":"daniellimws"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":44,"author":{"gitId":"daniellimws"},"content":"        this.tasks.addAll(tasks);"},{"lineNumber":45,"author":{"gitId":"daniellimws"},"content":"        for (Task task : tasks) {"},{"lineNumber":46,"author":{"gitId":"daniellimws"},"content":"            maxNumber \u003d Math.max(maxNumber, task.getNumber());"},{"lineNumber":47,"author":{"gitId":"daniellimws"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":50,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"alstontham"},"content":"     * Gets an ArrayList of the tasks."},{"lineNumber":52,"author":{"gitId":"alstontham"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"alstontham"},"content":"     * @return The ArrayList of the tasks"},{"lineNumber":54,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"daniellimws"},"content":"    public ArrayList\u003cTask\u003e getTasks() {"},{"lineNumber":56,"author":{"gitId":"daniellimws"},"content":"        return tasks;"},{"lineNumber":57,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":59,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"alstontham"},"content":"     * Creates a new task."},{"lineNumber":61,"author":{"gitId":"alstontham"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"alstontham"},"content":"     * @param number     Task number"},{"lineNumber":63,"author":{"gitId":"alstontham"},"content":"     * @param name       Task name"},{"lineNumber":64,"author":{"gitId":"alstontham"},"content":"     * @param startTime  Start time of the task"},{"lineNumber":65,"author":{"gitId":"alstontham"},"content":"     * @param duration   Duration of the task"},{"lineNumber":66,"author":{"gitId":"alstontham"},"content":"     * @param deadline   Due date of the task"},{"lineNumber":67,"author":{"gitId":"alstontham"},"content":"     * @param recurrence When the task occurs again"},{"lineNumber":68,"author":{"gitId":"alstontham"},"content":"     * @param importance Importance of the task"},{"lineNumber":69,"author":{"gitId":"alstontham"},"content":"     * @param notes      Additional notes"},{"lineNumber":70,"author":{"gitId":"alstontham"},"content":"     * @return Task as Task object"},{"lineNumber":71,"author":{"gitId":"wish2023"},"content":"     * @throws TaskDuringSleepTimeException Exception thrown when task clashes with sleep time"},{"lineNumber":72,"author":{"gitId":"wish2023"},"content":"     * @throws InvalidRecurrenceException   Exception thrown when user mistypes recurrence"},{"lineNumber":73,"author":{"gitId":"wish2023"},"content":"     * @throws InvalidDeadlineException     Exception thrown when user mistypes deadline"},{"lineNumber":74,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"daniellimws"},"content":"    private Task createTask(int number, String name, String startTime, String duration, String deadline,"},{"lineNumber":76,"author":{"gitId":"daniellimws"},"content":"                            String recurrence, Importance importance, String notes, Boolean isFlexible)"},{"lineNumber":77,"author":{"gitId":"Kafcis"},"content":"            throws TaskDuringSleepTimeException, InvalidRecurrenceException, InvalidDeadlineException,"},{"lineNumber":78,"author":{"gitId":"Kafcis"},"content":"            TaskTooLongException {"},{"lineNumber":79,"author":{"gitId":"Kafcis"},"content":"        Task task \u003d new Task(name, startTime, duration, deadline, recurrence, importance, notes, number, isFlexible);"},{"lineNumber":80,"author":{"gitId":"wish2023"},"content":"        return task;"},{"lineNumber":81,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":83,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"daniellimws"},"content":"     * Adds a task to the task list."},{"lineNumber":85,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"daniellimws"},"content":"     * @param task Task to be added."},{"lineNumber":87,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"daniellimws"},"content":"    public void addTask(Task task) {"},{"lineNumber":89,"author":{"gitId":"wish2023"},"content":"        updateMaxNumber(task.getNumber());"},{"lineNumber":90,"author":{"gitId":"daniellimws"},"content":"        tasks.add(task);"},{"lineNumber":91,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":93,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"wish2023"},"content":"     * Adds a task to the task list."},{"lineNumber":95,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":96,"author":{"gitId":"wish2023"},"content":"     * @param name       Name of task"},{"lineNumber":97,"author":{"gitId":"wish2023"},"content":"     * @param startTime  Start time of task"},{"lineNumber":98,"author":{"gitId":"wish2023"},"content":"     * @param duration   Duration of task"},{"lineNumber":99,"author":{"gitId":"wish2023"},"content":"     * @param deadline   Deadline of task"},{"lineNumber":100,"author":{"gitId":"wish2023"},"content":"     * @param recurrence Recurrence of task"},{"lineNumber":101,"author":{"gitId":"wish2023"},"content":"     * @param importance Importance of task"},{"lineNumber":102,"author":{"gitId":"wish2023"},"content":"     * @param notes      Additional notes of task"},{"lineNumber":103,"author":{"gitId":"wish2023"},"content":"     * @return Task added."},{"lineNumber":104,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"wish2023"},"content":"    public Task addTask(String name, String startTime, String duration,"},{"lineNumber":106,"author":{"gitId":"wish2023"},"content":"                        String deadline, String recurrence,"},{"lineNumber":107,"author":{"gitId":"wish2023"},"content":"                        Importance importance, String notes, Boolean isFlexible)"},{"lineNumber":108,"author":{"gitId":"wish2023"},"content":"            throws ClashInTaskException, TaskDuringSleepTimeException, InvalidTimeFormatException, TaskTooLongException,"},{"lineNumber":109,"author":{"gitId":"wish2023"},"content":"            InvalidRecurrenceException, InvalidDeadlineException {"},{"lineNumber":110,"author":{"gitId":"wish2023"},"content":"        incrementMaxNumber();"},{"lineNumber":111,"author":{"gitId":"wish2023"},"content":"        Task task \u003d addTask(maxNumber, name, startTime, duration, deadline, recurrence, importance, notes, isFlexible);"},{"lineNumber":112,"author":{"gitId":"wish2023"},"content":"        return task;"},{"lineNumber":113,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":115,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"wish2023"},"content":"     * Adds a task to the task list."},{"lineNumber":117,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":118,"author":{"gitId":"daniellimws"},"content":"     * @param number     Number assigned to the task"},{"lineNumber":119,"author":{"gitId":"wish2023"},"content":"     * @param name       Name of task"},{"lineNumber":120,"author":{"gitId":"wish2023"},"content":"     * @param startTime  Start time of task"},{"lineNumber":121,"author":{"gitId":"wish2023"},"content":"     * @param duration   Duration of task"},{"lineNumber":122,"author":{"gitId":"wish2023"},"content":"     * @param deadline   Deadline of task"},{"lineNumber":123,"author":{"gitId":"wish2023"},"content":"     * @param recurrence Recurrence of task"},{"lineNumber":124,"author":{"gitId":"wish2023"},"content":"     * @param importance Importance of task"},{"lineNumber":125,"author":{"gitId":"wish2023"},"content":"     * @param notes      Additional notes of task"},{"lineNumber":126,"author":{"gitId":"wish2023"},"content":"     * @return Task added."},{"lineNumber":127,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":129,"author":{"gitId":"wish2023"},"content":"    public Task addTask(int number, String name, String startTime, String duration,"},{"lineNumber":130,"author":{"gitId":"wish2023"},"content":"                        String deadline, String recurrence,"},{"lineNumber":131,"author":{"gitId":"daniellimws"},"content":"                        Importance importance, String notes, boolean isFlexible)"},{"lineNumber":132,"author":{"gitId":"wish2023"},"content":"            throws ClashInTaskException, TaskDuringSleepTimeException, InvalidTimeFormatException,"},{"lineNumber":133,"author":{"gitId":"Kafcis"},"content":"            InvalidRecurrenceException, InvalidDeadlineException, TaskTooLongException {"},{"lineNumber":134,"author":{"gitId":"wish2023"},"content":"        try {"},{"lineNumber":135,"author":{"gitId":"daniellimws"},"content":"            if (containsTaskWithNumber(number)) {"},{"lineNumber":136,"author":{"gitId":"wish2023"},"content":"                incrementMaxNumber();"},{"lineNumber":137,"author":{"gitId":"wish2023"},"content":"                number \u003d setNumber();"},{"lineNumber":138,"author":{"gitId":"Kafcis"},"content":"            }"},{"lineNumber":139,"author":{"gitId":"wish2023"},"content":"            Task task \u003d createTask(number, name, startTime,"},{"lineNumber":140,"author":{"gitId":"wish2023"},"content":"                    duration, deadline, recurrence, importance, notes, isFlexible);"},{"lineNumber":141,"author":{"gitId":"wish2023"},"content":"            decrementMaxNumber();"},{"lineNumber":142,"author":{"gitId":"wish2023"},"content":"            checkClash(task);"},{"lineNumber":143,"author":{"gitId":"wish2023"},"content":"            updateMaxNumber(number);"},{"lineNumber":144,"author":{"gitId":"wish2023"},"content":"            tasks.add(task);"},{"lineNumber":145,"author":{"gitId":"wish2023"},"content":"            return task;"},{"lineNumber":146,"author":{"gitId":"wish2023"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":147,"author":{"gitId":"wish2023"},"content":"            throw new InvalidTimeFormatException();"},{"lineNumber":148,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":151,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"wish2023"},"content":"     * Create a Task-ID based on maxNumber."},{"lineNumber":153,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":154,"author":{"gitId":"wish2023"},"content":"     * @return the Task-ID"},{"lineNumber":155,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"wish2023"},"content":"    private int setNumber() {"},{"lineNumber":157,"author":{"gitId":"wish2023"},"content":"        int number;"},{"lineNumber":158,"author":{"gitId":"wish2023"},"content":"        number \u003d maxNumber;"},{"lineNumber":159,"author":{"gitId":"wish2023"},"content":"        return number;"},{"lineNumber":160,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":162,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"wish2023"},"content":"     * Decrements maxNumber."},{"lineNumber":164,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":165,"author":{"gitId":"wish2023"},"content":"    private void decrementMaxNumber() {"},{"lineNumber":166,"author":{"gitId":"wish2023"},"content":"        maxNumber--;"},{"lineNumber":167,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":169,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":170,"author":{"gitId":"wish2023"},"content":"     * Increments maxNumber."},{"lineNumber":171,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":172,"author":{"gitId":"wish2023"},"content":"    private void incrementMaxNumber() {"},{"lineNumber":173,"author":{"gitId":"wish2023"},"content":"        maxNumber++;"},{"lineNumber":174,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":176,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":177,"author":{"gitId":"wish2023"},"content":"     * Checks if new task clashes with TaskList."},{"lineNumber":178,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":179,"author":{"gitId":"wish2023"},"content":"     * @param taskToCompare the new task that may be added."},{"lineNumber":180,"author":{"gitId":"wish2023"},"content":"     * @throws ClashInTaskException Exception thrown when the task clashes with TaskList"},{"lineNumber":181,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":182,"author":{"gitId":"wish2023"},"content":"    private void checkClash(Task taskToCompare) throws ClashInTaskException {"},{"lineNumber":183,"author":{"gitId":"wish2023"},"content":"        for (Task task : tasks) {"},{"lineNumber":184,"author":{"gitId":"Kafcis"},"content":"            if (task.getTimeInfo().getFlexible() \u0026\u0026 taskToCompare.getTimeInfo().getFlexible()) {"},{"lineNumber":185,"author":{"gitId":"wish2023"},"content":"                checkTimeClash(taskToCompare, task);"},{"lineNumber":186,"author":{"gitId":"wish2023"},"content":"            }"},{"lineNumber":187,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":190,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":191,"author":{"gitId":"wish2023"},"content":"     * Checks for a clash between two tasks."},{"lineNumber":192,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":193,"author":{"gitId":"wish2023"},"content":"     * @param taskToCompare the new task that may be added"},{"lineNumber":194,"author":{"gitId":"wish2023"},"content":"     * @param task          the current task in tasklist"},{"lineNumber":195,"author":{"gitId":"wish2023"},"content":"     * @throws ClashInTaskException Exception thrown when the task clashes with TaskList"},{"lineNumber":196,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":197,"author":{"gitId":"wish2023"},"content":"    private void checkTimeClash(Task taskToCompare, Task task) throws ClashInTaskException {"},{"lineNumber":198,"author":{"gitId":"wish2023"},"content":"        if (isTimeClash(taskToCompare, task)) {"},{"lineNumber":199,"author":{"gitId":"wish2023"},"content":"            checkRecurrenceClash(taskToCompare, task);"},{"lineNumber":200,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":201,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":202,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":203,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":204,"author":{"gitId":"wish2023"},"content":"     * Checks if there is a date clash between tasks."},{"lineNumber":205,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":206,"author":{"gitId":"wish2023"},"content":"     * @param taskToCompare the new task that may be added"},{"lineNumber":207,"author":{"gitId":"wish2023"},"content":"     * @param task          the current task in tasklist"},{"lineNumber":208,"author":{"gitId":"wish2023"},"content":"     * @throws ClashInTaskException Exception thrown when the task clashes with TaskList"},{"lineNumber":209,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":210,"author":{"gitId":"wish2023"},"content":"    private void checkRecurrenceClash(Task taskToCompare, Task task) throws ClashInTaskException {"},{"lineNumber":211,"author":{"gitId":"wish2023"},"content":"        LocalDate dateToCompare \u003d taskToCompare.getTimeInfo().getRecurrenceDates().get(0);"},{"lineNumber":212,"author":{"gitId":"wish2023"},"content":"        for (LocalDate date : task.getTimeInfo().getRecurrenceDates()) {"},{"lineNumber":213,"author":{"gitId":"wish2023"},"content":"            if (dateToCompare.equals(date) \u0026\u0026 taskToCompare.getNumber() !\u003d task.getNumber()"},{"lineNumber":214,"author":{"gitId":"wish2023"},"content":"                    \u0026\u0026 !task.isFlexible() \u0026\u0026 !taskToCompare.isFlexible()) {"},{"lineNumber":215,"author":{"gitId":"wish2023"},"content":"                throw new ClashInTaskException();"},{"lineNumber":216,"author":{"gitId":"wish2023"},"content":"            }"},{"lineNumber":217,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":218,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":219,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":220,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":221,"author":{"gitId":"wish2023"},"content":"     * Checks if there is a timing clash between tasks."},{"lineNumber":222,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":223,"author":{"gitId":"wish2023"},"content":"     * @param taskToCompare the new task that may be added"},{"lineNumber":224,"author":{"gitId":"wish2023"},"content":"     * @param task          the current task in tasklist"},{"lineNumber":225,"author":{"gitId":"wish2023"},"content":"     * @return"},{"lineNumber":226,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":227,"author":{"gitId":"wish2023"},"content":"    private boolean isTimeClash(Task taskToCompare, Task task) {"},{"lineNumber":228,"author":{"gitId":"wish2023"},"content":"        LocalTime taskStartTime \u003d taskToCompare.getTimeInfo().getStartTime();"},{"lineNumber":229,"author":{"gitId":"Kafcis"},"content":"        if (taskStartTime \u003d\u003d null) {"},{"lineNumber":230,"author":{"gitId":"Kafcis"},"content":"            return false;"},{"lineNumber":231,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":232,"author":{"gitId":"wish2023"},"content":"        LocalTime taskEndTime \u003d taskToCompare.getTimeInfo().getEndTime();"},{"lineNumber":233,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":234,"author":{"gitId":"wish2023"},"content":"        LocalTime existingTaskStartTime \u003d task.getTimeInfo().getStartTime();"},{"lineNumber":235,"author":{"gitId":"Kafcis"},"content":"        if (existingTaskStartTime \u003d\u003d null) {"},{"lineNumber":236,"author":{"gitId":"Kafcis"},"content":"            return false;"},{"lineNumber":237,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":238,"author":{"gitId":"wish2023"},"content":"        LocalTime existingTaskEndTime \u003d task.getTimeInfo().getEndTime();"},{"lineNumber":239,"author":{"gitId":"wish2023"},"content":"        if (isIndividualTimeClash(taskStartTime, taskEndTime, existingTaskStartTime, existingTaskEndTime)) {"},{"lineNumber":240,"author":{"gitId":"wish2023"},"content":"            return true;"},{"lineNumber":241,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":242,"author":{"gitId":"wish2023"},"content":"        return false;"},{"lineNumber":243,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":244,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":245,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":246,"author":{"gitId":"wish2023"},"content":"     * Checks if times of a task overlap each other."},{"lineNumber":247,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":248,"author":{"gitId":"wish2023"},"content":"     * @param taskStartTime         the starting time of the new task that may be added"},{"lineNumber":249,"author":{"gitId":"wish2023"},"content":"     * @param taskEndTime           the ending time of the new task that may be added"},{"lineNumber":250,"author":{"gitId":"wish2023"},"content":"     * @param existingTaskStartTime the starting time of the existing task"},{"lineNumber":251,"author":{"gitId":"wish2023"},"content":"     * @param existingTaskEndTime   the ending time of the existing task"},{"lineNumber":252,"author":{"gitId":"wish2023"},"content":"     * @return"},{"lineNumber":253,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":254,"author":{"gitId":"wish2023"},"content":"    private boolean isIndividualTimeClash(LocalTime taskStartTime, LocalTime taskEndTime,"},{"lineNumber":255,"author":{"gitId":"wish2023"},"content":"                                          LocalTime existingTaskStartTime, LocalTime existingTaskEndTime) {"},{"lineNumber":256,"author":{"gitId":"wish2023"},"content":"        boolean isTimeClash \u003d !(taskEndTime.compareTo(existingTaskStartTime) \u003c\u003d 0"},{"lineNumber":257,"author":{"gitId":"wish2023"},"content":"                || (taskStartTime.compareTo(existingTaskEndTime) \u003e\u003d 0"},{"lineNumber":258,"author":{"gitId":"wish2023"},"content":"                \u0026\u0026 existingTaskEndTime.compareTo(existingTaskStartTime) \u003e 0));"},{"lineNumber":259,"author":{"gitId":"wish2023"},"content":"        boolean isMidnightClash \u003d taskEndTime.compareTo(taskStartTime) \u003c 0"},{"lineNumber":260,"author":{"gitId":"wish2023"},"content":"                \u0026\u0026 existingTaskEndTime.compareTo(existingTaskStartTime) \u003c 0;"},{"lineNumber":261,"author":{"gitId":"wish2023"},"content":"        return isTimeClash || isMidnightClash;"},{"lineNumber":262,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":263,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":264,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":265,"author":{"gitId":"wish2023"},"content":"     * Updates maxNumber based on the task ID."},{"lineNumber":266,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":267,"author":{"gitId":"wish2023"},"content":"     * @param number the Task-ID"},{"lineNumber":268,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":269,"author":{"gitId":"wish2023"},"content":"    private void updateMaxNumber(int number) {"},{"lineNumber":270,"author":{"gitId":"wish2023"},"content":"        maxNumber++;"},{"lineNumber":271,"author":{"gitId":"wish2023"},"content":"        if (maxNumber \u003c number) {"},{"lineNumber":272,"author":{"gitId":"wish2023"},"content":"            maxNumber \u003d number;"},{"lineNumber":273,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":274,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":275,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":276,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":277,"author":{"gitId":"daniellimws"},"content":"     * Returns the task description of the task with the given number."},{"lineNumber":278,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":279,"author":{"gitId":"daniellimws"},"content":"     * @param taskNumber Task number."},{"lineNumber":280,"author":{"gitId":"daniellimws"},"content":"     * @return Task description."},{"lineNumber":281,"author":{"gitId":"alstontham"},"content":"     * @throws TaskNotFoundException Exception thrown when the program is unable to find a task at the index"},{"lineNumber":282,"author":{"gitId":"alstontham"},"content":"     *                               specified by the user"},{"lineNumber":283,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":284,"author":{"gitId":"daniellimws"},"content":"    public String getTaskDescription(int taskNumber) throws TaskNotFoundException {"},{"lineNumber":285,"author":{"gitId":"daniellimws"},"content":"        Task task \u003d getTaskFromNumber(taskNumber);"},{"lineNumber":286,"author":{"gitId":"amanda-chua"},"content":"        return task.getDetailsAsString();"},{"lineNumber":287,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":288,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":289,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":290,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":291,"author":{"gitId":"wish2023"},"content":"     * Deletes the task at the specified position in the task list."},{"lineNumber":292,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":293,"author":{"gitId":"daniellimws"},"content":"     * @param taskNumber Number assigned to the task to be deleted."},{"lineNumber":294,"author":{"gitId":"daniellimws"},"content":"     * @return Task that is deleted. Null if not found."},{"lineNumber":295,"author":{"gitId":"alstontham"},"content":"     * @throws TaskNotFoundException thrown when the program is unable to find a task at the index"},{"lineNumber":296,"author":{"gitId":"alstontham"},"content":"     *                               specified by the user"},{"lineNumber":297,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":298,"author":{"gitId":"daniellimws"},"content":"    public Task deleteTask(int taskNumber) throws TaskNotFoundException {"},{"lineNumber":299,"author":{"gitId":"daniellimws"},"content":"        Task task \u003d getTaskFromNumber(taskNumber);"},{"lineNumber":300,"author":{"gitId":"daniellimws"},"content":"        tasks.remove(task);"},{"lineNumber":301,"author":{"gitId":"daniellimws"},"content":"        return task;"},{"lineNumber":302,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":303,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":304,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":305,"author":{"gitId":"daniellimws"},"content":"     * Edits a task in the task list with the given number, if present."},{"lineNumber":306,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":307,"author":{"gitId":"daniellimws"},"content":"     * @param taskNumber Task number"},{"lineNumber":308,"author":{"gitId":"wish2023"},"content":"     * @param name       Name of task"},{"lineNumber":309,"author":{"gitId":"wish2023"},"content":"     * @param startTime  Start time of task"},{"lineNumber":310,"author":{"gitId":"wish2023"},"content":"     * @param duration   Duration of task"},{"lineNumber":311,"author":{"gitId":"wish2023"},"content":"     * @param deadline   Deadline of task"},{"lineNumber":312,"author":{"gitId":"wish2023"},"content":"     * @param recurrence Recurrence of task"},{"lineNumber":313,"author":{"gitId":"wish2023"},"content":"     * @param importance Importance of task"},{"lineNumber":314,"author":{"gitId":"wish2023"},"content":"     * @param notes      Additional notes of task"},{"lineNumber":315,"author":{"gitId":"wish2023"},"content":"     * @return Edited task."},{"lineNumber":316,"author":{"gitId":"alstontham"},"content":"     * @throws TaskNotFoundException        thrown when the program is unable to find a task at the index"},{"lineNumber":317,"author":{"gitId":"alstontham"},"content":"     *                                      specified by the user"},{"lineNumber":318,"author":{"gitId":"wish2023"},"content":"     * @throws ClashInTaskException         thrown when there is a clash with another task."},{"lineNumber":319,"author":{"gitId":"wish2023"},"content":"     * @throws TaskDuringSleepTimeException thrown when the user wants a task to be done during sleep time."},{"lineNumber":320,"author":{"gitId":"wish2023"},"content":"     * @throws InvalidRecurrenceException   when user mistypes recurrence"},{"lineNumber":321,"author":{"gitId":"wish2023"},"content":"     * @throws InvalidDeadlineException     when user mistypes deadline"},{"lineNumber":322,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":323,"author":{"gitId":"wish2023"},"content":"    public Task editTask(int taskNumber, String name, String startTime, String duration,"},{"lineNumber":324,"author":{"gitId":"daniellimws"},"content":"                         String deadline, String recurrence, Importance importance,"},{"lineNumber":325,"author":{"gitId":"daniellimws"},"content":"                         String notes)"},{"lineNumber":326,"author":{"gitId":"wish2023"},"content":"            throws TaskNotFoundException, ClashInTaskException, TaskDuringSleepTimeException,"},{"lineNumber":327,"author":{"gitId":"Kafcis"},"content":"            TaskTooLongException, InvalidRecurrenceException, InvalidDeadlineException,"},{"lineNumber":328,"author":{"gitId":"Kafcis"},"content":"            IllegalTimeModificationException {"},{"lineNumber":329,"author":{"gitId":"daniellimws"},"content":"        Task task \u003d getTaskFromNumber(taskNumber);"},{"lineNumber":330,"author":{"gitId":"Kafcis"},"content":"        TimeData time \u003d task.getTimeInfo();"},{"lineNumber":331,"author":{"gitId":"wish2023"},"content":"        if (isFlexibleTaskEdit(startTime, recurrence, time)) {"},{"lineNumber":332,"author":{"gitId":"Kafcis"},"content":"            throw new IllegalTimeModificationException();"},{"lineNumber":333,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":334,"author":{"gitId":"wish2023"},"content":"        Task possibleEditedTask \u003d createTask(taskNumber, name, startTime,"},{"lineNumber":335,"author":{"gitId":"wish2023"},"content":"                duration, deadline, recurrence, importance, notes, task.isFlexible());"},{"lineNumber":336,"author":{"gitId":"wish2023"},"content":"        checkClash(possibleEditedTask);"},{"lineNumber":337,"author":{"gitId":"daniellimws"},"content":"        task.edit(name, startTime, duration, deadline, recurrence, importance, notes);"},{"lineNumber":338,"author":{"gitId":"wish2023"},"content":"        return possibleEditedTask;"},{"lineNumber":339,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":340,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":341,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":342,"author":{"gitId":"wish2023"},"content":"     * Checks if the task being edited is a flexible task."},{"lineNumber":343,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":344,"author":{"gitId":"wish2023"},"content":"     * @param startTime  New start time of task"},{"lineNumber":345,"author":{"gitId":"wish2023"},"content":"     * @param recurrence New recurrence of task"},{"lineNumber":346,"author":{"gitId":"wish2023"},"content":"     * @param time       Time related information of task"},{"lineNumber":347,"author":{"gitId":"wish2023"},"content":"     * @return"},{"lineNumber":348,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":349,"author":{"gitId":"wish2023"},"content":"    private boolean isFlexibleTaskEdit(String startTime, String recurrence, TimeData time) {"},{"lineNumber":350,"author":{"gitId":"wish2023"},"content":"        return time.getFlexible() \u0026\u0026 ((startTime !\u003d time.getStartTimeString()) || (recurrence !\u003d time.getRecurrence()));"},{"lineNumber":351,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":352,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":353,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":354,"author":{"gitId":"daniellimws"},"content":"     * Marks specified task as done."},{"lineNumber":355,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":356,"author":{"gitId":"daniellimws"},"content":"     * @param taskNumber Task number."},{"lineNumber":357,"author":{"gitId":"daniellimws"},"content":"     * @return Task marked as done."},{"lineNumber":358,"author":{"gitId":"alstontham"},"content":"     * @throws TaskNotFoundException thrown when the program is unable to find a task at the index"},{"lineNumber":359,"author":{"gitId":"alstontham"},"content":"     *                               specified by the user"},{"lineNumber":360,"author":{"gitId":"wish2023"},"content":"     * @throws TaskIsDoneException   Exception thrown when user tries to mark a task as done which is done."},{"lineNumber":361,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":362,"author":{"gitId":"wish2023"},"content":"    public Task markTaskAsDone(int taskNumber)"},{"lineNumber":363,"author":{"gitId":"wish2023"},"content":"            throws TaskNotFoundException, TaskIsDoneException {"},{"lineNumber":364,"author":{"gitId":"daniellimws"},"content":"        Task task \u003d getTaskFromNumber(taskNumber);"},{"lineNumber":365,"author":{"gitId":"daniellimws"},"content":"        task.setDone();"},{"lineNumber":366,"author":{"gitId":"daniellimws"},"content":"        return task;"},{"lineNumber":367,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":368,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":369,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":370,"author":{"gitId":"daniellimws"},"content":"     * Checks whether the task list contains a task with the given number."},{"lineNumber":371,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":372,"author":{"gitId":"daniellimws"},"content":"     * @param taskNumber number to search for."},{"lineNumber":373,"author":{"gitId":"daniellimws"},"content":"     * @return True if task with given number is found. False otherwise."},{"lineNumber":374,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":375,"author":{"gitId":"daniellimws"},"content":"    public boolean containsTaskWithNumber(int taskNumber) {"},{"lineNumber":376,"author":{"gitId":"daniellimws"},"content":"        for (Task t : tasks) {"},{"lineNumber":377,"author":{"gitId":"daniellimws"},"content":"            if (t.getNumber() \u003d\u003d taskNumber) {"},{"lineNumber":378,"author":{"gitId":"daniellimws"},"content":"                return true;"},{"lineNumber":379,"author":{"gitId":"daniellimws"},"content":"            }"},{"lineNumber":380,"author":{"gitId":"daniellimws"},"content":"        }"},{"lineNumber":381,"author":{"gitId":"daniellimws"},"content":"        return false;"},{"lineNumber":382,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":383,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":384,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":385,"author":{"gitId":"daniellimws"},"content":"     * Gets a task based on the number assigned to it."},{"lineNumber":386,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":387,"author":{"gitId":"daniellimws"},"content":"     * @param taskNumber number assigned to the task."},{"lineNumber":388,"author":{"gitId":"daniellimws"},"content":"     * @return The task with the given number. Null if not found."},{"lineNumber":389,"author":{"gitId":"alstontham"},"content":"     * @throws TaskNotFoundException thrown when the program is unable to find a task at the index"},{"lineNumber":390,"author":{"gitId":"alstontham"},"content":"     *                               specified by the user"},{"lineNumber":391,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":392,"author":{"gitId":"daniellimws"},"content":"    public Task getTaskFromNumber(int taskNumber) throws TaskNotFoundException {"},{"lineNumber":393,"author":{"gitId":"daniellimws"},"content":"        for (Task t : tasks) {"},{"lineNumber":394,"author":{"gitId":"daniellimws"},"content":"            if (t.getNumber() \u003d\u003d taskNumber) {"},{"lineNumber":395,"author":{"gitId":"daniellimws"},"content":"                return t;"},{"lineNumber":396,"author":{"gitId":"daniellimws"},"content":"            }"},{"lineNumber":397,"author":{"gitId":"daniellimws"},"content":"        }"},{"lineNumber":398,"author":{"gitId":"daniellimws"},"content":"        throw new TaskNotFoundException(taskNumber);"},{"lineNumber":399,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":400,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":401,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":402,"author":{"gitId":"daniellimws"},"content":"     * Returns a filtered task list."},{"lineNumber":403,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":404,"author":{"gitId":"daniellimws"},"content":"     * @param taskFilter The filter that decides which tasks are printed"},{"lineNumber":405,"author":{"gitId":"wish2023"},"content":"     * @return Filtered task list"},{"lineNumber":406,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":407,"author":{"gitId":"daniellimws"},"content":"    public TaskList getFilteredList(TaskFilter taskFilter) {"},{"lineNumber":408,"author":{"gitId":"daniellimws"},"content":"        ArrayList\u003cTask\u003e filteredTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":409,"author":{"gitId":"daniellimws"},"content":"        for (Task task : tasks) {"},{"lineNumber":410,"author":{"gitId":"daniellimws"},"content":"            if (taskFilter.isTaskIncluded(task)) {"},{"lineNumber":411,"author":{"gitId":"Kafcis"},"content":"                filteredTasks.add(task);"},{"lineNumber":412,"author":{"gitId":"daniellimws"},"content":"            }"},{"lineNumber":413,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":414,"author":{"gitId":"daniellimws"},"content":"        return new TaskList(filteredTasks);"},{"lineNumber":415,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":416,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":417,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":418,"author":{"gitId":"alstontham"},"content":"     * Gets the max index."},{"lineNumber":419,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":420,"author":{"gitId":"alstontham"},"content":"     * @return Max index"},{"lineNumber":421,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":422,"author":{"gitId":"daniellimws"},"content":"    public int getMaxNumber() {"},{"lineNumber":423,"author":{"gitId":"daniellimws"},"content":"        return maxNumber;"},{"lineNumber":424,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":425,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":426,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":427,"author":{"gitId":"alstontham"},"content":"     * Determines if two objects have the same attributes."},{"lineNumber":428,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":429,"author":{"gitId":"alstontham"},"content":"     * @param o object"},{"lineNumber":430,"author":{"gitId":"alstontham"},"content":"     * @return true if the two objects have the same attributes"},{"lineNumber":431,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":432,"author":{"gitId":"amanda-chua"},"content":"    @Override"},{"lineNumber":433,"author":{"gitId":"amanda-chua"},"content":"    public boolean equals(Object o) {"},{"lineNumber":434,"author":{"gitId":"amanda-chua"},"content":"        if (this \u003d\u003d o) {"},{"lineNumber":435,"author":{"gitId":"amanda-chua"},"content":"            return true;"},{"lineNumber":436,"author":{"gitId":"amanda-chua"},"content":"        }"},{"lineNumber":437,"author":{"gitId":"amanda-chua"},"content":"        if (!(o instanceof TaskList)) {"},{"lineNumber":438,"author":{"gitId":"amanda-chua"},"content":"            return false;"},{"lineNumber":439,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":440,"author":{"gitId":"amanda-chua"},"content":"        TaskList taskList \u003d (TaskList) o;"},{"lineNumber":441,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":442,"author":{"gitId":"daniellimws"},"content":"        return maxNumber \u003d\u003d taskList.maxNumber \u0026\u0026 getTasks().equals(taskList.getTasks());"},{"lineNumber":443,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":444,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":445,"author":{"gitId":"amanda-chua"},"content":"    @Override"},{"lineNumber":446,"author":{"gitId":"amanda-chua"},"content":"    public int hashCode() {"},{"lineNumber":447,"author":{"gitId":"daniellimws"},"content":"        return Objects.hash(getTasks(), maxNumber);"},{"lineNumber":448,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":449,"author":{"gitId":"wish2023"},"content":"}"}],"authorContributionMap":{"Kafcis":35,"alstontham":50,"amanda-chua":12,"daniellimws":101,"wish2023":251}},{"path":"src/main/java/athena/TaskTimeComparator.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Kafcis"},"content":"package athena;"},{"lineNumber":2,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":3,"author":{"gitId":"Kafcis"},"content":"import athena.task.Task;"},{"lineNumber":4,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":5,"author":{"gitId":"Kafcis"},"content":"import java.util.Comparator;"},{"lineNumber":6,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":7,"author":{"gitId":"Kafcis"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Kafcis"},"content":" *  Sorts the tasks descending order according to time."},{"lineNumber":9,"author":{"gitId":"Kafcis"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Kafcis"},"content":"public class TaskTimeComparator implements Comparator\u003cTask\u003e {"},{"lineNumber":11,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":12,"author":{"gitId":"Kafcis"},"content":"    public int compare(Task o1, Task o2) {"},{"lineNumber":13,"author":{"gitId":"Kafcis"},"content":"        int t1 \u003d o1.getTimeInfo().getDuration();"},{"lineNumber":14,"author":{"gitId":"Kafcis"},"content":"        int t2 \u003d o2.getTimeInfo().getDuration();"},{"lineNumber":15,"author":{"gitId":"Kafcis"},"content":"        if (t1 \u003e t2) {"},{"lineNumber":16,"author":{"gitId":"Kafcis"},"content":"            return -1;"},{"lineNumber":17,"author":{"gitId":"Kafcis"},"content":"        } else if (t1 \u003c t2) {"},{"lineNumber":18,"author":{"gitId":"Kafcis"},"content":"            return 1;"},{"lineNumber":19,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"Kafcis"},"content":"        return 0;"},{"lineNumber":21,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Kafcis"},"content":"}"}],"authorContributionMap":{"Kafcis":22}},{"path":"src/main/java/athena/TimeAllocator.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Kafcis"},"content":"package athena;"},{"lineNumber":2,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.allocator.NoNextSlotException;"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.InvalidRecurrenceException;"},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.TaskNotFoundException;"},{"lineNumber":6,"author":{"gitId":"Kafcis"},"content":"import athena.task.Task;"},{"lineNumber":7,"author":{"gitId":"Kafcis"},"content":"import athena.task.TimeData;"},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":"import athena.task.taskfilter.DayFilter;"},{"lineNumber":9,"author":{"gitId":"Kafcis"},"content":"import athena.task.taskfilter.FlexibleTimeFilter;"},{"lineNumber":10,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":11,"author":{"gitId":"Kafcis"},"content":"import java.time.LocalDate;"},{"lineNumber":12,"author":{"gitId":"Kafcis"},"content":"import java.time.LocalTime;"},{"lineNumber":13,"author":{"gitId":"Kafcis"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":14,"author":{"gitId":"Kafcis"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":16,"author":{"gitId":"Kafcis"},"content":"public class TimeAllocator {"},{"lineNumber":17,"author":{"gitId":"Kafcis"},"content":"    TaskList flexibleTaskList;"},{"lineNumber":18,"author":{"gitId":"Kafcis"},"content":"    TaskList fixedTaskList;"},{"lineNumber":19,"author":{"gitId":"Kafcis"},"content":"    TaskList taskList;"},{"lineNumber":20,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":21,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":22,"author":{"gitId":"Kafcis"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Kafcis"},"content":"     * This is run automatically to generate a timetable."},{"lineNumber":24,"author":{"gitId":"Kafcis"},"content":"     * option to auto assign at every input, reassignment at the end is possible"},{"lineNumber":25,"author":{"gitId":"Kafcis"},"content":"     * need to maintain the flexibility of the tasks to allow for multiple reruns"},{"lineNumber":26,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"Kafcis"},"content":"     * @param tasks tasks in the current TaskList"},{"lineNumber":28,"author":{"gitId":"Kafcis"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"daniellimws"},"content":"    public TimeAllocator(TaskList tasks) {"},{"lineNumber":30,"author":{"gitId":"Kafcis"},"content":"        this.flexibleTaskList \u003d tasks.getFilteredList(new FlexibleTimeFilter(true));"},{"lineNumber":31,"author":{"gitId":"Kafcis"},"content":"        this.fixedTaskList \u003d tasks.getFilteredList(new FlexibleTimeFilter(false));"},{"lineNumber":32,"author":{"gitId":"Kafcis"},"content":"        this.taskList \u003d tasks;"},{"lineNumber":33,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":34,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":36,"author":{"gitId":"Kafcis"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Kafcis"},"content":"     * Populates a record of fixed tasks."},{"lineNumber":38,"author":{"gitId":"Kafcis"},"content":"     * Finds vacant slots in the timetable"},{"lineNumber":39,"author":{"gitId":"Kafcis"},"content":"     * Calls the best arrangement for slot"},{"lineNumber":40,"author":{"gitId":"Kafcis"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Kafcis"},"content":"    public void runAllocate() {"},{"lineNumber":42,"author":{"gitId":"Kafcis"},"content":"        LocalDate currDay \u003d LocalDate.now();"},{"lineNumber":43,"author":{"gitId":"Kafcis"},"content":"        ArrayList\u003cTask\u003e undefinedTimeTasks \u003d getSortedFlexibleTasks(this.flexibleTaskList);"},{"lineNumber":44,"author":{"gitId":"Kafcis"},"content":"        for (int day \u003d 0; day \u003c 366; day++) {"},{"lineNumber":45,"author":{"gitId":"Kafcis"},"content":"            Log dayLog \u003d new Log(0, 24);"},{"lineNumber":46,"author":{"gitId":"Kafcis"},"content":"            ArrayList\u003cTask\u003e predefinedTimeTasks \u003d getSortedFixedTasks(getFixedDayTasks(currDay));"},{"lineNumber":47,"author":{"gitId":"Kafcis"},"content":"            dayLog.setFixedTasks(predefinedTimeTasks);"},{"lineNumber":48,"author":{"gitId":"Kafcis"},"content":"            TimeSlot currSlot \u003d new TimeSlot(dayLog);"},{"lineNumber":49,"author":{"gitId":"Kafcis"},"content":"            while (true) {"},{"lineNumber":50,"author":{"gitId":"Kafcis"},"content":"                try {"},{"lineNumber":51,"author":{"gitId":"Kafcis"},"content":"                    currSlot.findNextSlot();"},{"lineNumber":52,"author":{"gitId":"Kafcis"},"content":"                } catch (NoNextSlotException e) {"},{"lineNumber":53,"author":{"gitId":"Kafcis"},"content":"                    break;"},{"lineNumber":54,"author":{"gitId":"Kafcis"},"content":"                }"},{"lineNumber":55,"author":{"gitId":"Kafcis"},"content":"                Log bestLog \u003d new Log(currSlot, undefinedTimeTasks);"},{"lineNumber":56,"author":{"gitId":"Kafcis"},"content":"                bestLog.removeAssignedTasks(this.taskList);"},{"lineNumber":57,"author":{"gitId":"Kafcis"},"content":"                dayLog.populateLog(currSlot.getStart(), bestLog);"},{"lineNumber":58,"author":{"gitId":"Kafcis"},"content":"                assignTime(bestLog.getNumberList(), currSlot.getStart(), currDay);"},{"lineNumber":59,"author":{"gitId":"Kafcis"},"content":"                undefinedTimeTasks \u003d bestLog.getCarryOverTasks();"},{"lineNumber":60,"author":{"gitId":"Kafcis"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"Kafcis"},"content":"            for (Task currTask : undefinedTimeTasks) {"},{"lineNumber":62,"author":{"gitId":"Kafcis"},"content":"                try {"},{"lineNumber":63,"author":{"gitId":"Kafcis"},"content":"                    TimeData timeInfo \u003d this.taskList.getTaskFromNumber(currTask.getNumber()).getTimeInfo();"},{"lineNumber":64,"author":{"gitId":"Kafcis"},"content":"                    timeInfo.setStartTime(null);"},{"lineNumber":65,"author":{"gitId":"Kafcis"},"content":"                } catch (TaskNotFoundException e) {"},{"lineNumber":66,"author":{"gitId":"Kafcis"},"content":"                    //do nothing"},{"lineNumber":67,"author":{"gitId":"Kafcis"},"content":"                }"},{"lineNumber":68,"author":{"gitId":"Kafcis"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"Kafcis"},"content":"            currDay \u003d currDay.plusDays(1);"},{"lineNumber":70,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":73,"author":{"gitId":"Kafcis"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"Kafcis"},"content":"     * Assigns the best time to the Tasks."},{"lineNumber":75,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"Kafcis"},"content":"     * @param bestLog list of taskNumbers in the index corresponding to the hour they are assigned to"},{"lineNumber":77,"author":{"gitId":"Kafcis"},"content":"     * @param pos     starting position of the log"},{"lineNumber":78,"author":{"gitId":"Kafcis"},"content":"     * @param currDay date to assign tasks"},{"lineNumber":79,"author":{"gitId":"Kafcis"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"Kafcis"},"content":"    private void assignTime(ArrayList\u003cInteger\u003e bestLog, int pos, LocalDate currDay) {"},{"lineNumber":81,"author":{"gitId":"Kafcis"},"content":"        int count \u003d 0;"},{"lineNumber":82,"author":{"gitId":"Kafcis"},"content":"        ArrayList\u003cInteger\u003e assignedNumbers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":83,"author":{"gitId":"Kafcis"},"content":"        for (int taskNumber : bestLog) {"},{"lineNumber":84,"author":{"gitId":"Kafcis"},"content":"            if (!assignedNumbers.contains(taskNumber)) {"},{"lineNumber":85,"author":{"gitId":"Kafcis"},"content":"                try {"},{"lineNumber":86,"author":{"gitId":"Kafcis"},"content":"                    TimeData timeInfo \u003d this.taskList.getTaskFromNumber(taskNumber)"},{"lineNumber":87,"author":{"gitId":"Kafcis"},"content":"                            .getTimeInfo();"},{"lineNumber":88,"author":{"gitId":"Kafcis"},"content":"                    timeInfo.setStartTime(LocalTime.of(pos + count, 0));"},{"lineNumber":89,"author":{"gitId":"Kafcis"},"content":"                    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM\");"},{"lineNumber":90,"author":{"gitId":"Kafcis"},"content":"                    timeInfo.resetRecurrence();"},{"lineNumber":91,"author":{"gitId":"Kafcis"},"content":"                    timeInfo.setRecurrence(currDay.format(formatter));"},{"lineNumber":92,"author":{"gitId":"Kafcis"},"content":"                    assignedNumbers.add(taskNumber);"},{"lineNumber":93,"author":{"gitId":"Kafcis"},"content":"                    this.flexibleTaskList.deleteTask(taskNumber);"},{"lineNumber":94,"author":{"gitId":"Kafcis"},"content":"                } catch (TaskNotFoundException e) {"},{"lineNumber":95,"author":{"gitId":"Kafcis"},"content":"                    //do nothing"},{"lineNumber":96,"author":{"gitId":"wish2023"},"content":"                } catch (InvalidRecurrenceException e) {"},{"lineNumber":97,"author":{"gitId":"wish2023"},"content":"                    //do nothing?"},{"lineNumber":98,"author":{"gitId":"Kafcis"},"content":"                }"},{"lineNumber":99,"author":{"gitId":"Kafcis"},"content":"            }"},{"lineNumber":100,"author":{"gitId":"Kafcis"},"content":"            count++;"},{"lineNumber":101,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":104,"author":{"gitId":"Kafcis"},"content":"    private ArrayList\u003cTask\u003e getSortedFixedTasks(TaskList taskList) {"},{"lineNumber":105,"author":{"gitId":"Kafcis"},"content":"        TaskList fixedDayTasks \u003d taskList;"},{"lineNumber":106,"author":{"gitId":"Kafcis"},"content":"        ArrayList\u003cTask\u003e sortedTimeTasks \u003d fixedDayTasks.getTasks();"},{"lineNumber":107,"author":{"gitId":"Kafcis"},"content":"        sortedTimeTasks.sort(new TaskTimeComparator());"},{"lineNumber":108,"author":{"gitId":"Kafcis"},"content":"        sortedTimeTasks.sort(new TaskImportanceComparator());"},{"lineNumber":109,"author":{"gitId":"Kafcis"},"content":"        return sortedTimeTasks;"},{"lineNumber":110,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":112,"author":{"gitId":"Kafcis"},"content":"    private ArrayList\u003cTask\u003e getSortedFlexibleTasks(TaskList taskList) {"},{"lineNumber":113,"author":{"gitId":"Kafcis"},"content":"        TaskList flexibleDayTasks \u003d taskList;"},{"lineNumber":114,"author":{"gitId":"Kafcis"},"content":"        ArrayList\u003cTask\u003e sortedTimeTasks \u003d flexibleDayTasks.getTasks();"},{"lineNumber":115,"author":{"gitId":"Kafcis"},"content":"        sortedTimeTasks.sort(new TaskTimeComparator());"},{"lineNumber":116,"author":{"gitId":"Kafcis"},"content":"        sortedTimeTasks.sort(new TaskImportanceComparator());"},{"lineNumber":117,"author":{"gitId":"Kafcis"},"content":"        return sortedTimeTasks;"},{"lineNumber":118,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":120,"author":{"gitId":"Kafcis"},"content":"    private TaskList getFixedDayTasks(LocalDate date) {"},{"lineNumber":121,"author":{"gitId":"daniellimws"},"content":"        DayFilter filter \u003d new DayFilter(date);"},{"lineNumber":122,"author":{"gitId":"daniellimws"},"content":"        TaskList fixedDayTask \u003d this.fixedTaskList.getFilteredList(filter);"},{"lineNumber":123,"author":{"gitId":"Kafcis"},"content":"        return fixedDayTask;"},{"lineNumber":124,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":126,"author":{"gitId":"Kafcis"},"content":"}"}],"authorContributionMap":{"Kafcis":117,"daniellimws":7,"wish2023":2}},{"path":"src/main/java/athena/TimeSlot.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Kafcis"},"content":"package athena;"},{"lineNumber":2,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.allocator.NoNextSlotException;"},{"lineNumber":4,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":5,"author":{"gitId":"Kafcis"},"content":"public class TimeSlot {"},{"lineNumber":6,"author":{"gitId":"Kafcis"},"content":"    private Log dayLog;"},{"lineNumber":7,"author":{"gitId":"Kafcis"},"content":"    private final int wake \u003d 8;"},{"lineNumber":8,"author":{"gitId":"Kafcis"},"content":"    private final int sleep \u003d 22;"},{"lineNumber":9,"author":{"gitId":"Kafcis"},"content":"    private int start \u003d wake;"},{"lineNumber":10,"author":{"gitId":"Kafcis"},"content":"    private int end \u003d wake;"},{"lineNumber":11,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":12,"author":{"gitId":"Kafcis"},"content":"    public TimeSlot(Log dayLog) {"},{"lineNumber":13,"author":{"gitId":"Kafcis"},"content":"        this.dayLog \u003d dayLog;"},{"lineNumber":14,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":16,"author":{"gitId":"Kafcis"},"content":"    public void findNextSlot() throws NoNextSlotException {"},{"lineNumber":17,"author":{"gitId":"Kafcis"},"content":"        if (start \u003d\u003d sleep) {"},{"lineNumber":18,"author":{"gitId":"Kafcis"},"content":"            throw new NoNextSlotException();"},{"lineNumber":19,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"Kafcis"},"content":"        start \u003d end;"},{"lineNumber":21,"author":{"gitId":"Kafcis"},"content":"        for (; start \u003c sleep; start++) {"},{"lineNumber":22,"author":{"gitId":"Kafcis"},"content":"            if (dayLog.getStart(start) \u003d\u003d -1) {"},{"lineNumber":23,"author":{"gitId":"Kafcis"},"content":"                break;"},{"lineNumber":24,"author":{"gitId":"Kafcis"},"content":"            }"},{"lineNumber":25,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"Kafcis"},"content":"        end \u003d start;"},{"lineNumber":27,"author":{"gitId":"Kafcis"},"content":"        for (; end \u003c sleep; end++) {"},{"lineNumber":28,"author":{"gitId":"Kafcis"},"content":"            if (dayLog.getStart(end) !\u003d -1) {"},{"lineNumber":29,"author":{"gitId":"Kafcis"},"content":"                break;"},{"lineNumber":30,"author":{"gitId":"Kafcis"},"content":"            }"},{"lineNumber":31,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":34,"author":{"gitId":"Kafcis"},"content":"    public int getStart() {"},{"lineNumber":35,"author":{"gitId":"Kafcis"},"content":"        return start;"},{"lineNumber":36,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":38,"author":{"gitId":"Kafcis"},"content":"    public int getEnd() {"},{"lineNumber":39,"author":{"gitId":"Kafcis"},"content":"        return end;"},{"lineNumber":40,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Kafcis"},"content":"}"}],"authorContributionMap":{"Kafcis":40,"daniellimws":1}},{"path":"src/main/java/athena/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"amanda-chua"},"content":"package athena.commands;"},{"lineNumber":2,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":3,"author":{"gitId":"amanda-chua"},"content":"import athena.DateChecker;"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"import athena.Importance;"},{"lineNumber":5,"author":{"gitId":"amanda-chua"},"content":"import athena.TaskList;"},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.AddMissingRequiredParametersException;"},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.AddDateWrongFormatException;"},{"lineNumber":9,"author":{"gitId":"wish2023"},"content":"import athena.task.Task;"},{"lineNumber":10,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":11,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":12,"author":{"gitId":"alstontham"},"content":"import java.util.Objects;"},{"lineNumber":13,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":14,"author":{"gitId":"amanda-chua"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"amanda-chua"},"content":" * Handles adding tasks to the Tasks list."},{"lineNumber":16,"author":{"gitId":"amanda-chua"},"content":" */"},{"lineNumber":17,"author":{"gitId":"amanda-chua"},"content":"public class AddCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"wish2023"},"content":"    public static final String TODAY \u003d \"today\";"},{"lineNumber":19,"author":{"gitId":"amanda-chua"},"content":"    private String taskName;"},{"lineNumber":20,"author":{"gitId":"amanda-chua"},"content":"    private String taskStartTime;"},{"lineNumber":21,"author":{"gitId":"amanda-chua"},"content":"    private String taskDuration;"},{"lineNumber":22,"author":{"gitId":"amanda-chua"},"content":"    private String taskDeadline;"},{"lineNumber":23,"author":{"gitId":"amanda-chua"},"content":"    private String taskRecurrence;"},{"lineNumber":24,"author":{"gitId":"daniellimws"},"content":"    private Importance taskImportance;"},{"lineNumber":25,"author":{"gitId":"amanda-chua"},"content":"    private String taskNotes;"},{"lineNumber":26,"author":{"gitId":"Kafcis"},"content":"    private Boolean isTaskFlexible;"},{"lineNumber":27,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":28,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"amanda-chua"},"content":"     * Initializes the object with the parameters."},{"lineNumber":30,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"amanda-chua"},"content":"     * @param name       String representing name of task."},{"lineNumber":32,"author":{"gitId":"amanda-chua"},"content":"     * @param startTime  String representing start time of task."},{"lineNumber":33,"author":{"gitId":"amanda-chua"},"content":"     * @param duration   String representing duration of task."},{"lineNumber":34,"author":{"gitId":"amanda-chua"},"content":"     * @param deadline   String representing deadline of task."},{"lineNumber":35,"author":{"gitId":"amanda-chua"},"content":"     * @param recurrence String representing recurrence of task."},{"lineNumber":36,"author":{"gitId":"amanda-chua"},"content":"     * @param importance String representing importance of task."},{"lineNumber":37,"author":{"gitId":"amanda-chua"},"content":"     * @param notes      String representing additional notes of task."},{"lineNumber":38,"author":{"gitId":"Kafcis"},"content":"     * @param isFlexible Boolean representing if task time is flexible"},{"lineNumber":39,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"amanda-chua"},"content":"    public AddCommand(String name, String startTime, String duration, String deadline,"},{"lineNumber":41,"author":{"gitId":"daniellimws"},"content":"                      String recurrence, Importance importance, String notes, boolean isFlexible) {"},{"lineNumber":42,"author":{"gitId":"amanda-chua"},"content":"        taskName \u003d name;"},{"lineNumber":43,"author":{"gitId":"amanda-chua"},"content":"        assert !taskName.equals(\"\");"},{"lineNumber":44,"author":{"gitId":"amanda-chua"},"content":"        taskStartTime \u003d startTime;"},{"lineNumber":45,"author":{"gitId":"amanda-chua"},"content":"        taskDuration \u003d duration;"},{"lineNumber":46,"author":{"gitId":"amanda-chua"},"content":"        taskDeadline \u003d deadline;"},{"lineNumber":47,"author":{"gitId":"amanda-chua"},"content":"        taskRecurrence \u003d recurrence;"},{"lineNumber":48,"author":{"gitId":"daniellimws"},"content":"        taskImportance \u003d importance;"},{"lineNumber":49,"author":{"gitId":"amanda-chua"},"content":"        taskNotes \u003d notes;"},{"lineNumber":50,"author":{"gitId":"Kafcis"},"content":"        isTaskFlexible \u003d isFlexible;"},{"lineNumber":51,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":53,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"amanda-chua"},"content":"     * Adds a task to the Tasks list and"},{"lineNumber":55,"author":{"gitId":"amanda-chua"},"content":"     * calls Ui to print out the task added."},{"lineNumber":56,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"amanda-chua"},"content":"     * @param taskList Tasks list"},{"lineNumber":58,"author":{"gitId":"alstontham"},"content":"     * @param athenaUi       Ui"},{"lineNumber":59,"author":{"gitId":"amanda-chua"},"content":"     * @throws CommandException Exception thrown when there is an error when the user inputs a command"},{"lineNumber":60,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"amanda-chua"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"alstontham"},"content":"    public void execute(TaskList taskList, AthenaUi athenaUi)"},{"lineNumber":63,"author":{"gitId":"alstontham"},"content":"            throws CommandException {"},{"lineNumber":64,"author":{"gitId":"alstontham"},"content":"        if (taskName.equals(\"\")) {"},{"lineNumber":65,"author":{"gitId":"alstontham"},"content":"            throw new AddMissingRequiredParametersException();"},{"lineNumber":66,"author":{"gitId":"amanda-chua"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":68,"author":{"gitId":"wish2023"},"content":"        DateChecker dateChecker \u003d new DateChecker(taskRecurrence, taskStartTime);"},{"lineNumber":69,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":70,"author":{"gitId":"alstontham"},"content":"        try {"},{"lineNumber":71,"author":{"gitId":"wish2023"},"content":"            Task task \u003d taskList.addTask(taskName, taskStartTime, taskDuration, taskDeadline,"},{"lineNumber":72,"author":{"gitId":"Kafcis"},"content":"                    taskRecurrence, taskImportance, taskNotes, isTaskFlexible);"},{"lineNumber":73,"author":{"gitId":"wish2023"},"content":"            athenaUi.printTaskAdded(task);"},{"lineNumber":74,"author":{"gitId":"alstontham"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":75,"author":{"gitId":"alstontham"},"content":"            throw new AddDateWrongFormatException();"},{"lineNumber":76,"author":{"gitId":"alstontham"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":78,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":80,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"alstontham"},"content":"     * Determines if two objects have the same attributes."},{"lineNumber":82,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"alstontham"},"content":"     * @param o object"},{"lineNumber":84,"author":{"gitId":"alstontham"},"content":"     * @return true if the two objects have the same attributes"},{"lineNumber":85,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"alstontham"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"alstontham"},"content":"    public boolean equals(Object o) {"},{"lineNumber":88,"author":{"gitId":"alstontham"},"content":"        if (this \u003d\u003d o) {"},{"lineNumber":89,"author":{"gitId":"alstontham"},"content":"            return true;"},{"lineNumber":90,"author":{"gitId":"alstontham"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"alstontham"},"content":"        if (!(o instanceof AddCommand)) {"},{"lineNumber":92,"author":{"gitId":"alstontham"},"content":"            return false;"},{"lineNumber":93,"author":{"gitId":"alstontham"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"alstontham"},"content":"        AddCommand that \u003d (AddCommand) o;"},{"lineNumber":95,"author":{"gitId":"alstontham"},"content":"        return Objects.equals(taskName, that.taskName)"},{"lineNumber":96,"author":{"gitId":"alstontham"},"content":"                \u0026\u0026 Objects.equals(taskStartTime, that.taskStartTime)"},{"lineNumber":97,"author":{"gitId":"alstontham"},"content":"                \u0026\u0026 Objects.equals(taskDuration, that.taskDuration)"},{"lineNumber":98,"author":{"gitId":"alstontham"},"content":"                \u0026\u0026 Objects.equals(taskDeadline, that.taskDeadline)"},{"lineNumber":99,"author":{"gitId":"alstontham"},"content":"                \u0026\u0026 Objects.equals(taskRecurrence, that.taskRecurrence)"},{"lineNumber":100,"author":{"gitId":"alstontham"},"content":"                \u0026\u0026 taskImportance \u003d\u003d that.taskImportance"},{"lineNumber":101,"author":{"gitId":"alstontham"},"content":"                \u0026\u0026 Objects.equals(taskNotes, that.taskNotes);"},{"lineNumber":102,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":104,"author":{"gitId":"alstontham"},"content":"    @Override"},{"lineNumber":105,"author":{"gitId":"alstontham"},"content":"    public int hashCode() {"},{"lineNumber":106,"author":{"gitId":"alstontham"},"content":"        return Objects.hash(taskName, taskStartTime, taskDuration,"},{"lineNumber":107,"author":{"gitId":"alstontham"},"content":"                taskDeadline, taskRecurrence, taskImportance, taskNotes);"},{"lineNumber":108,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":110,"author":{"gitId":"amanda-chua"},"content":"}"}],"authorContributionMap":{"alstontham":43,"Kafcis":6,"amanda-chua":47,"daniellimws":7,"wish2023":7}},{"path":"src/main/java/athena/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"amanda-chua"},"content":"package athena.commands;"},{"lineNumber":2,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":3,"author":{"gitId":"amanda-chua"},"content":"import athena.TaskList;"},{"lineNumber":4,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":6,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":7,"author":{"gitId":"amanda-chua"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"amanda-chua"},"content":" * Abstract Command class for Command objects."},{"lineNumber":9,"author":{"gitId":"amanda-chua"},"content":" */"},{"lineNumber":10,"author":{"gitId":"amanda-chua"},"content":"public abstract class Command {"},{"lineNumber":11,"author":{"gitId":"amanda-chua"},"content":"    protected boolean isExit;"},{"lineNumber":12,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":13,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"amanda-chua"},"content":"     * Set isExit to be false initially."},{"lineNumber":15,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"amanda-chua"},"content":"    public Command() {"},{"lineNumber":17,"author":{"gitId":"amanda-chua"},"content":"        isExit \u003d false;"},{"lineNumber":18,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":20,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"amanda-chua"},"content":"     * For Commands execution."},{"lineNumber":22,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"amanda-chua"},"content":"     * @param taskList Tasks list"},{"lineNumber":24,"author":{"gitId":"alstontham"},"content":"     * @param athenaUi       Ui"},{"lineNumber":25,"author":{"gitId":"alstontham"},"content":"     * @throws CommandException Exception thrown when there is an error in user command"},{"lineNumber":26,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"alstontham"},"content":"    public abstract void execute(TaskList taskList, AthenaUi athenaUi) throws CommandException;"},{"lineNumber":28,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":29,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"amanda-chua"},"content":"     * Check if the command is exit."},{"lineNumber":31,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"amanda-chua"},"content":"     * @return true if exit, false if not exit."},{"lineNumber":33,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"alstontham"},"content":"    public boolean getIsExit() {"},{"lineNumber":35,"author":{"gitId":"amanda-chua"},"content":"        return isExit;"},{"lineNumber":36,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"amanda-chua"},"content":"}"}],"authorContributionMap":{"alstontham":5,"amanda-chua":31,"daniellimws":1}},{"path":"src/main/java/athena/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"amanda-chua"},"content":"package athena.commands;"},{"lineNumber":2,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":3,"author":{"gitId":"amanda-chua"},"content":"import athena.TaskList;"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.DeleteInvalidIndexException;"},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.TaskNotFoundException;"},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":"import athena.task.Task;"},{"lineNumber":7,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":8,"author":{"gitId":"alstontham"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":10,"author":{"gitId":"amanda-chua"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"amanda-chua"},"content":" * Handles the delete command."},{"lineNumber":12,"author":{"gitId":"amanda-chua"},"content":" */"},{"lineNumber":13,"author":{"gitId":"amanda-chua"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"amanda-chua"},"content":"    private int deleteIndex;"},{"lineNumber":15,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":16,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"amanda-chua"},"content":"     * Initializes the object with the index of task to be deleted."},{"lineNumber":18,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"Kafcis"},"content":"     * @param index int representing the index of task."},{"lineNumber":20,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"amanda-chua"},"content":"    public DeleteCommand(int index) {"},{"lineNumber":22,"author":{"gitId":"alstontham"},"content":"        deleteIndex \u003d index;"},{"lineNumber":23,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":25,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"amanda-chua"},"content":"     * Deletes a task from the Tasks list and"},{"lineNumber":27,"author":{"gitId":"amanda-chua"},"content":"     * calls Ui to print task deleted."},{"lineNumber":28,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"amanda-chua"},"content":"     * @param taskList Tasks list"},{"lineNumber":30,"author":{"gitId":"alstontham"},"content":"     * @param athenaUi       Ui"},{"lineNumber":31,"author":{"gitId":"amanda-chua"},"content":"     * @throws DeleteInvalidIndexException Exception thrown when the user tries to enter the index of a task that"},{"lineNumber":32,"author":{"gitId":"alstontham"},"content":"     *                               does not exist"},{"lineNumber":33,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"amanda-chua"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"alstontham"},"content":"    public void execute(TaskList taskList, AthenaUi athenaUi) throws DeleteInvalidIndexException {"},{"lineNumber":36,"author":{"gitId":"alstontham"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"Kafcis"},"content":"            Task deletedTask \u003d taskList.deleteTask(deleteIndex);"},{"lineNumber":38,"author":{"gitId":"Kafcis"},"content":"            String taskRestore \u003d deletedTask.getTaskRestore();"},{"lineNumber":39,"author":{"gitId":"alstontham"},"content":"            athenaUi.printTaskDeleted(deletedTask, taskRestore);"},{"lineNumber":40,"author":{"gitId":"alstontham"},"content":"        } catch (TaskNotFoundException e) {"},{"lineNumber":41,"author":{"gitId":"alstontham"},"content":"            throw new DeleteInvalidIndexException();"},{"lineNumber":42,"author":{"gitId":"alstontham"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":44,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":46,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"alstontham"},"content":"     * Determines if two objects have the same attributes."},{"lineNumber":48,"author":{"gitId":"alstontham"},"content":"     * @param o object"},{"lineNumber":49,"author":{"gitId":"alstontham"},"content":"     * @return true if the two objects have the same attributes"},{"lineNumber":50,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"alstontham"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"alstontham"},"content":"    public boolean equals(Object o) {"},{"lineNumber":53,"author":{"gitId":"alstontham"},"content":"        if (this \u003d\u003d o) {"},{"lineNumber":54,"author":{"gitId":"alstontham"},"content":"            return true;"},{"lineNumber":55,"author":{"gitId":"alstontham"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"alstontham"},"content":"        if (!(o instanceof DeleteCommand)) {"},{"lineNumber":57,"author":{"gitId":"alstontham"},"content":"            return false;"},{"lineNumber":58,"author":{"gitId":"alstontham"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"alstontham"},"content":"        DeleteCommand that \u003d (DeleteCommand) o;"},{"lineNumber":60,"author":{"gitId":"alstontham"},"content":"        return deleteIndex \u003d\u003d that.deleteIndex;"},{"lineNumber":61,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":63,"author":{"gitId":"alstontham"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"alstontham"},"content":"    public int hashCode() {"},{"lineNumber":65,"author":{"gitId":"alstontham"},"content":"        return Objects.hash(deleteIndex);"},{"lineNumber":66,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"amanda-chua"},"content":"}"}],"authorContributionMap":{"alstontham":35,"Kafcis":4,"amanda-chua":25,"daniellimws":3}},{"path":"src/main/java/athena/commands/DoneCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"amanda-chua"},"content":"package athena.commands;"},{"lineNumber":2,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":3,"author":{"gitId":"amanda-chua"},"content":"import athena.TaskList;"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.DoneInvalidIndexException;"},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.TaskIsDoneException;"},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.TaskNotFoundException;"},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":"import athena.task.Task;"},{"lineNumber":8,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":9,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":10,"author":{"gitId":"alstontham"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":12,"author":{"gitId":"amanda-chua"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"amanda-chua"},"content":" * Handles the done command."},{"lineNumber":14,"author":{"gitId":"amanda-chua"},"content":" */"},{"lineNumber":15,"author":{"gitId":"amanda-chua"},"content":"public class DoneCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"daniellimws"},"content":"    private int taskNumber;"},{"lineNumber":17,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":18,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"amanda-chua"},"content":"     * Initializes the object with the task number of task to be mark as done."},{"lineNumber":20,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"Kafcis"},"content":"     * @param taskNumber int representing the task number of task."},{"lineNumber":22,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"daniellimws"},"content":"    public DoneCommand(int taskNumber) {"},{"lineNumber":24,"author":{"gitId":"daniellimws"},"content":"        this.taskNumber \u003d taskNumber;"},{"lineNumber":25,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":27,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"amanda-chua"},"content":"     * Marks a task as done from the Tasks list and"},{"lineNumber":29,"author":{"gitId":"amanda-chua"},"content":"     * calls Ui to print task marked as done."},{"lineNumber":30,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"amanda-chua"},"content":"     * @param taskList Tasks list"},{"lineNumber":32,"author":{"gitId":"alstontham"},"content":"     * @param athenaUi       Ui"},{"lineNumber":33,"author":{"gitId":"amanda-chua"},"content":"     * @throws DoneInvalidIndexException Exception thrown when the user tries to enter the index of a task that"},{"lineNumber":34,"author":{"gitId":"alstontham"},"content":"     *                               does not exist"},{"lineNumber":35,"author":{"gitId":"wish2023"},"content":"     * @throws TaskIsDoneException Exception thrown when user tries to mark a task as done which is done."},{"lineNumber":36,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"amanda-chua"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"wish2023"},"content":"    public void execute(TaskList taskList, AthenaUi athenaUi)"},{"lineNumber":39,"author":{"gitId":"wish2023"},"content":"            throws DoneInvalidIndexException, TaskIsDoneException {"},{"lineNumber":40,"author":{"gitId":"alstontham"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"daniellimws"},"content":"            Task taskDone \u003d taskList.markTaskAsDone(taskNumber);"},{"lineNumber":42,"author":{"gitId":"alstontham"},"content":"            athenaUi.printTaskDone(taskDone);"},{"lineNumber":43,"author":{"gitId":"alstontham"},"content":"        } catch (TaskNotFoundException e) {"},{"lineNumber":44,"author":{"gitId":"alstontham"},"content":"            throw new DoneInvalidIndexException();"},{"lineNumber":45,"author":{"gitId":"alstontham"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":47,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":49,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"alstontham"},"content":"     * Determines if two objects have the same attributes."},{"lineNumber":51,"author":{"gitId":"alstontham"},"content":"     * @param o object"},{"lineNumber":52,"author":{"gitId":"alstontham"},"content":"     * @return true if the two objects have the same attributes"},{"lineNumber":53,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"alstontham"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"alstontham"},"content":"    public boolean equals(Object o) {"},{"lineNumber":56,"author":{"gitId":"alstontham"},"content":"        if (this \u003d\u003d o) {"},{"lineNumber":57,"author":{"gitId":"alstontham"},"content":"            return true;"},{"lineNumber":58,"author":{"gitId":"alstontham"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"alstontham"},"content":"        if (!(o instanceof DoneCommand)) {"},{"lineNumber":60,"author":{"gitId":"alstontham"},"content":"            return false;"},{"lineNumber":61,"author":{"gitId":"alstontham"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"alstontham"},"content":"        DoneCommand that \u003d (DoneCommand) o;"},{"lineNumber":63,"author":{"gitId":"daniellimws"},"content":"        return taskNumber \u003d\u003d that.taskNumber;"},{"lineNumber":64,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":66,"author":{"gitId":"alstontham"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"alstontham"},"content":"    public int hashCode() {"},{"lineNumber":68,"author":{"gitId":"daniellimws"},"content":"        return Objects.hash(taskNumber);"},{"lineNumber":69,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"amanda-chua"},"content":"}"}],"authorContributionMap":{"alstontham":32,"Kafcis":1,"amanda-chua":24,"daniellimws":10,"wish2023":3}},{"path":"src/main/java/athena/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"amanda-chua"},"content":"package athena.commands;"},{"lineNumber":2,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":3,"author":{"gitId":"amanda-chua"},"content":"import athena.DateChecker;"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"import athena.Importance;"},{"lineNumber":5,"author":{"gitId":"amanda-chua"},"content":"import athena.TaskList;"},{"lineNumber":6,"author":{"gitId":"wish2023"},"content":"import athena.task.Task;"},{"lineNumber":7,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":9,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":10,"author":{"gitId":"alstontham"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":12,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"alstontham"},"content":" * Handles the edit command."},{"lineNumber":14,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":15,"author":{"gitId":"amanda-chua"},"content":"public class EditCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"daniellimws"},"content":"    private int taskNumber;"},{"lineNumber":17,"author":{"gitId":"amanda-chua"},"content":"    private String taskName;"},{"lineNumber":18,"author":{"gitId":"amanda-chua"},"content":"    private String taskStartTime;"},{"lineNumber":19,"author":{"gitId":"amanda-chua"},"content":"    private String taskDuration;"},{"lineNumber":20,"author":{"gitId":"amanda-chua"},"content":"    private String taskDeadline;"},{"lineNumber":21,"author":{"gitId":"amanda-chua"},"content":"    private String taskRecurrence;"},{"lineNumber":22,"author":{"gitId":"daniellimws"},"content":"    private Importance taskImportance;"},{"lineNumber":23,"author":{"gitId":"amanda-chua"},"content":"    private String taskNotes;"},{"lineNumber":24,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":25,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"amanda-chua"},"content":"     * Initializes the object with the parameters."},{"lineNumber":27,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"Kafcis"},"content":"     * @param number     int representing index of task."},{"lineNumber":29,"author":{"gitId":"amanda-chua"},"content":"     * @param name       String representing name of task."},{"lineNumber":30,"author":{"gitId":"amanda-chua"},"content":"     * @param startTime  String representing start time of task."},{"lineNumber":31,"author":{"gitId":"amanda-chua"},"content":"     * @param duration   String representing duration of task."},{"lineNumber":32,"author":{"gitId":"amanda-chua"},"content":"     * @param deadline   String representing deadline of task."},{"lineNumber":33,"author":{"gitId":"amanda-chua"},"content":"     * @param recurrence String representing recurrence of task."},{"lineNumber":34,"author":{"gitId":"amanda-chua"},"content":"     * @param importance String representing importance of task."},{"lineNumber":35,"author":{"gitId":"amanda-chua"},"content":"     * @param notes      String representing additional notes of task."},{"lineNumber":36,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"daniellimws"},"content":"    public EditCommand(int number, String name, String startTime, String duration, String deadline,"},{"lineNumber":38,"author":{"gitId":"daniellimws"},"content":"                       String recurrence, Importance importance, String notes) {"},{"lineNumber":39,"author":{"gitId":"daniellimws"},"content":"        taskNumber \u003d number;"},{"lineNumber":40,"author":{"gitId":"amanda-chua"},"content":"        taskName \u003d name;"},{"lineNumber":41,"author":{"gitId":"amanda-chua"},"content":"        taskStartTime \u003d startTime;"},{"lineNumber":42,"author":{"gitId":"amanda-chua"},"content":"        taskDuration \u003d duration;"},{"lineNumber":43,"author":{"gitId":"amanda-chua"},"content":"        taskDeadline \u003d deadline;"},{"lineNumber":44,"author":{"gitId":"amanda-chua"},"content":"        taskRecurrence \u003d recurrence;"},{"lineNumber":45,"author":{"gitId":"amanda-chua"},"content":"        taskImportance \u003d importance;"},{"lineNumber":46,"author":{"gitId":"amanda-chua"},"content":"        taskNotes \u003d notes;"},{"lineNumber":47,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":49,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"amanda-chua"},"content":"     * Edits a task from the Tasks list and"},{"lineNumber":51,"author":{"gitId":"amanda-chua"},"content":"     * calls Ui to print task edited."},{"lineNumber":52,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"amanda-chua"},"content":"     * @param taskList Tasks list"},{"lineNumber":54,"author":{"gitId":"alstontham"},"content":"     * @param athenaUi       Ui"},{"lineNumber":55,"author":{"gitId":"amanda-chua"},"content":"     * @throws CommandException Exception thrown when there is an error when the user inputs a command"},{"lineNumber":56,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"amanda-chua"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"wish2023"},"content":"    public void execute(TaskList taskList, AthenaUi athenaUi) throws CommandException {"},{"lineNumber":59,"author":{"gitId":"wish2023"},"content":"        DateChecker dateChecker \u003d new DateChecker(taskRecurrence, taskStartTime);"},{"lineNumber":60,"author":{"gitId":"wish2023"},"content":"        Task task \u003d taskList.editTask(taskNumber, taskName, taskStartTime, taskDuration, taskDeadline,"},{"lineNumber":61,"author":{"gitId":"amanda-chua"},"content":"                taskRecurrence, taskImportance, taskNotes);"},{"lineNumber":62,"author":{"gitId":"wish2023"},"content":"        athenaUi.printTaskEdited(task);"},{"lineNumber":63,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":65,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"alstontham"},"content":"     * Determines if two objects have the same attributes."},{"lineNumber":67,"author":{"gitId":"alstontham"},"content":"     * @param o object"},{"lineNumber":68,"author":{"gitId":"alstontham"},"content":"     * @return true if the two objects have the same attributes"},{"lineNumber":69,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"alstontham"},"content":"    @Override"},{"lineNumber":71,"author":{"gitId":"alstontham"},"content":"    public boolean equals(Object o) {"},{"lineNumber":72,"author":{"gitId":"alstontham"},"content":"        if (this \u003d\u003d o) {"},{"lineNumber":73,"author":{"gitId":"alstontham"},"content":"            return true;"},{"lineNumber":74,"author":{"gitId":"amanda-chua"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"alstontham"},"content":"        if (!(o instanceof EditCommand)) {"},{"lineNumber":76,"author":{"gitId":"alstontham"},"content":"            return false;"},{"lineNumber":77,"author":{"gitId":"alstontham"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"alstontham"},"content":"        EditCommand that \u003d (EditCommand) o;"},{"lineNumber":79,"author":{"gitId":"daniellimws"},"content":"        return taskNumber \u003d\u003d that.taskNumber"},{"lineNumber":80,"author":{"gitId":"alstontham"},"content":"                \u0026\u0026 Objects.equals(taskName, that.taskName)"},{"lineNumber":81,"author":{"gitId":"alstontham"},"content":"                \u0026\u0026 Objects.equals(taskStartTime, that.taskStartTime)"},{"lineNumber":82,"author":{"gitId":"alstontham"},"content":"                \u0026\u0026 Objects.equals(taskDuration, that.taskDuration)"},{"lineNumber":83,"author":{"gitId":"alstontham"},"content":"                \u0026\u0026 Objects.equals(taskDeadline, that.taskDeadline)"},{"lineNumber":84,"author":{"gitId":"alstontham"},"content":"                \u0026\u0026 Objects.equals(taskRecurrence, that.taskRecurrence)"},{"lineNumber":85,"author":{"gitId":"alstontham"},"content":"                \u0026\u0026 taskImportance \u003d\u003d that.taskImportance"},{"lineNumber":86,"author":{"gitId":"alstontham"},"content":"                \u0026\u0026 Objects.equals(taskNotes, that.taskNotes);"},{"lineNumber":87,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":89,"author":{"gitId":"alstontham"},"content":"    @Override"},{"lineNumber":90,"author":{"gitId":"alstontham"},"content":"    public int hashCode() {"},{"lineNumber":91,"author":{"gitId":"daniellimws"},"content":"        return Objects.hash(taskNumber, taskName, taskStartTime, taskDuration,"},{"lineNumber":92,"author":{"gitId":"alstontham"},"content":"                taskDeadline, taskRecurrence, taskImportance, taskNotes);"},{"lineNumber":93,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"amanda-chua"},"content":"}"}],"authorContributionMap":{"alstontham":33,"Kafcis":1,"amanda-chua":46,"daniellimws":9,"wish2023":5}},{"path":"src/main/java/athena/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"amanda-chua"},"content":"package athena.commands;"},{"lineNumber":2,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":3,"author":{"gitId":"amanda-chua"},"content":"import athena.TaskList;"},{"lineNumber":4,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":5,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":6,"author":{"gitId":"amanda-chua"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"amanda-chua"},"content":" * Handles the exit command."},{"lineNumber":8,"author":{"gitId":"amanda-chua"},"content":" */"},{"lineNumber":9,"author":{"gitId":"amanda-chua"},"content":"public class ExitCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":11,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"amanda-chua"},"content":"     * Setting isExit to be true so program exits."},{"lineNumber":13,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"amanda-chua"},"content":"    public ExitCommand() {"},{"lineNumber":15,"author":{"gitId":"amanda-chua"},"content":"        super();"},{"lineNumber":16,"author":{"gitId":"amanda-chua"},"content":"        isExit \u003d true;"},{"lineNumber":17,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":19,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"amanda-chua"},"content":"     * Calls Ui to print exit message."},{"lineNumber":21,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"amanda-chua"},"content":"     * @param taskList Tasks list"},{"lineNumber":23,"author":{"gitId":"alstontham"},"content":"     * @param athenaUi       Ui"},{"lineNumber":24,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"amanda-chua"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"alstontham"},"content":"    public void execute(TaskList taskList, AthenaUi athenaUi) {"},{"lineNumber":27,"author":{"gitId":"alstontham"},"content":"        athenaUi.printExitMessage();"},{"lineNumber":28,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"amanda-chua"},"content":"}"}],"authorContributionMap":{"alstontham":4,"amanda-chua":25}},{"path":"src/main/java/athena/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"amanda-chua"},"content":"package athena.commands;"},{"lineNumber":2,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":3,"author":{"gitId":"amanda-chua"},"content":"import athena.TaskList;"},{"lineNumber":4,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":5,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":6,"author":{"gitId":"amanda-chua"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"amanda-chua"},"content":" * Handles the help command."},{"lineNumber":8,"author":{"gitId":"amanda-chua"},"content":" */"},{"lineNumber":9,"author":{"gitId":"amanda-chua"},"content":"public class HelpCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":11,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"amanda-chua"},"content":"     * Calls Ui to print help output."},{"lineNumber":13,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"amanda-chua"},"content":"     * @param taskList Tasks list"},{"lineNumber":15,"author":{"gitId":"alstontham"},"content":"     * @param athenaUi       Ui"},{"lineNumber":16,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"amanda-chua"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"alstontham"},"content":"    public void execute(TaskList taskList, AthenaUi athenaUi) {"},{"lineNumber":19,"author":{"gitId":"alstontham"},"content":"        athenaUi.printHelp();"},{"lineNumber":20,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"amanda-chua"},"content":"}"}],"authorContributionMap":{"alstontham":4,"amanda-chua":17}},{"path":"src/main/java/athena/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"amanda-chua"},"content":"package athena.commands;"},{"lineNumber":2,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":3,"author":{"gitId":"alstontham"},"content":"import athena.Forecast;"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"import athena.Importance;"},{"lineNumber":5,"author":{"gitId":"amanda-chua"},"content":"import athena.TaskList;"},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.EmptyTaskListException;"},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":"import athena.timetable.Timetable;"},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":9,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":10,"author":{"gitId":"alstontham"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":12,"author":{"gitId":"amanda-chua"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"amanda-chua"},"content":" * Handles the list command."},{"lineNumber":14,"author":{"gitId":"amanda-chua"},"content":" */"},{"lineNumber":15,"author":{"gitId":"amanda-chua"},"content":"public class ListCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"daniellimws"},"content":"    private final Importance taskImportance;"},{"lineNumber":17,"author":{"gitId":"daniellimws"},"content":"    private final Forecast taskForecast;"},{"lineNumber":18,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":19,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"amanda-chua"},"content":"     * Initializes the object with the parameters."},{"lineNumber":21,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"amanda-chua"},"content":"     * @param importance Importance representing importance of task."},{"lineNumber":23,"author":{"gitId":"amanda-chua"},"content":"     * @param forecast   Forecast representing forecast of task."},{"lineNumber":24,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"alstontham"},"content":"    public ListCommand(Importance importance, Forecast forecast) {"},{"lineNumber":26,"author":{"gitId":"amanda-chua"},"content":"        taskImportance \u003d importance;"},{"lineNumber":27,"author":{"gitId":"amanda-chua"},"content":"        taskForecast \u003d forecast;"},{"lineNumber":28,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":30,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"amanda-chua"},"content":"     * Calls TaskList to filter the list based on importance and"},{"lineNumber":32,"author":{"gitId":"amanda-chua"},"content":"     * calls Ui to print the list of tasks."},{"lineNumber":33,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"amanda-chua"},"content":"     * @param taskList Tasks list"},{"lineNumber":35,"author":{"gitId":"alstontham"},"content":"     * @param athenaUi       Ui"},{"lineNumber":36,"author":{"gitId":"alstontham"},"content":"     * @throws EmptyTaskListException Exception thrown when the task list is empty"},{"lineNumber":37,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"amanda-chua"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"daniellimws"},"content":"    public void execute(TaskList taskList, AthenaUi athenaUi)"},{"lineNumber":40,"author":{"gitId":"daniellimws"},"content":"            throws EmptyTaskListException {"},{"lineNumber":41,"author":{"gitId":"alstontham"},"content":"        if (taskList.getTasks().isEmpty()) {"},{"lineNumber":42,"author":{"gitId":"alstontham"},"content":"            throw new EmptyTaskListException();"},{"lineNumber":43,"author":{"gitId":"alstontham"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"daniellimws"},"content":"        Timetable timetable \u003d new Timetable(taskList, taskImportance, taskForecast);"},{"lineNumber":45,"author":{"gitId":"alstontham"},"content":"        athenaUi.printTimetable(timetable);"},{"lineNumber":46,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":48,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"alstontham"},"content":"     * Determines if two objects have the same attributes."},{"lineNumber":50,"author":{"gitId":"alstontham"},"content":"     * @param o object"},{"lineNumber":51,"author":{"gitId":"alstontham"},"content":"     * @return true if the two objects have the same attributes"},{"lineNumber":52,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"alstontham"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"alstontham"},"content":"    public boolean equals(Object o) {"},{"lineNumber":55,"author":{"gitId":"alstontham"},"content":"        if (this \u003d\u003d o) {"},{"lineNumber":56,"author":{"gitId":"alstontham"},"content":"            return true;"},{"lineNumber":57,"author":{"gitId":"alstontham"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"alstontham"},"content":"        if (!(o instanceof ListCommand)) {"},{"lineNumber":59,"author":{"gitId":"alstontham"},"content":"            return false;"},{"lineNumber":60,"author":{"gitId":"alstontham"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"alstontham"},"content":"        ListCommand that \u003d (ListCommand) o;"},{"lineNumber":62,"author":{"gitId":"alstontham"},"content":"        return taskImportance \u003d\u003d that.taskImportance \u0026\u0026 taskForecast \u003d\u003d that.taskForecast;"},{"lineNumber":63,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":65,"author":{"gitId":"alstontham"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"alstontham"},"content":"    public int hashCode() {"},{"lineNumber":67,"author":{"gitId":"alstontham"},"content":"        return Objects.hash(taskImportance, taskForecast);"},{"lineNumber":68,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"amanda-chua"},"content":"}"}],"authorContributionMap":{"alstontham":32,"amanda-chua":27,"daniellimws":10}},{"path":"src/main/java/athena/commands/ViewCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"amanda-chua"},"content":"package athena.commands;"},{"lineNumber":2,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":3,"author":{"gitId":"amanda-chua"},"content":"import athena.TaskList;"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.TaskNotFoundException;"},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.ViewInvalidIndexException;"},{"lineNumber":6,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":7,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":8,"author":{"gitId":"amanda-chua"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":10,"author":{"gitId":"amanda-chua"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"amanda-chua"},"content":" * Handles the view command."},{"lineNumber":12,"author":{"gitId":"amanda-chua"},"content":" */"},{"lineNumber":13,"author":{"gitId":"amanda-chua"},"content":"public class ViewCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"amanda-chua"},"content":"    private int taskNumber;"},{"lineNumber":15,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":16,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"amanda-chua"},"content":"     * Initializes the object with the task number of task to be viewed."},{"lineNumber":18,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"Kafcis"},"content":"     * @param taskNumber int representing the task number of task."},{"lineNumber":20,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"amanda-chua"},"content":"    public ViewCommand(int taskNumber) {"},{"lineNumber":22,"author":{"gitId":"amanda-chua"},"content":"        this.taskNumber \u003d taskNumber;"},{"lineNumber":23,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":25,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"amanda-chua"},"content":"     * View a task from the Tasks list and"},{"lineNumber":27,"author":{"gitId":"amanda-chua"},"content":"     * calls Ui to print task details."},{"lineNumber":28,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"amanda-chua"},"content":"     * @param taskList Tasks list"},{"lineNumber":30,"author":{"gitId":"alstontham"},"content":"     * @param athenaUi       Ui"},{"lineNumber":31,"author":{"gitId":"amanda-chua"},"content":"     * @throws ViewInvalidIndexException Exception thrown when the user tries to enter the index of a task that"},{"lineNumber":32,"author":{"gitId":"amanda-chua"},"content":"     *                               does not exist"},{"lineNumber":33,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"amanda-chua"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"alstontham"},"content":"    public void execute(TaskList taskList, AthenaUi athenaUi) throws ViewInvalidIndexException {"},{"lineNumber":36,"author":{"gitId":"alstontham"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"amanda-chua"},"content":"            String taskDescription \u003d taskList.getTaskDescription(taskNumber);"},{"lineNumber":38,"author":{"gitId":"alstontham"},"content":"            athenaUi.printTaskDetails(taskDescription);"},{"lineNumber":39,"author":{"gitId":"alstontham"},"content":"        } catch (TaskNotFoundException e) {"},{"lineNumber":40,"author":{"gitId":"alstontham"},"content":"            throw new ViewInvalidIndexException();"},{"lineNumber":41,"author":{"gitId":"alstontham"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":43,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":45,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"amanda-chua"},"content":"     * Determines if two objects have the same attributes."},{"lineNumber":47,"author":{"gitId":"amanda-chua"},"content":"     * @param o object"},{"lineNumber":48,"author":{"gitId":"amanda-chua"},"content":"     * @return true if the two objects have the same attributes"},{"lineNumber":49,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"amanda-chua"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"amanda-chua"},"content":"    public boolean equals(Object o) {"},{"lineNumber":52,"author":{"gitId":"amanda-chua"},"content":"        if (this \u003d\u003d o) {"},{"lineNumber":53,"author":{"gitId":"amanda-chua"},"content":"            return true;"},{"lineNumber":54,"author":{"gitId":"amanda-chua"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"amanda-chua"},"content":"        if (!(o instanceof ViewCommand)) {"},{"lineNumber":56,"author":{"gitId":"amanda-chua"},"content":"            return false;"},{"lineNumber":57,"author":{"gitId":"amanda-chua"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"amanda-chua"},"content":"        ViewCommand that \u003d (ViewCommand) o;"},{"lineNumber":59,"author":{"gitId":"amanda-chua"},"content":"        return taskNumber \u003d\u003d that.taskNumber;"},{"lineNumber":60,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":62,"author":{"gitId":"amanda-chua"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"amanda-chua"},"content":"    public int hashCode() {"},{"lineNumber":64,"author":{"gitId":"amanda-chua"},"content":"        return Objects.hash(taskNumber);"},{"lineNumber":65,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"amanda-chua"},"content":"}"}],"authorContributionMap":{"alstontham":9,"Kafcis":1,"amanda-chua":54,"daniellimws":2}},{"path":"src/main/java/athena/common/utils/DateUtils.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.common.utils;"},{"lineNumber":2,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.Forecast;"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":"import java.time.temporal.TemporalField;"},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":"import java.time.temporal.WeekFields;"},{"lineNumber":9,"author":{"gitId":"daniellimws"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"daniellimws"},"content":"import java.util.Locale;"},{"lineNumber":11,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":12,"author":{"gitId":"daniellimws"},"content":"public class DateUtils {"},{"lineNumber":13,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":14,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"daniellimws"},"content":"     * Utility method to get the first day of this week."},{"lineNumber":16,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"daniellimws"},"content":"     * @return The first day of this week."},{"lineNumber":18,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"daniellimws"},"content":"    public static LocalDate getFirstDayOfWeek() {"},{"lineNumber":20,"author":{"gitId":"daniellimws"},"content":"        LocalDate now \u003d LocalDate.now();"},{"lineNumber":21,"author":{"gitId":"daniellimws"},"content":"        TemporalField weekField \u003d WeekFields.of(Locale.getDefault()).dayOfWeek();"},{"lineNumber":22,"author":{"gitId":"daniellimws"},"content":"        return now.with(weekField, 1);"},{"lineNumber":23,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":25,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"daniellimws"},"content":"     * Utility method to get the first day of this month."},{"lineNumber":27,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"daniellimws"},"content":"     * @return The first day of this month."},{"lineNumber":29,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"daniellimws"},"content":"    public static LocalDate getFirstDayOfMonth() {"},{"lineNumber":31,"author":{"gitId":"daniellimws"},"content":"        LocalDate now \u003d LocalDate.now();"},{"lineNumber":32,"author":{"gitId":"daniellimws"},"content":"        return now.withDayOfMonth(1);"},{"lineNumber":33,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":35,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"daniellimws"},"content":"     * Gets a list of dates based on the given forecast."},{"lineNumber":37,"author":{"gitId":"daniellimws"},"content":"     * TODAY - Today\u0027s date."},{"lineNumber":38,"author":{"gitId":"daniellimws"},"content":"     * WEEK - This week\u0027s dates starting from the first day of the week (Monday)."},{"lineNumber":39,"author":{"gitId":"daniellimws"},"content":"     * ALL - This month\u0027s dates starting from the first day of the month."},{"lineNumber":40,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"daniellimws"},"content":"     * @param forecast Forecast for dates"},{"lineNumber":42,"author":{"gitId":"daniellimws"},"content":"     * @return List of dates based on the given forecast"},{"lineNumber":43,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"daniellimws"},"content":"    public static ArrayList\u003cLocalDate\u003e getDatesBasedOnForecast(Forecast forecast) {"},{"lineNumber":45,"author":{"gitId":"daniellimws"},"content":"        ArrayList\u003cLocalDate\u003e dates \u003d new ArrayList\u003cLocalDate\u003e();"},{"lineNumber":46,"author":{"gitId":"daniellimws"},"content":"        LocalDate startDate \u003d LocalDate.now();"},{"lineNumber":47,"author":{"gitId":"daniellimws"},"content":"        LocalDate endDate;"},{"lineNumber":48,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":49,"author":{"gitId":"daniellimws"},"content":"        if (forecast \u003d\u003d Forecast.WEEK) {"},{"lineNumber":50,"author":{"gitId":"daniellimws"},"content":"            endDate \u003d startDate.plusWeeks(1);"},{"lineNumber":51,"author":{"gitId":"daniellimws"},"content":"        } else if (forecast \u003d\u003d Forecast.DAY) {"},{"lineNumber":52,"author":{"gitId":"daniellimws"},"content":"            endDate \u003d startDate.plusDays(1);"},{"lineNumber":53,"author":{"gitId":"daniellimws"},"content":"        } else {"},{"lineNumber":54,"author":{"gitId":"daniellimws"},"content":"            endDate \u003d startDate.plusMonths(1);"},{"lineNumber":55,"author":{"gitId":"daniellimws"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":57,"author":{"gitId":"daniellimws"},"content":"        for (LocalDate currentDate \u003d startDate; currentDate.compareTo(endDate) !\u003d 0;"},{"lineNumber":58,"author":{"gitId":"daniellimws"},"content":"             currentDate \u003d currentDate.plusDays(1)) {"},{"lineNumber":59,"author":{"gitId":"daniellimws"},"content":"            dates.add(currentDate);"},{"lineNumber":60,"author":{"gitId":"daniellimws"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":62,"author":{"gitId":"daniellimws"},"content":"        return dates;"},{"lineNumber":63,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":65,"author":{"gitId":"daniellimws"},"content":"    public static String formatDate(LocalDate date) {"},{"lineNumber":66,"author":{"gitId":"daniellimws"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"},{"lineNumber":67,"author":{"gitId":"daniellimws"},"content":"        return date.format(formatter);"},{"lineNumber":68,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":70,"author":{"gitId":"daniellimws"},"content":"    public static boolean isDateIncluded(LocalDate taskDate, Forecast forecast) {"},{"lineNumber":71,"author":{"gitId":"daniellimws"},"content":"        if (forecast \u003d\u003d Forecast.ALL) {"},{"lineNumber":72,"author":{"gitId":"daniellimws"},"content":"            return true;"},{"lineNumber":73,"author":{"gitId":"daniellimws"},"content":"        } else if (forecast \u003d\u003d Forecast.WEEK) {"},{"lineNumber":74,"author":{"gitId":"daniellimws"},"content":"            LocalDate oneWeekLater \u003d LocalDate.now().plusWeeks(1);"},{"lineNumber":75,"author":{"gitId":"daniellimws"},"content":"            return oneWeekLater.compareTo(taskDate) \u003e 0 \u0026\u0026 LocalDate.now().compareTo(taskDate) \u003c\u003d 0;"},{"lineNumber":76,"author":{"gitId":"daniellimws"},"content":"        } else {"},{"lineNumber":77,"author":{"gitId":"daniellimws"},"content":"            return taskDate.equals(LocalDate.now());"},{"lineNumber":78,"author":{"gitId":"daniellimws"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"daniellimws"},"content":"}"}],"authorContributionMap":{"daniellimws":80}},{"path":"src/main/java/athena/exceptions/allocator/AllocationFailedException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.exceptions.allocator;"},{"lineNumber":2,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":3,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":4,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":5,"author":{"gitId":"Kafcis"},"content":"public class AllocationFailedException extends AllocatorException {"},{"lineNumber":6,"author":{"gitId":"Kafcis"},"content":"    @Override"},{"lineNumber":7,"author":{"gitId":"Kafcis"},"content":"    public void printErrorMessage() {"},{"lineNumber":8,"author":{"gitId":"alstontham"},"content":"        AthenaUi ui \u003d new AthenaUi();"},{"lineNumber":9,"author":{"gitId":"Kafcis"},"content":"        ui.printAllocationFailed();"},{"lineNumber":10,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Kafcis"},"content":"}"}],"authorContributionMap":{"Kafcis":8,"alstontham":2,"daniellimws":1}},{"path":"src/main/java/athena/exceptions/allocator/AllocatorException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.exceptions.allocator;"},{"lineNumber":2,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":3,"author":{"gitId":"Kafcis"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Kafcis"},"content":" * Abstract class for all the command exceptions that are thrown."},{"lineNumber":5,"author":{"gitId":"Kafcis"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":"public abstract class AllocatorException extends Exception {"},{"lineNumber":8,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":9,"author":{"gitId":"Kafcis"},"content":"    public AllocatorException() {"},{"lineNumber":10,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":12,"author":{"gitId":"Kafcis"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Kafcis"},"content":"     * Abstract method for printing the error message to the user when an exception is thrown."},{"lineNumber":14,"author":{"gitId":"Kafcis"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"Kafcis"},"content":"    public abstract void printErrorMessage();"},{"lineNumber":16,"author":{"gitId":"Kafcis"},"content":"}"}],"authorContributionMap":{"Kafcis":14,"daniellimws":2}},{"path":"src/main/java/athena/exceptions/allocator/NoNextSlotException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.exceptions.allocator;"},{"lineNumber":2,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":3,"author":{"gitId":"Kafcis"},"content":"public class NoNextSlotException extends AllocatorException {"},{"lineNumber":4,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":5,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":6,"author":{"gitId":"Kafcis"},"content":"    @Override"},{"lineNumber":7,"author":{"gitId":"Kafcis"},"content":"    public void printErrorMessage() {"},{"lineNumber":8,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":9,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Kafcis"},"content":"}"}],"authorContributionMap":{"Kafcis":8,"daniellimws":2}},{"path":"src/main/java/athena/exceptions/command/AddDateWrongFormatException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.exceptions.command;"},{"lineNumber":2,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":3,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":4,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":5,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"alstontham"},"content":" * Handles exception for when the user does not format some of the parameters in the add command correctly."},{"lineNumber":7,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":8,"author":{"gitId":"alstontham"},"content":"public class AddDateWrongFormatException extends CommandException {"},{"lineNumber":9,"author":{"gitId":"alstontham"},"content":"    public AddDateWrongFormatException() {"},{"lineNumber":10,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":11,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":13,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"alstontham"},"content":"     * Prints an error message telling user to format their parameters in the correct way."},{"lineNumber":15,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"alstontham"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"alstontham"},"content":"    public void printErrorMessage() {"},{"lineNumber":18,"author":{"gitId":"alstontham"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":19,"author":{"gitId":"alstontham"},"content":"        athenaUi.printAddDateWrongFormatException();"},{"lineNumber":20,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"alstontham"},"content":"}"}],"authorContributionMap":{"alstontham":20,"daniellimws":1}},{"path":"src/main/java/athena/exceptions/command/AddMissingRequiredParametersException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.exceptions.command;"},{"lineNumber":2,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":3,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":4,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":5,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"alstontham"},"content":" * Handles exception for when the user does not fill in the name or the start time of the task."},{"lineNumber":7,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":8,"author":{"gitId":"alstontham"},"content":"public class AddMissingRequiredParametersException extends CommandException {"},{"lineNumber":9,"author":{"gitId":"alstontham"},"content":"    public AddMissingRequiredParametersException() {"},{"lineNumber":10,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":11,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":13,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"alstontham"},"content":"     * Prints an error message telling user to fill in the name and start time of the task."},{"lineNumber":15,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"alstontham"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"alstontham"},"content":"    public void printErrorMessage() {"},{"lineNumber":18,"author":{"gitId":"alstontham"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":19,"author":{"gitId":"alstontham"},"content":"        athenaUi.printAddMissingRequiredParametersException();"},{"lineNumber":20,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"alstontham"},"content":"}"}],"authorContributionMap":{"alstontham":20,"daniellimws":1}},{"path":"src/main/java/athena/exceptions/command/ClashInTaskException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.exceptions.command;"},{"lineNumber":2,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":4,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":5,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":6,"author":{"gitId":"wish2023"},"content":"public class ClashInTaskException extends CommandException {"},{"lineNumber":7,"author":{"gitId":"wish2023"},"content":"    public ClashInTaskException() {"},{"lineNumber":8,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":9,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":11,"author":{"gitId":"wish2023"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"wish2023"},"content":"    public void printErrorMessage() {"},{"lineNumber":13,"author":{"gitId":"alstontham"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":14,"author":{"gitId":"alstontham"},"content":"        athenaUi.printClashInTaskException();"},{"lineNumber":15,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"wish2023"},"content":"}"}],"authorContributionMap":{"alstontham":3,"daniellimws":2,"wish2023":11}},{"path":"src/main/java/athena/exceptions/command/CommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.exceptions.command;"},{"lineNumber":2,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":3,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"alstontham"},"content":" * Abstract class for all the command exceptions that are thrown."},{"lineNumber":5,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":6,"author":{"gitId":"alstontham"},"content":"public abstract class CommandException extends Exception {"},{"lineNumber":7,"author":{"gitId":"alstontham"},"content":"    public CommandException() {"},{"lineNumber":8,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":9,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":11,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"alstontham"},"content":"     * Abstract method for printing the error message to the user when an exception is thrown."},{"lineNumber":13,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"alstontham"},"content":"    public abstract void printErrorMessage();"},{"lineNumber":15,"author":{"gitId":"alstontham"},"content":"}"}],"authorContributionMap":{"alstontham":14,"daniellimws":1}},{"path":"src/main/java/athena/exceptions/command/DateHasPassedException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.exceptions.command;"},{"lineNumber":2,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":3,"author":{"gitId":"wish2023"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":4,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":5,"author":{"gitId":"wish2023"},"content":"public class DateHasPassedException extends CommandException {"},{"lineNumber":6,"author":{"gitId":"wish2023"},"content":"    public DateHasPassedException() {"},{"lineNumber":7,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":8,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":10,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"wish2023"},"content":"     * Prints an error message telling user their proposed date has passed."},{"lineNumber":12,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"wish2023"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"wish2023"},"content":"    public void printErrorMessage() {"},{"lineNumber":15,"author":{"gitId":"wish2023"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":16,"author":{"gitId":"wish2023"},"content":"        athenaUi.printDateHasPassedException();"},{"lineNumber":17,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"wish2023"},"content":"}"}],"authorContributionMap":{"daniellimws":1,"wish2023":17}},{"path":"src/main/java/athena/exceptions/command/DeleteInvalidIndexException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.exceptions.command;"},{"lineNumber":2,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":3,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":4,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":5,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"alstontham"},"content":" * Exception that is thrown when the user enters an index without a task when using the delete command."},{"lineNumber":7,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":8,"author":{"gitId":"alstontham"},"content":"public class DeleteInvalidIndexException extends CommandException {"},{"lineNumber":9,"author":{"gitId":"alstontham"},"content":"    public DeleteInvalidIndexException() {"},{"lineNumber":10,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":11,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":13,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"alstontham"},"content":"     * Prints an error message telling user to enter a valid index number of a task to delete."},{"lineNumber":15,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"alstontham"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"alstontham"},"content":"    public void printErrorMessage() {"},{"lineNumber":18,"author":{"gitId":"alstontham"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":19,"author":{"gitId":"alstontham"},"content":"        athenaUi.printDeleteInvalidIndexException();"},{"lineNumber":20,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"alstontham"},"content":"}"}],"authorContributionMap":{"alstontham":20,"daniellimws":1}},{"path":"src/main/java/athena/exceptions/command/DeleteNoIndexException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.exceptions.command;"},{"lineNumber":2,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":3,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":4,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":5,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"alstontham"},"content":" * Exception thrown when the user enters the delete command without specifying an index of a task to delete."},{"lineNumber":7,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":8,"author":{"gitId":"alstontham"},"content":"public class DeleteNoIndexException extends CommandException {"},{"lineNumber":9,"author":{"gitId":"alstontham"},"content":"    public DeleteNoIndexException() {"},{"lineNumber":10,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":11,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":13,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"alstontham"},"content":"     * Prints an error message telling user to enter an index number of a task to delete."},{"lineNumber":15,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"alstontham"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"alstontham"},"content":"    public void printErrorMessage() {"},{"lineNumber":18,"author":{"gitId":"alstontham"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":19,"author":{"gitId":"alstontham"},"content":"        athenaUi.printDeleteNoIndexException();"},{"lineNumber":20,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"alstontham"},"content":"}"}],"authorContributionMap":{"alstontham":20,"daniellimws":1}},{"path":"src/main/java/athena/exceptions/command/DoneInvalidIndexException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.exceptions.command;"},{"lineNumber":2,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":3,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":4,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":5,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"alstontham"},"content":" * Exception that is thrown when the user enters an index without a task when using the done command."},{"lineNumber":7,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":8,"author":{"gitId":"alstontham"},"content":"public class DoneInvalidIndexException extends CommandException {"},{"lineNumber":9,"author":{"gitId":"alstontham"},"content":"    public DoneInvalidIndexException() {"},{"lineNumber":10,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":11,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":13,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"alstontham"},"content":"     * Prints an error message telling user to enter a valid index number of a task to mark as done."},{"lineNumber":15,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"alstontham"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"alstontham"},"content":"    public void printErrorMessage() {"},{"lineNumber":18,"author":{"gitId":"alstontham"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":19,"author":{"gitId":"alstontham"},"content":"        athenaUi.printDoneInvalidIndexException();"},{"lineNumber":20,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"alstontham"},"content":"}"}],"authorContributionMap":{"alstontham":20,"daniellimws":1}},{"path":"src/main/java/athena/exceptions/command/DoneNoIndexException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.exceptions.command;"},{"lineNumber":2,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":3,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":4,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":5,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"alstontham"},"content":" * Exception thrown when the user enters the done command without specifying an index of a task to done."},{"lineNumber":7,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":8,"author":{"gitId":"alstontham"},"content":"public class DoneNoIndexException extends CommandException {"},{"lineNumber":9,"author":{"gitId":"alstontham"},"content":"    public DoneNoIndexException() {"},{"lineNumber":10,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":11,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":13,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"alstontham"},"content":"     * Prints an error message telling user to enter an index number of a task to mark as done."},{"lineNumber":15,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"alstontham"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"alstontham"},"content":"    public void printErrorMessage() {"},{"lineNumber":18,"author":{"gitId":"alstontham"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":19,"author":{"gitId":"alstontham"},"content":"        athenaUi.printDoneNoIndexException();"},{"lineNumber":20,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"alstontham"},"content":"}"}],"authorContributionMap":{"alstontham":20,"daniellimws":1}},{"path":"src/main/java/athena/exceptions/command/EditNoIndexException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.exceptions.command;"},{"lineNumber":2,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":3,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":4,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":5,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"alstontham"},"content":" * Exception thrown when the user enters the edit command without specifying the index of the task they want to edit."},{"lineNumber":7,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":8,"author":{"gitId":"alstontham"},"content":"public class EditNoIndexException extends CommandException {"},{"lineNumber":9,"author":{"gitId":"alstontham"},"content":"    public EditNoIndexException() {"},{"lineNumber":10,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":11,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":13,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"alstontham"},"content":"     * Prints an error message telling user to enter an index number of a task to mark as done."},{"lineNumber":15,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"alstontham"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"alstontham"},"content":"    public void printErrorMessage() {"},{"lineNumber":18,"author":{"gitId":"alstontham"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":19,"author":{"gitId":"alstontham"},"content":"        athenaUi.printEditNoIndexException();"},{"lineNumber":20,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"alstontham"},"content":"}"}],"authorContributionMap":{"alstontham":20,"daniellimws":1}},{"path":"src/main/java/athena/exceptions/command/EmptyTaskListException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.exceptions.command;"},{"lineNumber":2,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":3,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":4,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":5,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"alstontham"},"content":" * Exception thrown when the user wants to view their list of tasks but the task list is empty."},{"lineNumber":7,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":8,"author":{"gitId":"alstontham"},"content":"public class EmptyTaskListException extends CommandException {"},{"lineNumber":9,"author":{"gitId":"alstontham"},"content":"    public EmptyTaskListException() {"},{"lineNumber":10,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":11,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":13,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"alstontham"},"content":"     * Prints an error message when the user tries to list out their tasks, but does not have any tasks in the list."},{"lineNumber":15,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"alstontham"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"alstontham"},"content":"    public void printErrorMessage() {"},{"lineNumber":18,"author":{"gitId":"alstontham"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":19,"author":{"gitId":"alstontham"},"content":"        athenaUi.printEmptyTaskListException();"},{"lineNumber":20,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"alstontham"},"content":"}"}],"authorContributionMap":{"alstontham":20,"daniellimws":1}},{"path":"src/main/java/athena/exceptions/command/IllegalTimeModificationException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Kafcis"},"content":"package athena.exceptions.command;"},{"lineNumber":2,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":3,"author":{"gitId":"Kafcis"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":4,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":5,"author":{"gitId":"Kafcis"},"content":"public class IllegalTimeModificationException extends CommandException {"},{"lineNumber":6,"author":{"gitId":"Kafcis"},"content":"    @Override"},{"lineNumber":7,"author":{"gitId":"Kafcis"},"content":"    public void printErrorMessage() {"},{"lineNumber":8,"author":{"gitId":"Kafcis"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":9,"author":{"gitId":"Kafcis"},"content":"        athenaUi.printIllegalTimeModificationException();"},{"lineNumber":10,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Kafcis"},"content":"}"}],"authorContributionMap":{"Kafcis":11}},{"path":"src/main/java/athena/exceptions/command/InvalidCommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.exceptions.command;"},{"lineNumber":2,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":4,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":5,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":6,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"alstontham"},"content":" * Exception thrown when the user enters a command not recognized by the program."},{"lineNumber":8,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":9,"author":{"gitId":"alstontham"},"content":"public class InvalidCommandException extends CommandException {"},{"lineNumber":10,"author":{"gitId":"alstontham"},"content":"    public InvalidCommandException() {"},{"lineNumber":11,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":12,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":14,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"alstontham"},"content":"     * Prints an error message telling user that they entered an invalid command and prompts them to type \"help\"."},{"lineNumber":16,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"alstontham"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"alstontham"},"content":"    public void printErrorMessage() {"},{"lineNumber":19,"author":{"gitId":"alstontham"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":20,"author":{"gitId":"alstontham"},"content":"        athenaUi.printInvalidCommandException();"},{"lineNumber":21,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"alstontham"},"content":"}"}],"authorContributionMap":{"alstontham":20,"daniellimws":2}},{"path":"src/main/java/athena/exceptions/command/InvalidDeadlineException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.exceptions.command;"},{"lineNumber":2,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":4,"author":{"gitId":"wish2023"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":5,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":6,"author":{"gitId":"wish2023"},"content":"public class InvalidDeadlineException extends CommandException {"},{"lineNumber":7,"author":{"gitId":"wish2023"},"content":"    public InvalidDeadlineException() {"},{"lineNumber":8,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":9,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":11,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"wish2023"},"content":"     * Print message telling user they have mistyped the deadline date."},{"lineNumber":13,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"wish2023"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"wish2023"},"content":"    public void printErrorMessage() {"},{"lineNumber":16,"author":{"gitId":"wish2023"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":17,"author":{"gitId":"wish2023"},"content":"        athenaUi.printInvalidDeadlineException();"},{"lineNumber":18,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"wish2023"},"content":"}"}],"authorContributionMap":{"daniellimws":2,"wish2023":17}},{"path":"src/main/java/athena/exceptions/command/InvalidForecastException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.exceptions.command;"},{"lineNumber":2,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":4,"author":{"gitId":"wish2023"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":5,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":6,"author":{"gitId":"wish2023"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"wish2023"},"content":" * Exception thrown when the user enters an invalid forecast."},{"lineNumber":8,"author":{"gitId":"wish2023"},"content":" */"},{"lineNumber":9,"author":{"gitId":"wish2023"},"content":"public class InvalidForecastException extends CommandException {"},{"lineNumber":10,"author":{"gitId":"wish2023"},"content":"    public InvalidForecastException() {"},{"lineNumber":11,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":12,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":14,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"wish2023"},"content":"     * Prints an error message telling user that they entered an invalid forecast."},{"lineNumber":16,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"wish2023"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"wish2023"},"content":"    public void printErrorMessage() {"},{"lineNumber":19,"author":{"gitId":"wish2023"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":20,"author":{"gitId":"wish2023"},"content":"        athenaUi.printInvalidForecastException();"},{"lineNumber":21,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"wish2023"},"content":"}"}],"authorContributionMap":{"daniellimws":2,"wish2023":20}},{"path":"src/main/java/athena/exceptions/command/InvalidImportanceException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.exceptions.command;"},{"lineNumber":2,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":4,"author":{"gitId":"wish2023"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":5,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":6,"author":{"gitId":"wish2023"},"content":"public class InvalidImportanceException extends CommandException {"},{"lineNumber":7,"author":{"gitId":"wish2023"},"content":"    public InvalidImportanceException() {"},{"lineNumber":8,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":9,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":11,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"wish2023"},"content":"     * Prints an error message telling user that they entered an invalid forecast."},{"lineNumber":13,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"wish2023"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"wish2023"},"content":"    public void printErrorMessage() {"},{"lineNumber":16,"author":{"gitId":"wish2023"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":17,"author":{"gitId":"wish2023"},"content":"        athenaUi.printInvalidImportanceException();"},{"lineNumber":18,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"wish2023"},"content":"}"}],"authorContributionMap":{"daniellimws":2,"wish2023":17}},{"path":"src/main/java/athena/exceptions/command/InvalidRecurrenceException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.exceptions.command;"},{"lineNumber":2,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":4,"author":{"gitId":"wish2023"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":5,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":6,"author":{"gitId":"wish2023"},"content":"public class InvalidRecurrenceException extends CommandException {"},{"lineNumber":7,"author":{"gitId":"wish2023"},"content":"    public InvalidRecurrenceException() {"},{"lineNumber":8,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":9,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":11,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"wish2023"},"content":"     * Prints error message telling user to input recurrence date in correct format."},{"lineNumber":13,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"wish2023"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"wish2023"},"content":"    public void printErrorMessage() {"},{"lineNumber":16,"author":{"gitId":"wish2023"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":17,"author":{"gitId":"wish2023"},"content":"        athenaUi.printInvalidRecurrenceException();"},{"lineNumber":18,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"wish2023"},"content":"}"}],"authorContributionMap":{"daniellimws":2,"wish2023":17}},{"path":"src/main/java/athena/exceptions/command/InvalidTimeFormatException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.exceptions.command;"},{"lineNumber":2,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":4,"author":{"gitId":"wish2023"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":5,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":6,"author":{"gitId":"wish2023"},"content":"public class InvalidTimeFormatException extends CommandException {"},{"lineNumber":7,"author":{"gitId":"wish2023"},"content":"    public InvalidTimeFormatException() {"},{"lineNumber":8,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":9,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":11,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"wish2023"},"content":"     * Print error message telling user they entered time in invalid format."},{"lineNumber":13,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"wish2023"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"wish2023"},"content":"    public void printErrorMessage() {"},{"lineNumber":16,"author":{"gitId":"wish2023"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":17,"author":{"gitId":"wish2023"},"content":"        athenaUi.printInvalidTimeFormatException();"},{"lineNumber":18,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":20,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":21,"author":{"gitId":"wish2023"},"content":"}"}],"authorContributionMap":{"daniellimws":2,"wish2023":19}},{"path":"src/main/java/athena/exceptions/command/TaskDuringSleepTimeException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.exceptions.command;"},{"lineNumber":2,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":"public class TaskDuringSleepTimeException extends CommandException {"},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":"    @Override"},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":"    public void printErrorMessage() {"},{"lineNumber":9,"author":{"gitId":"daniellimws"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":10,"author":{"gitId":"daniellimws"},"content":"        athenaUi.printSleepTimeNotAllowed();"},{"lineNumber":11,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"daniellimws"},"content":"}"}],"authorContributionMap":{"daniellimws":12}},{"path":"src/main/java/athena/exceptions/command/TaskIsDoneException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.exceptions.command;"},{"lineNumber":2,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":4,"author":{"gitId":"wish2023"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":5,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":6,"author":{"gitId":"wish2023"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"wish2023"},"content":" * Exception thrown when user attempts to mark a task as done which is already done."},{"lineNumber":8,"author":{"gitId":"wish2023"},"content":" */"},{"lineNumber":9,"author":{"gitId":"wish2023"},"content":"public class TaskIsDoneException extends CommandException {"},{"lineNumber":10,"author":{"gitId":"wish2023"},"content":"    public TaskIsDoneException() {"},{"lineNumber":11,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":12,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":14,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"wish2023"},"content":"     * Print message when user attempts to mark a task as done which is already done."},{"lineNumber":16,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"wish2023"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"wish2023"},"content":"    public void printErrorMessage() {"},{"lineNumber":19,"author":{"gitId":"wish2023"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":20,"author":{"gitId":"wish2023"},"content":"        athenaUi.printTaskIsDoneException();"},{"lineNumber":21,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"wish2023"},"content":"}"}],"authorContributionMap":{"daniellimws":2,"wish2023":20}},{"path":"src/main/java/athena/exceptions/command/TaskNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.exceptions.command;"},{"lineNumber":2,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":4,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":6,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"alstontham"},"content":" * Exception that is thrown when the program is unable to locate the task specified by the user."},{"lineNumber":8,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":9,"author":{"gitId":"daniellimws"},"content":"public class TaskNotFoundException extends CommandException {"},{"lineNumber":10,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":11,"author":{"gitId":"daniellimws"},"content":"    private int taskNumber;"},{"lineNumber":12,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":13,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"alstontham"},"content":"     * Initializes the task number."},{"lineNumber":15,"author":{"gitId":"alstontham"},"content":"     * @param taskNumber number of the the task in the task list"},{"lineNumber":16,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"daniellimws"},"content":"    public TaskNotFoundException(int taskNumber) {"},{"lineNumber":18,"author":{"gitId":"daniellimws"},"content":"        this.taskNumber \u003d taskNumber;"},{"lineNumber":19,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":21,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"alstontham"},"content":"     * Prints an error message telling user that there is no task at the index they specified."},{"lineNumber":23,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"daniellimws"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"daniellimws"},"content":"    public void printErrorMessage() {"},{"lineNumber":26,"author":{"gitId":"alstontham"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":27,"author":{"gitId":"alstontham"},"content":"        athenaUi.printTaskNotFound(taskNumber);"},{"lineNumber":28,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"daniellimws"},"content":"}"}],"authorContributionMap":{"alstontham":13,"daniellimws":16}},{"path":"src/main/java/athena/exceptions/command/TaskTooLongException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Kafcis"},"content":"package athena.exceptions.command;"},{"lineNumber":2,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":3,"author":{"gitId":"Kafcis"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":4,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":5,"author":{"gitId":"Kafcis"},"content":"public class TaskTooLongException extends CommandException {"},{"lineNumber":6,"author":{"gitId":"Kafcis"},"content":"    private int taskNumber;"},{"lineNumber":7,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":8,"author":{"gitId":"Kafcis"},"content":"    public TaskTooLongException(int taskNumber) {"},{"lineNumber":9,"author":{"gitId":"Kafcis"},"content":"        this.taskNumber \u003d taskNumber;"},{"lineNumber":10,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":12,"author":{"gitId":"Kafcis"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"Kafcis"},"content":"    public void printErrorMessage() {"},{"lineNumber":14,"author":{"gitId":"Kafcis"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":15,"author":{"gitId":"Kafcis"},"content":"        athenaUi.printTaskTooLong(taskNumber);"},{"lineNumber":16,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Kafcis"},"content":"}"}],"authorContributionMap":{"Kafcis":17}},{"path":"src/main/java/athena/exceptions/command/TimeNotHourlyException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wish2023"},"content":"package athena.exceptions.command;"},{"lineNumber":2,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":3,"author":{"gitId":"wish2023"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":4,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":5,"author":{"gitId":"wish2023"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"wish2023"},"content":" * Exception thrown when user attempts to add in a task that doesn\u0027t start at an hour."},{"lineNumber":7,"author":{"gitId":"wish2023"},"content":" */"},{"lineNumber":8,"author":{"gitId":"wish2023"},"content":"public class TimeNotHourlyException extends CommandException {"},{"lineNumber":9,"author":{"gitId":"wish2023"},"content":"    public TimeNotHourlyException() {"},{"lineNumber":10,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":11,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":13,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"wish2023"},"content":"     * Prints an error message telling user that there the time needs to be hourly."},{"lineNumber":15,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"wish2023"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"wish2023"},"content":"    public void printErrorMessage() {"},{"lineNumber":18,"author":{"gitId":"wish2023"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":19,"author":{"gitId":"wish2023"},"content":"        athenaUi.printTimeNotHourlyException();"},{"lineNumber":20,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"wish2023"},"content":"}"}],"authorContributionMap":{"wish2023":21}},{"path":"src/main/java/athena/exceptions/command/ViewInvalidIndexException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.exceptions.command;"},{"lineNumber":2,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":4,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":5,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":6,"author":{"gitId":"amanda-chua"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"amanda-chua"},"content":" * Exception that is thrown when the user enters an index without a task when using the view command."},{"lineNumber":8,"author":{"gitId":"amanda-chua"},"content":" */"},{"lineNumber":9,"author":{"gitId":"amanda-chua"},"content":"public class ViewInvalidIndexException extends CommandException {"},{"lineNumber":10,"author":{"gitId":"amanda-chua"},"content":"    public ViewInvalidIndexException() {"},{"lineNumber":11,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":12,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":14,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"amanda-chua"},"content":"     * Prints an error message telling user to enter a valid index number of a task to view."},{"lineNumber":16,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"amanda-chua"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"amanda-chua"},"content":"    public void printErrorMessage() {"},{"lineNumber":19,"author":{"gitId":"alstontham"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":20,"author":{"gitId":"alstontham"},"content":"        athenaUi.printViewInvalidIndexException();"},{"lineNumber":21,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"amanda-chua"},"content":"}"}],"authorContributionMap":{"alstontham":3,"amanda-chua":17,"daniellimws":2}},{"path":"src/main/java/athena/exceptions/command/ViewNoIndexException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.exceptions.command;"},{"lineNumber":2,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":4,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":5,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":6,"author":{"gitId":"amanda-chua"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"amanda-chua"},"content":" * Exception thrown when the user enters the delete command without specifying an index of a task to view."},{"lineNumber":8,"author":{"gitId":"amanda-chua"},"content":" */"},{"lineNumber":9,"author":{"gitId":"amanda-chua"},"content":"public class ViewNoIndexException extends CommandException {"},{"lineNumber":10,"author":{"gitId":"amanda-chua"},"content":"    public ViewNoIndexException() {"},{"lineNumber":11,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":12,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":14,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"amanda-chua"},"content":"     * Prints an error message telling user to enter an index number of a task to view."},{"lineNumber":16,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"amanda-chua"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"amanda-chua"},"content":"    public void printErrorMessage() {"},{"lineNumber":19,"author":{"gitId":"alstontham"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":20,"author":{"gitId":"alstontham"},"content":"        athenaUi.printViewNoIndexException();"},{"lineNumber":21,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"amanda-chua"},"content":"}"}],"authorContributionMap":{"alstontham":3,"amanda-chua":17,"daniellimws":2}},{"path":"src/main/java/athena/exceptions/storage/StorageCorruptedException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.exceptions.storage;"},{"lineNumber":2,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":3,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":4,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":5,"author":{"gitId":"Kafcis"},"content":"public class StorageCorruptedException extends StorageException {"},{"lineNumber":6,"author":{"gitId":"Kafcis"},"content":"    private String[] corruptedLine;"},{"lineNumber":7,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":8,"author":{"gitId":"Kafcis"},"content":"    public StorageCorruptedException(String[] corruptedLine) {"},{"lineNumber":9,"author":{"gitId":"Kafcis"},"content":"        this.corruptedLine \u003d corruptedLine;"},{"lineNumber":10,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":12,"author":{"gitId":"Kafcis"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"Kafcis"},"content":"    public void printErrorMessage() {"},{"lineNumber":14,"author":{"gitId":"alstontham"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":15,"author":{"gitId":"Kafcis"},"content":"        String line \u003d \"\";"},{"lineNumber":16,"author":{"gitId":"Kafcis"},"content":"        for (String info : corruptedLine) {"},{"lineNumber":17,"author":{"gitId":"Kafcis"},"content":"            line +\u003d info;"},{"lineNumber":18,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"alstontham"},"content":"        athenaUi.printCorruptedLine(line);"},{"lineNumber":20,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Kafcis"},"content":"}"}],"authorContributionMap":{"Kafcis":17,"alstontham":3,"daniellimws":1}},{"path":"src/main/java/athena/exceptions/storage/StorageException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.exceptions.storage;"},{"lineNumber":2,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":3,"author":{"gitId":"Kafcis"},"content":"public abstract class StorageException extends Exception {"},{"lineNumber":4,"author":{"gitId":"Kafcis"},"content":"    public StorageException() {"},{"lineNumber":5,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":6,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":8,"author":{"gitId":"Kafcis"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Kafcis"},"content":"     * Abstract method for printing the error message to the user when an exception is thrown."},{"lineNumber":10,"author":{"gitId":"Kafcis"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"Kafcis"},"content":"    public abstract void printErrorMessage();"},{"lineNumber":12,"author":{"gitId":"Kafcis"},"content":"}"}],"authorContributionMap":{"Kafcis":11,"daniellimws":1}},{"path":"src/main/java/athena/exceptions/storage/StorageLoadFailException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.exceptions.storage;"},{"lineNumber":2,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":3,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":4,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":5,"author":{"gitId":"Kafcis"},"content":"public class StorageLoadFailException extends StorageException {"},{"lineNumber":6,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":7,"author":{"gitId":"Kafcis"},"content":"    @Override"},{"lineNumber":8,"author":{"gitId":"Kafcis"},"content":"    public void printErrorMessage() {"},{"lineNumber":9,"author":{"gitId":"alstontham"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":10,"author":{"gitId":"alstontham"},"content":"        athenaUi.printStorageLoadFail();"},{"lineNumber":11,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Kafcis"},"content":"}"}],"authorContributionMap":{"Kafcis":8,"alstontham":3,"daniellimws":1}},{"path":"src/main/java/athena/task/Task.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.task;"},{"lineNumber":2,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.Importance;"},{"lineNumber":4,"author":{"gitId":"wish2023"},"content":"import athena.common.utils.DateUtils;"},{"lineNumber":5,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":6,"author":{"gitId":"Kafcis"},"content":"import athena.exceptions.command.TaskTooLongException;"},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.InvalidDeadlineException;"},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.InvalidRecurrenceException;"},{"lineNumber":9,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.TaskDuringSleepTimeException;"},{"lineNumber":10,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.TaskIsDoneException;"},{"lineNumber":11,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":12,"author":{"gitId":"alstontham"},"content":"import java.time.LocalDate;"},{"lineNumber":13,"author":{"gitId":"alstontham"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":14,"author":{"gitId":"wish2023"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"alstontham"},"content":"import java.util.Objects;"},{"lineNumber":16,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":17,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":18,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"alstontham"},"content":" * Handles task objects."},{"lineNumber":20,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":21,"author":{"gitId":"daniellimws"},"content":"public class Task {"},{"lineNumber":22,"author":{"gitId":"daniellimws"},"content":"    public static final String YES \u003d \"Y\";"},{"lineNumber":23,"author":{"gitId":"daniellimws"},"content":"    public static final String NO \u003d \"N\";"},{"lineNumber":24,"author":{"gitId":"wish2023"},"content":"    public static final String TODAY \u003d \"TODAY\";"},{"lineNumber":25,"author":{"gitId":"wish2023"},"content":"    public static final String EMPTY \u003d \"\";"},{"lineNumber":26,"author":{"gitId":"daniellimws"},"content":"    private String name;"},{"lineNumber":27,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":28,"author":{"gitId":"Kafcis"},"content":"    private boolean isFlexible;"},{"lineNumber":29,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":30,"author":{"gitId":"daniellimws"},"content":"    private boolean isDone \u003d false;"},{"lineNumber":31,"author":{"gitId":"daniellimws"},"content":"    private Importance importance;"},{"lineNumber":32,"author":{"gitId":"daniellimws"},"content":"    private String notes;"},{"lineNumber":33,"author":{"gitId":"daniellimws"},"content":"    private int number;"},{"lineNumber":34,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":35,"author":{"gitId":"Kafcis"},"content":"    private TimeData timeInfo;"},{"lineNumber":36,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":37,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":38,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"alstontham"},"content":"     * Determines if the task is done."},{"lineNumber":40,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"alstontham"},"content":"     * @return string representing if the task is done"},{"lineNumber":42,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"daniellimws"},"content":"    private String getStatus() {"},{"lineNumber":44,"author":{"gitId":"daniellimws"},"content":"        return (isDone ? YES : NO);"},{"lineNumber":45,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":47,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"alstontham"},"content":"     * Constructor for the task class."},{"lineNumber":49,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"alstontham"},"content":"     * @param name       name of the task"},{"lineNumber":51,"author":{"gitId":"alstontham"},"content":"     * @param startTime  starting time of the task"},{"lineNumber":52,"author":{"gitId":"alstontham"},"content":"     * @param duration   how long the task is scheduled to last for"},{"lineNumber":53,"author":{"gitId":"alstontham"},"content":"     * @param deadline   when the task is due"},{"lineNumber":54,"author":{"gitId":"daniellimws"},"content":"     * @param recurrence when the task occurs/repeats"},{"lineNumber":55,"author":{"gitId":"alstontham"},"content":"     * @param importance importance of the task"},{"lineNumber":56,"author":{"gitId":"alstontham"},"content":"     * @param notes      additional notes for the task"},{"lineNumber":57,"author":{"gitId":"alstontham"},"content":"     * @param number     task number"},{"lineNumber":58,"author":{"gitId":"Kafcis"},"content":"     * @param isFlexible time flexibility"},{"lineNumber":59,"author":{"gitId":"wish2023"},"content":"     * @throws TaskDuringSleepTimeException Exception thrown when task clashes with sleep time"},{"lineNumber":60,"author":{"gitId":"wish2023"},"content":"     * @throws InvalidRecurrenceException   Exception thrown when user mistypes recurrence"},{"lineNumber":61,"author":{"gitId":"wish2023"},"content":"     * @throws InvalidDeadlineException     Exception thrown when user mistypes deadline"},{"lineNumber":62,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"daniellimws"},"content":"    public Task(String name, String startTime, String duration, String deadline,"},{"lineNumber":64,"author":{"gitId":"daniellimws"},"content":"                String recurrence, Importance importance, String notes, int number, Boolean isFlexible)"},{"lineNumber":65,"author":{"gitId":"Kafcis"},"content":"            throws TaskDuringSleepTimeException, TaskTooLongException, InvalidRecurrenceException,"},{"lineNumber":66,"author":{"gitId":"Kafcis"},"content":"                InvalidDeadlineException {"},{"lineNumber":67,"author":{"gitId":"wish2023"},"content":"        setAttributes(name, importance, notes, number, isFlexible, isDone);"},{"lineNumber":68,"author":{"gitId":"wish2023"},"content":"        recurrence \u003d getDefaultDate(recurrence);"},{"lineNumber":69,"author":{"gitId":"wish2023"},"content":"        setTime(startTime, duration, deadline, recurrence, isFlexible);"},{"lineNumber":70,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":72,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"wish2023"},"content":"     * Constructor for the task class."},{"lineNumber":74,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"wish2023"},"content":"     * @param name       name of the task"},{"lineNumber":76,"author":{"gitId":"wish2023"},"content":"     * @param isFlexible time flexibility"},{"lineNumber":77,"author":{"gitId":"wish2023"},"content":"     * @param isDone     whether task has been completed"},{"lineNumber":78,"author":{"gitId":"wish2023"},"content":"     * @param importance importance of the task"},{"lineNumber":79,"author":{"gitId":"wish2023"},"content":"     * @param notes      additional notes for the task"},{"lineNumber":80,"author":{"gitId":"wish2023"},"content":"     * @param number     task number"},{"lineNumber":81,"author":{"gitId":"wish2023"},"content":"     * @param timeInfo   time related information of task"},{"lineNumber":82,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"wish2023"},"content":"    public Task(String name, boolean isFlexible, boolean isDone, Importance importance,"},{"lineNumber":84,"author":{"gitId":"wish2023"},"content":"                String notes, int number, TimeData timeInfo) {"},{"lineNumber":85,"author":{"gitId":"wish2023"},"content":"        setAttributes(name, importance, notes, number, isFlexible, isDone);"},{"lineNumber":86,"author":{"gitId":"wish2023"},"content":"        cloneTimeInfo(timeInfo);"},{"lineNumber":87,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":89,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"wish2023"},"content":"     * Set timeInfo to be a deep clone of its parameter."},{"lineNumber":91,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"wish2023"},"content":"     * @param timeInfo time related information of task"},{"lineNumber":93,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"wish2023"},"content":"    private void cloneTimeInfo(TimeData timeInfo) {"},{"lineNumber":95,"author":{"gitId":"wish2023"},"content":"        this.timeInfo \u003d timeInfo.getClone();"},{"lineNumber":96,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":98,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"wish2023"},"content":"     * Sets up time information in Time class."},{"lineNumber":100,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":101,"author":{"gitId":"wish2023"},"content":"     * @param startTime  starting time of the task"},{"lineNumber":102,"author":{"gitId":"wish2023"},"content":"     * @param duration   how long the task is scheduled to last for"},{"lineNumber":103,"author":{"gitId":"wish2023"},"content":"     * @param deadline   when the task is due"},{"lineNumber":104,"author":{"gitId":"wish2023"},"content":"     * @param recurrence when the task occurs/repeats"},{"lineNumber":105,"author":{"gitId":"wish2023"},"content":"     * @param isFlexible time flexibility"},{"lineNumber":106,"author":{"gitId":"wish2023"},"content":"     * @throws TaskDuringSleepTimeException Exception thrown when task clashes with sleep time"},{"lineNumber":107,"author":{"gitId":"wish2023"},"content":"     * @throws InvalidRecurrenceException   Exception thrown when user mistypes recurrence"},{"lineNumber":108,"author":{"gitId":"wish2023"},"content":"     * @throws InvalidDeadlineException     Exception thrown when user mistypes deadline"},{"lineNumber":109,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"wish2023"},"content":"    private void setTime(String startTime, String duration, String deadline, String recurrence, Boolean isFlexible)"},{"lineNumber":111,"author":{"gitId":"Kafcis"},"content":"            throws TaskDuringSleepTimeException, InvalidRecurrenceException, InvalidDeadlineException,"},{"lineNumber":112,"author":{"gitId":"Kafcis"},"content":"            TaskTooLongException {"},{"lineNumber":113,"author":{"gitId":"Kafcis"},"content":"        this.timeInfo \u003d new TimeData(isFlexible, startTime, duration, deadline, recurrence);"},{"lineNumber":114,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":116,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"wish2023"},"content":"     * Updates recurrence if it is set to today."},{"lineNumber":118,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":119,"author":{"gitId":"wish2023"},"content":"     * @param recurrence occurrence of task"},{"lineNumber":120,"author":{"gitId":"wish2023"},"content":"     * @return updated occurrence date"},{"lineNumber":121,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"wish2023"},"content":"    private String getDefaultDate(String recurrence) {"},{"lineNumber":123,"author":{"gitId":"wish2023"},"content":"        if (recurrence.toUpperCase().equals(TODAY)) {"},{"lineNumber":124,"author":{"gitId":"wish2023"},"content":"            recurrence \u003d DateUtils.formatDate(LocalDate.now());"},{"lineNumber":125,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"wish2023"},"content":"        return recurrence;"},{"lineNumber":127,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":129,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"wish2023"},"content":"     * Sets all non time related attributes."},{"lineNumber":131,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":132,"author":{"gitId":"wish2023"},"content":"     * @param name       name of the task"},{"lineNumber":133,"author":{"gitId":"wish2023"},"content":"     * @param importance importance of the task"},{"lineNumber":134,"author":{"gitId":"wish2023"},"content":"     * @param notes      additional notes for the task"},{"lineNumber":135,"author":{"gitId":"wish2023"},"content":"     * @param number     task number"},{"lineNumber":136,"author":{"gitId":"wish2023"},"content":"     * @param isFlexible time flexibility"},{"lineNumber":137,"author":{"gitId":"wish2023"},"content":"     * @param isDone     whether task has been completed"},{"lineNumber":138,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"wish2023"},"content":"    private void setAttributes(String name, Importance importance, String notes, int number, Boolean isFlexible,"},{"lineNumber":140,"author":{"gitId":"wish2023"},"content":"                               Boolean isDone) {"},{"lineNumber":141,"author":{"gitId":"daniellimws"},"content":"        this.name \u003d name;"},{"lineNumber":142,"author":{"gitId":"wish2023"},"content":"        assert !this.name.equals(EMPTY);"},{"lineNumber":143,"author":{"gitId":"daniellimws"},"content":"        this.importance \u003d importance;"},{"lineNumber":144,"author":{"gitId":"daniellimws"},"content":"        this.notes \u003d notes;"},{"lineNumber":145,"author":{"gitId":"daniellimws"},"content":"        this.number \u003d number;"},{"lineNumber":146,"author":{"gitId":"Kafcis"},"content":"        this.isFlexible \u003d isFlexible;"},{"lineNumber":147,"author":{"gitId":"wish2023"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":148,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":150,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":151,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"wish2023"},"content":"     * Converts date from String to LocalDate."},{"lineNumber":153,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":154,"author":{"gitId":"wish2023"},"content":"     * @param date Date of task occurrence"},{"lineNumber":155,"author":{"gitId":"wish2023"},"content":"     * @return date as a LocalDate"},{"lineNumber":156,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"wish2023"},"content":"    public LocalDate getRecurrenceDate(String date) {"},{"lineNumber":158,"author":{"gitId":"daniellimws"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"},{"lineNumber":159,"author":{"gitId":"wish2023"},"content":"        return LocalDate.parse(date, formatter);"},{"lineNumber":160,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":162,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":163,"author":{"gitId":"wish2023"},"content":"    public Task getClone() {"},{"lineNumber":164,"author":{"gitId":"wish2023"},"content":"        Task copy \u003d new Task(name, isFlexible, isDone, importance, notes, number, timeInfo);"},{"lineNumber":165,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":166,"author":{"gitId":"wish2023"},"content":"        return copy;"},{"lineNumber":167,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":169,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":170,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"daniellimws"},"content":"     * Edits the features of the task."},{"lineNumber":172,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":173,"author":{"gitId":"daniellimws"},"content":"     * @param name       New task name"},{"lineNumber":174,"author":{"gitId":"daniellimws"},"content":"     * @param startTime  New task start time"},{"lineNumber":175,"author":{"gitId":"daniellimws"},"content":"     * @param duration   New task duration"},{"lineNumber":176,"author":{"gitId":"daniellimws"},"content":"     * @param deadline   New task deadline"},{"lineNumber":177,"author":{"gitId":"daniellimws"},"content":"     * @param recurrence New task recurrence"},{"lineNumber":178,"author":{"gitId":"daniellimws"},"content":"     * @param importance New task importance"},{"lineNumber":179,"author":{"gitId":"daniellimws"},"content":"     * @param notes      New task notes"},{"lineNumber":180,"author":{"gitId":"wish2023"},"content":"     * @throws InvalidRecurrenceException   Exception thrown when user mistypes recurrence"},{"lineNumber":181,"author":{"gitId":"wish2023"},"content":"     * @throws InvalidDeadlineException     Exception thrown when user mistypes deadline"},{"lineNumber":182,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":183,"author":{"gitId":"wish2023"},"content":"    public void edit(String name, String startTime, String duration, String deadline,"},{"lineNumber":184,"author":{"gitId":"wish2023"},"content":"                     String recurrence, Importance importance, String notes)"},{"lineNumber":185,"author":{"gitId":"wish2023"},"content":"            throws InvalidRecurrenceException, InvalidDeadlineException, TaskDuringSleepTimeException {"},{"lineNumber":186,"author":{"gitId":"wish2023"},"content":"        setAttributes(name, importance, notes, number, isFlexible, isDone);"},{"lineNumber":187,"author":{"gitId":"wish2023"},"content":"        assertTimeAttributes(startTime, duration, deadline);"},{"lineNumber":188,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":189,"author":{"gitId":"wish2023"},"content":"        recurrence \u003d getDefaultDate(recurrence);"},{"lineNumber":190,"author":{"gitId":"wish2023"},"content":"        timeInfo.edit(startTime, duration, deadline, recurrence);"},{"lineNumber":191,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":193,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":194,"author":{"gitId":"wish2023"},"content":"     * Assert all time attributes are non empty."},{"lineNumber":195,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":196,"author":{"gitId":"wish2023"},"content":"     * @param startTime  starting time of the task"},{"lineNumber":197,"author":{"gitId":"wish2023"},"content":"     * @param duration   how long the task is scheduled to last for"},{"lineNumber":198,"author":{"gitId":"wish2023"},"content":"     * @param deadline   when the task is due"},{"lineNumber":199,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":200,"author":{"gitId":"wish2023"},"content":"    private void assertTimeAttributes(String startTime, String duration, String deadline) {"},{"lineNumber":201,"author":{"gitId":"wish2023"},"content":"        assert !startTime.equals(\"\");"},{"lineNumber":202,"author":{"gitId":"wish2023"},"content":"        assert !duration.equals(\"\");"},{"lineNumber":203,"author":{"gitId":"wish2023"},"content":"        assert !deadline.equals(\"\");"},{"lineNumber":204,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":206,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":207,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":208,"author":{"gitId":"daniellimws"},"content":"     * Return the importance of the task."},{"lineNumber":209,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":210,"author":{"gitId":"daniellimws"},"content":"     * @return Importance of task"},{"lineNumber":211,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":212,"author":{"gitId":"daniellimws"},"content":"    public Importance getImportance() {"},{"lineNumber":213,"author":{"gitId":"daniellimws"},"content":"        return importance;"},{"lineNumber":214,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":215,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":216,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":217,"author":{"gitId":"daniellimws"},"content":"     * Marks the task as done."},{"lineNumber":218,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":219,"author":{"gitId":"wish2023"},"content":"     * @throws TaskIsDoneException Exception thrown when user tries to mark a task as done which is done."},{"lineNumber":220,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":221,"author":{"gitId":"wish2023"},"content":"    public void setDone() throws TaskIsDoneException {"},{"lineNumber":222,"author":{"gitId":"wish2023"},"content":"        if (isDone) {"},{"lineNumber":223,"author":{"gitId":"wish2023"},"content":"            throw new TaskIsDoneException();"},{"lineNumber":224,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":225,"author":{"gitId":"daniellimws"},"content":"        isDone \u003d true;"},{"lineNumber":226,"author":{"gitId":"Kafcis"},"content":"        isFlexible \u003d false;"},{"lineNumber":227,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":229,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":230,"author":{"gitId":"daniellimws"},"content":"     * Returns the description of the task."},{"lineNumber":231,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":232,"author":{"gitId":"daniellimws"},"content":"     * @return Description of task"},{"lineNumber":233,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":234,"author":{"gitId":"daniellimws"},"content":"    public String getName() {"},{"lineNumber":235,"author":{"gitId":"daniellimws"},"content":"        return name;"},{"lineNumber":236,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":237,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":238,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":239,"author":{"gitId":"alstontham"},"content":"     * Returns if the task is done."},{"lineNumber":240,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":241,"author":{"gitId":"alstontham"},"content":"     * @return Status of task completion"},{"lineNumber":242,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":243,"author":{"gitId":"daniellimws"},"content":"    public boolean isDone() {"},{"lineNumber":244,"author":{"gitId":"daniellimws"},"content":"        return isDone;"},{"lineNumber":245,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":246,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":247,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":248,"author":{"gitId":"alstontham"},"content":"     * Returns task notes."},{"lineNumber":249,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":250,"author":{"gitId":"alstontham"},"content":"     * @return Task notes"},{"lineNumber":251,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":252,"author":{"gitId":"daniellimws"},"content":"    public String getNotes() {"},{"lineNumber":253,"author":{"gitId":"daniellimws"},"content":"        return notes;"},{"lineNumber":254,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":255,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":256,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":257,"author":{"gitId":"alstontham"},"content":"     * Returns when the task repeats as a LocalDate object."},{"lineNumber":258,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":259,"author":{"gitId":"alstontham"},"content":"     * @return When the task repeats as a LocalDate object"},{"lineNumber":260,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":261,"author":{"gitId":"wish2023"},"content":"    public ArrayList\u003cLocalDate\u003e getDates() {"},{"lineNumber":262,"author":{"gitId":"wish2023"},"content":"        return timeInfo.getRecurrenceDates();"},{"lineNumber":263,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":264,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":265,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":266,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":267,"author":{"gitId":"alstontham"},"content":"     * Returns the task number."},{"lineNumber":268,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":269,"author":{"gitId":"alstontham"},"content":"     * @return Task number"},{"lineNumber":270,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":271,"author":{"gitId":"daniellimws"},"content":"    public int getNumber() {"},{"lineNumber":272,"author":{"gitId":"daniellimws"},"content":"        return number;"},{"lineNumber":273,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":274,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":275,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":276,"author":{"gitId":"alstontham"},"content":"     * Sets the task number."},{"lineNumber":277,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":278,"author":{"gitId":"alstontham"},"content":"     * @param number Number that the user wants to set the task to."},{"lineNumber":279,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":280,"author":{"gitId":"daniellimws"},"content":"    public void setNumber(int number) {"},{"lineNumber":281,"author":{"gitId":"daniellimws"},"content":"        this.number \u003d number;"},{"lineNumber":282,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":283,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":284,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":285,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":286,"author":{"gitId":"wish2023"},"content":"     * Returns the time flexibility of a task."},{"lineNumber":287,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":288,"author":{"gitId":"wish2023"},"content":"     * @return time flexibility"},{"lineNumber":289,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":290,"author":{"gitId":"Kafcis"},"content":"    public boolean isFlexible() {"},{"lineNumber":291,"author":{"gitId":"Kafcis"},"content":"        return isFlexible;"},{"lineNumber":292,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":293,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":294,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":295,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":296,"author":{"gitId":"alstontham"},"content":"     * Restores a task that the user has just deleted."},{"lineNumber":297,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":298,"author":{"gitId":"alstontham"},"content":"     * @return String representing details of the task the user wants to restore"},{"lineNumber":299,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":300,"author":{"gitId":"daniellimws"},"content":"    public String getTaskRestore() {"},{"lineNumber":301,"author":{"gitId":"Kafcis"},"content":"        String taskRestore \u003d \"add n/\" + this.getName() + \" d/\" + timeInfo.getDuration()"},{"lineNumber":302,"author":{"gitId":"Kafcis"},"content":"                + \" D/\" + this.timeInfo.getDeadline() + \" r/\" + timeInfo.getRecurrence() + \" i/\""},{"lineNumber":303,"author":{"gitId":"Kafcis"},"content":"                + this.getImportance() + \" a/\" + this.getNotes();"},{"lineNumber":304,"author":{"gitId":"Kafcis"},"content":"        if (!isFlexible) {"},{"lineNumber":305,"author":{"gitId":"Kafcis"},"content":"            taskRestore +\u003d \" t/\" + timeInfo.getStartTime().toString().replace(\":\", \"\");"},{"lineNumber":306,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":307,"author":{"gitId":"daniellimws"},"content":"        return taskRestore;"},{"lineNumber":308,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":309,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":310,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":311,"author":{"gitId":"wish2023"},"content":"     * Returns the time information of a task."},{"lineNumber":312,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":313,"author":{"gitId":"wish2023"},"content":"     * @return time information of task"},{"lineNumber":314,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":315,"author":{"gitId":"Kafcis"},"content":"    public TimeData getTimeInfo() {"},{"lineNumber":316,"author":{"gitId":"Kafcis"},"content":"        return timeInfo;"},{"lineNumber":317,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":318,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":319,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":320,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":321,"author":{"gitId":"alstontham"},"content":"     * Converts a task object to a string."},{"lineNumber":322,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":323,"author":{"gitId":"alstontham"},"content":"     * @return task as a string"},{"lineNumber":324,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":325,"author":{"gitId":"daniellimws"},"content":"    @Override"},{"lineNumber":326,"author":{"gitId":"daniellimws"},"content":"    public String toString() {"},{"lineNumber":327,"author":{"gitId":"alstontham"},"content":"        String deadlinePreText;"},{"lineNumber":328,"author":{"gitId":"alstontham"},"content":"        if (timeInfo.getDeadline().toLowerCase().equals(\"no deadline\")) {"},{"lineNumber":329,"author":{"gitId":"alstontham"},"content":"            deadlinePreText \u003d \" and has \";"},{"lineNumber":330,"author":{"gitId":"alstontham"},"content":"        } else {"},{"lineNumber":331,"author":{"gitId":"alstontham"},"content":"            deadlinePreText \u003d \" which should be finished by \";"},{"lineNumber":332,"author":{"gitId":"daniellimws"},"content":"        }"},{"lineNumber":333,"author":{"gitId":"Kafcis"},"content":"        if (timeInfo.getStartTimeString().equals(\"\")) {"},{"lineNumber":334,"author":{"gitId":"Kafcis"},"content":"            return \"[ID: \" + number + \"] \" + name + \" has not been assigned a time\";"},{"lineNumber":335,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":336,"author":{"gitId":"alstontham"},"content":"        return \"[ID: \" + number + \"] \" + name + \" at \" + timeInfo.getStartTime() + deadlinePreText"},{"lineNumber":337,"author":{"gitId":"daniellimws"},"content":"                + timeInfo.getDeadline().toLowerCase() + \". Done? \" + getStatus()"},{"lineNumber":338,"author":{"gitId":"daniellimws"},"content":"                + \" Importance: \" + importance.toString();"},{"lineNumber":339,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":340,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":341,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":342,"author":{"gitId":"amanda-chua"},"content":"     * Converts a task object to a string of details."},{"lineNumber":343,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":344,"author":{"gitId":"amanda-chua"},"content":"     * @return task as a string"},{"lineNumber":345,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":346,"author":{"gitId":"amanda-chua"},"content":"    public String getDetailsAsString() {"},{"lineNumber":347,"author":{"gitId":"wish2023"},"content":"        return \"\\n Done? \" + getStatus() + \"\\n Name: \" + name + \"\\n Start time: \" + timeInfo.getStartTime()"},{"lineNumber":348,"author":{"gitId":"wish2023"},"content":"                + \"\\n Deadline: \" + timeInfo.getDeadline() + \"\\n Duration: \" + timeInfo.getDuration()"},{"lineNumber":349,"author":{"gitId":"wish2023"},"content":"                + \"\\n Recurrence: \" + timeInfo.getRecurrence()"},{"lineNumber":350,"author":{"gitId":"amanda-chua"},"content":"                + \"\\n Importance: \" + importance + \"\\n Notes: \" + notes;"},{"lineNumber":351,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":352,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":353,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":354,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":355,"author":{"gitId":"daniellimws"},"content":"     * Compare this task with another object."},{"lineNumber":356,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":357,"author":{"gitId":"daniellimws"},"content":"     * @param o Object to compare with."},{"lineNumber":358,"author":{"gitId":"daniellimws"},"content":"     * @return Whether the object compared with is also a task and has the exact same properties."},{"lineNumber":359,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":360,"author":{"gitId":"alstontham"},"content":"    @Override"},{"lineNumber":361,"author":{"gitId":"alstontham"},"content":"    public boolean equals(Object o) {"},{"lineNumber":362,"author":{"gitId":"alstontham"},"content":"        if (this \u003d\u003d o) {"},{"lineNumber":363,"author":{"gitId":"alstontham"},"content":"            return true;"},{"lineNumber":364,"author":{"gitId":"alstontham"},"content":"        }"},{"lineNumber":365,"author":{"gitId":"daniellimws"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"},{"lineNumber":366,"author":{"gitId":"alstontham"},"content":"            return false;"},{"lineNumber":367,"author":{"gitId":"alstontham"},"content":"        }"},{"lineNumber":368,"author":{"gitId":"daniellimws"},"content":"        Task task \u003d (Task) o;"},{"lineNumber":369,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":370,"author":{"gitId":"daniellimws"},"content":"        return isDone \u003d\u003d task.isDone"},{"lineNumber":371,"author":{"gitId":"daniellimws"},"content":"                \u0026\u0026 number \u003d\u003d task.number"},{"lineNumber":372,"author":{"gitId":"daniellimws"},"content":"                \u0026\u0026 Objects.equals(name, task.name)"},{"lineNumber":373,"author":{"gitId":"wish2023"},"content":"                \u0026\u0026 Objects.equals(timeInfo, task.timeInfo)"},{"lineNumber":374,"author":{"gitId":"daniellimws"},"content":"                \u0026\u0026 importance \u003d\u003d task.importance"},{"lineNumber":375,"author":{"gitId":"daniellimws"},"content":"                \u0026\u0026 Objects.equals(notes, task.notes);"},{"lineNumber":376,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":377,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":378,"author":{"gitId":"daniellimws"},"content":"    @Override"},{"lineNumber":379,"author":{"gitId":"daniellimws"},"content":"    public int hashCode() {"},{"lineNumber":380,"author":{"gitId":"wish2023"},"content":"        return Objects.hash(name, timeInfo, isDone, importance, notes, number);"},{"lineNumber":381,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":382,"author":{"gitId":"daniellimws"},"content":"}"}],"authorContributionMap":{"Kafcis":43,"alstontham":66,"amanda-chua":8,"daniellimws":112,"wish2023":153}},{"path":"src/main/java/athena/task/TimeData.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Kafcis"},"content":"package athena.task;"},{"lineNumber":2,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":3,"author":{"gitId":"Kafcis"},"content":"import athena.exceptions.command.TaskTooLongException;"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.InvalidDeadlineException;"},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.InvalidRecurrenceException;"},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.TaskDuringSleepTimeException;"},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":8,"author":{"gitId":"wish2023"},"content":"import java.time.DayOfWeek;"},{"lineNumber":9,"author":{"gitId":"Kafcis"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitId":"daniellimws"},"content":"import java.time.LocalTime;"},{"lineNumber":11,"author":{"gitId":"Kafcis"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":12,"author":{"gitId":"Kafcis"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":13,"author":{"gitId":"wish2023"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"wish2023"},"content":"import java.util.Objects;"},{"lineNumber":15,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":16,"author":{"gitId":"wish2023"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"Kafcis"},"content":" * Stores information related to time."},{"lineNumber":18,"author":{"gitId":"Kafcis"},"content":" * examples include startTime, duration, deadline"},{"lineNumber":19,"author":{"gitId":"Kafcis"},"content":" * Recurrence and recurrenceDate can also be stored here"},{"lineNumber":20,"author":{"gitId":"Kafcis"},"content":" */"},{"lineNumber":21,"author":{"gitId":"Kafcis"},"content":"public class TimeData implements Comparable\u003cTimeData\u003e {"},{"lineNumber":22,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":23,"author":{"gitId":"wish2023"},"content":"    private static final int DATE_TIME_FORMAT \u003d 5;"},{"lineNumber":24,"author":{"gitId":"wish2023"},"content":"    private static final LocalTime WAKE_TIME \u003d LocalTime.of(8,0);"},{"lineNumber":25,"author":{"gitId":"wish2023"},"content":"    private static final LocalTime SLEEP_TIME \u003d LocalTime.of(0,0);"},{"lineNumber":26,"author":{"gitId":"wish2023"},"content":"    public static final String NO_DEADLINE \u003d \"No deadline\";"},{"lineNumber":27,"author":{"gitId":"wish2023"},"content":"    public static final String DD_MM_YYYY \u003d \"dd-MM-yyyy\";"},{"lineNumber":28,"author":{"gitId":"wish2023"},"content":"    public static final String DD_MM \u003d \"dd-MM\";"},{"lineNumber":29,"author":{"gitId":"wish2023"},"content":"    public static final String DASH \u003d \"-\";"},{"lineNumber":30,"author":{"gitId":"daniellimws"},"content":"    private boolean isFlexible;"},{"lineNumber":31,"author":{"gitId":"Kafcis"},"content":"    private LocalTime startTime \u003d null;"},{"lineNumber":32,"author":{"gitId":"daniellimws"},"content":"    private int duration;"},{"lineNumber":33,"author":{"gitId":"wish2023"},"content":"    private LocalTime endTime;"},{"lineNumber":34,"author":{"gitId":"Kafcis"},"content":"    private String deadline;"},{"lineNumber":35,"author":{"gitId":"wish2023"},"content":"    private LocalDate deadlineDate;"},{"lineNumber":36,"author":{"gitId":"Kafcis"},"content":"    private String recurrence;"},{"lineNumber":37,"author":{"gitId":"wish2023"},"content":"    private ArrayList\u003cLocalDate\u003e recurrenceDates \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":39,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"Kafcis"},"content":"     * Constructor for timeData class."},{"lineNumber":41,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"wish2023"},"content":"     * @param isFlexible    time flexibility"},{"lineNumber":43,"author":{"gitId":"wish2023"},"content":"     * @param startTime     starting time of task"},{"lineNumber":44,"author":{"gitId":"wish2023"},"content":"     * @param duration      how long the task is scheduled to last for"},{"lineNumber":45,"author":{"gitId":"wish2023"},"content":"     * @param deadline      when the task is due"},{"lineNumber":46,"author":{"gitId":"wish2023"},"content":"     * @param recurrence    when the task occurs/repeats"},{"lineNumber":47,"author":{"gitId":"wish2023"},"content":"     * @throws TaskDuringSleepTimeException Exception thrown when task clashes with sleep time"},{"lineNumber":48,"author":{"gitId":"wish2023"},"content":"     * @throws InvalidRecurrenceException   Exception thrown when user mistypes recurrence"},{"lineNumber":49,"author":{"gitId":"wish2023"},"content":"     * @throws InvalidDeadlineException     Exception thrown when user mistypes deadline"},{"lineNumber":50,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"Kafcis"},"content":"    public TimeData(boolean isFlexible, LocalTime startTime, int duration, String deadline, String recurrence)"},{"lineNumber":52,"author":{"gitId":"wish2023"},"content":"            throws TaskDuringSleepTimeException, InvalidDeadlineException, InvalidRecurrenceException {"},{"lineNumber":53,"author":{"gitId":"Kafcis"},"content":"        if (startTime !\u003d null) {"},{"lineNumber":54,"author":{"gitId":"wish2023"},"content":"            this.startTime \u003d startTime;"},{"lineNumber":55,"author":{"gitId":"wish2023"},"content":"            this.endTime \u003d startTime.plusHours(duration);"},{"lineNumber":56,"author":{"gitId":"wish2023"},"content":"            if (isClashWithSleep()) {"},{"lineNumber":57,"author":{"gitId":"daniellimws"},"content":"                throw new TaskDuringSleepTimeException();"},{"lineNumber":58,"author":{"gitId":"daniellimws"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"Kafcis"},"content":"        this.isFlexible \u003d isFlexible;"},{"lineNumber":61,"author":{"gitId":"Kafcis"},"content":"        this.duration \u003d duration;"},{"lineNumber":62,"author":{"gitId":"Kafcis"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":63,"author":{"gitId":"wish2023"},"content":"        setDeadlineDate(deadline);"},{"lineNumber":64,"author":{"gitId":"Kafcis"},"content":"        this.recurrence \u003d recurrence;"},{"lineNumber":65,"author":{"gitId":"daniellimws"},"content":"        setRecurrence(recurrence);"},{"lineNumber":66,"author":{"gitId":"wish2023"},"content":"        setTime(startTime);"},{"lineNumber":67,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":69,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"wish2023"},"content":"     * Constructor for time class."},{"lineNumber":71,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"wish2023"},"content":"     * @param isFlexible    time flexibility"},{"lineNumber":73,"author":{"gitId":"wish2023"},"content":"     * @param startTime     starting time of task"},{"lineNumber":74,"author":{"gitId":"wish2023"},"content":"     * @param duration      how long the task is scheduled to last for"},{"lineNumber":75,"author":{"gitId":"wish2023"},"content":"     * @param deadline      when the task is due"},{"lineNumber":76,"author":{"gitId":"wish2023"},"content":"     * @param recurrence    when the task occurs/repeats"},{"lineNumber":77,"author":{"gitId":"wish2023"},"content":"     * @throws TaskDuringSleepTimeException Exception thrown when task clashes with sleep time"},{"lineNumber":78,"author":{"gitId":"wish2023"},"content":"     * @throws InvalidRecurrenceException   Exception thrown when user mistypes recurrence"},{"lineNumber":79,"author":{"gitId":"wish2023"},"content":"     * @throws InvalidDeadlineException     Exception thrown when user mistypes deadline"},{"lineNumber":80,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"Kafcis"},"content":"    public TimeData(Boolean isFlexible, String startTime, String duration, String deadline, String recurrence)"},{"lineNumber":82,"author":{"gitId":"Kafcis"},"content":"            throws TaskDuringSleepTimeException, DateTimeParseException, TaskTooLongException,"},{"lineNumber":83,"author":{"gitId":"wish2023"},"content":"            InvalidRecurrenceException, InvalidDeadlineException {"},{"lineNumber":84,"author":{"gitId":"wish2023"},"content":"        setIsFlexible(isFlexible);"},{"lineNumber":85,"author":{"gitId":"wish2023"},"content":"        setDuration(duration);"},{"lineNumber":86,"author":{"gitId":"wish2023"},"content":"        setDeadline(deadline);"},{"lineNumber":87,"author":{"gitId":"wish2023"},"content":"        setDeadlineDate(deadline);"},{"lineNumber":88,"author":{"gitId":"Kafcis"},"content":"        this.recurrence \u003d recurrence;"},{"lineNumber":89,"author":{"gitId":"wish2023"},"content":"        setRecurrence(recurrence);"},{"lineNumber":90,"author":{"gitId":"Kafcis"},"content":"        if (startTime.length() \u003e 0) {"},{"lineNumber":91,"author":{"gitId":"daniellimws"},"content":"            this.startTime \u003d LocalTime.parse(startTime, DateTimeFormatter.ofPattern(\"HHmm\"));"},{"lineNumber":92,"author":{"gitId":"wish2023"},"content":"            this.endTime \u003d this.startTime.plusHours(this.duration);"},{"lineNumber":93,"author":{"gitId":"wish2023"},"content":"            if (isClashWithSleep()) {"},{"lineNumber":94,"author":{"gitId":"daniellimws"},"content":"                throw new TaskDuringSleepTimeException();"},{"lineNumber":95,"author":{"gitId":"Kafcis"},"content":"            } else if (this.duration \u003e 16) {"},{"lineNumber":96,"author":{"gitId":"Kafcis"},"content":"                throw new TaskTooLongException(this.duration);"},{"lineNumber":97,"author":{"gitId":"Kafcis"},"content":"            }"},{"lineNumber":98,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":101,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"wish2023"},"content":"     * Edits attributes of time information of task."},{"lineNumber":103,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"wish2023"},"content":"     * @param startTime     starting time of task"},{"lineNumber":105,"author":{"gitId":"wish2023"},"content":"     * @param duration      how long the task is scheduled to last for"},{"lineNumber":106,"author":{"gitId":"wish2023"},"content":"     * @param deadline      when the task is due"},{"lineNumber":107,"author":{"gitId":"wish2023"},"content":"     * @param recurrence    when the task occurs/repeats"},{"lineNumber":108,"author":{"gitId":"wish2023"},"content":"     * @throws TaskDuringSleepTimeException Exception thrown when task clashes with sleep time"},{"lineNumber":109,"author":{"gitId":"wish2023"},"content":"     * @throws InvalidRecurrenceException   Exception thrown when user mistypes recurrence"},{"lineNumber":110,"author":{"gitId":"wish2023"},"content":"     * @throws InvalidDeadlineException     Exception thrown when user mistypes deadline"},{"lineNumber":111,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"wish2023"},"content":"    public void edit(String startTime, String duration, String deadline, String recurrence)"},{"lineNumber":113,"author":{"gitId":"wish2023"},"content":"            throws TaskDuringSleepTimeException,"},{"lineNumber":114,"author":{"gitId":"wish2023"},"content":"            InvalidRecurrenceException, InvalidDeadlineException {"},{"lineNumber":115,"author":{"gitId":"wish2023"},"content":"        setTime(startTime);"},{"lineNumber":116,"author":{"gitId":"wish2023"},"content":"        setDuration(duration);"},{"lineNumber":117,"author":{"gitId":"wish2023"},"content":"        setDeadline(deadline);"},{"lineNumber":118,"author":{"gitId":"wish2023"},"content":"        setDeadlineDate(deadline);"},{"lineNumber":119,"author":{"gitId":"wish2023"},"content":"        resetRecurrence();"},{"lineNumber":120,"author":{"gitId":"wish2023"},"content":"        setRecurrence(recurrence);"},{"lineNumber":121,"author":{"gitId":"wish2023"},"content":"        assertDates();"},{"lineNumber":122,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":124,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"wish2023"},"content":"     * Ensures dates are non empty."},{"lineNumber":126,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"wish2023"},"content":"    private void assertDates() {"},{"lineNumber":128,"author":{"gitId":"wish2023"},"content":"        assert !this.recurrenceDates.equals(null);"},{"lineNumber":129,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":131,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"wish2023"},"content":"     * Checks if starting time of task is empty."},{"lineNumber":133,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":134,"author":{"gitId":"wish2023"},"content":"     * @param startTime starting time of task"},{"lineNumber":135,"author":{"gitId":"wish2023"},"content":"     * @return whether starting time of task is empty"},{"lineNumber":136,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"wish2023"},"content":"    private boolean isNotEmpty(String startTime) {"},{"lineNumber":138,"author":{"gitId":"wish2023"},"content":"        return startTime.length() \u003e 0;"},{"lineNumber":139,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":141,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"wish2023"},"content":"     * Sets the start time of a task."},{"lineNumber":143,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":144,"author":{"gitId":"wish2023"},"content":"     * @param startTime starting time of task"},{"lineNumber":145,"author":{"gitId":"wish2023"},"content":"     * @throws TaskDuringSleepTimeException Exception thrown when task clashes with sleep time"},{"lineNumber":146,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"wish2023"},"content":"    private void setTime(String startTime) throws TaskDuringSleepTimeException {"},{"lineNumber":148,"author":{"gitId":"daniellimws"},"content":"        this.startTime \u003d LocalTime.parse(startTime, DateTimeFormatter.ofPattern(\"HHmm\"));"},{"lineNumber":149,"author":{"gitId":"wish2023"},"content":"        setEndTime();"},{"lineNumber":150,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":152,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"wish2023"},"content":"     * Sets the start time of a task."},{"lineNumber":154,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":155,"author":{"gitId":"wish2023"},"content":"     * @param startTime starting time of task"},{"lineNumber":156,"author":{"gitId":"wish2023"},"content":"     * @throws TaskDuringSleepTimeException Exception thrown when task clashes with sleep time"},{"lineNumber":157,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"wish2023"},"content":"    private void setTime(LocalTime startTime) throws TaskDuringSleepTimeException {"},{"lineNumber":159,"author":{"gitId":"wish2023"},"content":"        if (startTime !\u003d null) {"},{"lineNumber":160,"author":{"gitId":"wish2023"},"content":"            this.startTime \u003d startTime;"},{"lineNumber":161,"author":{"gitId":"wish2023"},"content":"            setEndTime();"},{"lineNumber":162,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":165,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":166,"author":{"gitId":"wish2023"},"content":"     * Sets the ending time of a task."},{"lineNumber":167,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":168,"author":{"gitId":"wish2023"},"content":"     * @throws TaskDuringSleepTimeException Exception thrown when task clashes with sleep time"},{"lineNumber":169,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":170,"author":{"gitId":"wish2023"},"content":"    private void setEndTime() throws TaskDuringSleepTimeException {"},{"lineNumber":171,"author":{"gitId":"wish2023"},"content":"        endTime \u003d startTime.plusHours(duration);"},{"lineNumber":172,"author":{"gitId":"wish2023"},"content":"        if (isClashWithSleep()) {"},{"lineNumber":173,"author":{"gitId":"daniellimws"},"content":"            throw new TaskDuringSleepTimeException();"},{"lineNumber":174,"author":{"gitId":"daniellimws"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":177,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":178,"author":{"gitId":"wish2023"},"content":"     * Sets the deadline date of a task."},{"lineNumber":179,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":180,"author":{"gitId":"wish2023"},"content":"     * @param deadline when the task is due"},{"lineNumber":181,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":182,"author":{"gitId":"wish2023"},"content":"    private void setDeadline(String deadline) {"},{"lineNumber":183,"author":{"gitId":"wish2023"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":184,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":186,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":187,"author":{"gitId":"wish2023"},"content":"     * Sets the duration of a task."},{"lineNumber":188,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":189,"author":{"gitId":"wish2023"},"content":"     * @param duration how long the task is scheduled to last for"},{"lineNumber":190,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":191,"author":{"gitId":"wish2023"},"content":"    private void setDuration(String duration) {"},{"lineNumber":192,"author":{"gitId":"wish2023"},"content":"        this.duration \u003d Integer.parseInt(duration);"},{"lineNumber":193,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":195,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":196,"author":{"gitId":"wish2023"},"content":"     * Sets the duration of a task."},{"lineNumber":197,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":198,"author":{"gitId":"wish2023"},"content":"     * @param duration how long the task is scheduled to last for"},{"lineNumber":199,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":200,"author":{"gitId":"wish2023"},"content":"    private void setDuration(int duration) {"},{"lineNumber":201,"author":{"gitId":"wish2023"},"content":"        this.duration \u003d duration;"},{"lineNumber":202,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":203,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":204,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":205,"author":{"gitId":"wish2023"},"content":"     * Sets the flexibility of a task."},{"lineNumber":206,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":207,"author":{"gitId":"wish2023"},"content":"     * @param isFlexible time flexibility"},{"lineNumber":208,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":209,"author":{"gitId":"wish2023"},"content":"    private void setIsFlexible(Boolean isFlexible) {"},{"lineNumber":210,"author":{"gitId":"wish2023"},"content":"        this.isFlexible \u003d isFlexible;"},{"lineNumber":211,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":212,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":213,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":214,"author":{"gitId":"wish2023"},"content":"     * Checks if the task has a flexible time."},{"lineNumber":215,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":216,"author":{"gitId":"wish2023"},"content":"     * @return whether task is flexible."},{"lineNumber":217,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":218,"author":{"gitId":"wish2023"},"content":"    public boolean getFlexible() {"},{"lineNumber":219,"author":{"gitId":"wish2023"},"content":"        return isFlexible;"},{"lineNumber":220,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":221,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":222,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":223,"author":{"gitId":"wish2023"},"content":"     * Checks if a task is between 12am and 8am."},{"lineNumber":224,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":225,"author":{"gitId":"wish2023"},"content":"     * @return whether the task clashes with sleep time"},{"lineNumber":226,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":227,"author":{"gitId":"wish2023"},"content":"    private boolean isClashWithSleep() {"},{"lineNumber":228,"author":{"gitId":"wish2023"},"content":"        return !isNoClashWithSleep();"},{"lineNumber":229,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":230,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":231,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":232,"author":{"gitId":"wish2023"},"content":"     * Checks if a task is not between 12am and 8am."},{"lineNumber":233,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":234,"author":{"gitId":"wish2023"},"content":"     * @return whether the task doesn\u0027t clash with sleep time"},{"lineNumber":235,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":236,"author":{"gitId":"wish2023"},"content":"    private boolean isNoClashWithSleep() {"},{"lineNumber":237,"author":{"gitId":"wish2023"},"content":"        return startTime.compareTo(WAKE_TIME) \u003e\u003d 0"},{"lineNumber":238,"author":{"gitId":"wish2023"},"content":"                \u0026\u0026 !(endTime.compareTo(WAKE_TIME) \u003c 0 \u0026\u0026 endTime.compareTo(SLEEP_TIME) \u003e 0)"},{"lineNumber":239,"author":{"gitId":"wish2023"},"content":"                \u0026\u0026 duration \u003c\u003d 16;"},{"lineNumber":240,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":241,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":242,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":243,"author":{"gitId":"wish2023"},"content":"     * Creates a deep clone of a Time object."},{"lineNumber":244,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":245,"author":{"gitId":"wish2023"},"content":"     * @return Cloned Time object"},{"lineNumber":246,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":247,"author":{"gitId":"wish2023"},"content":"    public TimeData getClone() {"},{"lineNumber":248,"author":{"gitId":"wish2023"},"content":"        try {"},{"lineNumber":249,"author":{"gitId":"Kafcis"},"content":"            return new TimeData(isFlexible, startTime, duration, deadline, recurrence);"},{"lineNumber":250,"author":{"gitId":"wish2023"},"content":"        } catch (TaskDuringSleepTimeException | InvalidRecurrenceException | InvalidDeadlineException e) {"},{"lineNumber":251,"author":{"gitId":"wish2023"},"content":"            assert false;"},{"lineNumber":252,"author":{"gitId":"wish2023"},"content":"            return null;"},{"lineNumber":253,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":254,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":255,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":256,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":257,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":258,"author":{"gitId":"wish2023"},"content":"     * Adds all dates for when task is supposed to occur in recurrenceDates."},{"lineNumber":259,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":260,"author":{"gitId":"wish2023"},"content":"     * @param recurrence when the task occurs/repeats"},{"lineNumber":261,"author":{"gitId":"wish2023"},"content":"     * @throws InvalidRecurrenceException Exception thrown when user mistypes recurrence"},{"lineNumber":262,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":263,"author":{"gitId":"wish2023"},"content":"    public void setRecurrence(String recurrence) throws InvalidRecurrenceException {"},{"lineNumber":264,"author":{"gitId":"wish2023"},"content":"        switch (recurrence.toUpperCase()) {"},{"lineNumber":265,"author":{"gitId":"wish2023"},"content":"        case \"MONDAY\":"},{"lineNumber":266,"author":{"gitId":"wish2023"},"content":"            LocalDate mondayDate \u003d getFirstDateMatchingDay(DayOfWeek.MONDAY);"},{"lineNumber":267,"author":{"gitId":"wish2023"},"content":"            addDates(mondayDate);"},{"lineNumber":268,"author":{"gitId":"wish2023"},"content":"            break;"},{"lineNumber":269,"author":{"gitId":"wish2023"},"content":"        case \"TUESDAY\":"},{"lineNumber":270,"author":{"gitId":"wish2023"},"content":"            LocalDate tuesdayDate \u003d getFirstDateMatchingDay(DayOfWeek.TUESDAY);"},{"lineNumber":271,"author":{"gitId":"wish2023"},"content":"            addDates(tuesdayDate);"},{"lineNumber":272,"author":{"gitId":"wish2023"},"content":"            break;"},{"lineNumber":273,"author":{"gitId":"wish2023"},"content":"        case \"WEDNESDAY\":"},{"lineNumber":274,"author":{"gitId":"wish2023"},"content":"            LocalDate wednesdayDate \u003d getFirstDateMatchingDay(DayOfWeek.WEDNESDAY);"},{"lineNumber":275,"author":{"gitId":"wish2023"},"content":"            addDates(wednesdayDate);"},{"lineNumber":276,"author":{"gitId":"wish2023"},"content":"            break;"},{"lineNumber":277,"author":{"gitId":"wish2023"},"content":"        case \"THURSDAY\":"},{"lineNumber":278,"author":{"gitId":"wish2023"},"content":"            LocalDate thursdayDate \u003d getFirstDateMatchingDay(DayOfWeek.THURSDAY);"},{"lineNumber":279,"author":{"gitId":"wish2023"},"content":"            addDates(thursdayDate);"},{"lineNumber":280,"author":{"gitId":"wish2023"},"content":"            break;"},{"lineNumber":281,"author":{"gitId":"wish2023"},"content":"        case \"FRIDAY\":"},{"lineNumber":282,"author":{"gitId":"wish2023"},"content":"            LocalDate fridayDate \u003d getFirstDateMatchingDay(DayOfWeek.FRIDAY);"},{"lineNumber":283,"author":{"gitId":"wish2023"},"content":"            addDates(fridayDate);"},{"lineNumber":284,"author":{"gitId":"wish2023"},"content":"            break;"},{"lineNumber":285,"author":{"gitId":"wish2023"},"content":"        case \"SATURDAY\":"},{"lineNumber":286,"author":{"gitId":"wish2023"},"content":"            LocalDate saturdayDate \u003d getFirstDateMatchingDay(DayOfWeek.SATURDAY);"},{"lineNumber":287,"author":{"gitId":"wish2023"},"content":"            addDates(saturdayDate);"},{"lineNumber":288,"author":{"gitId":"wish2023"},"content":"            break;"},{"lineNumber":289,"author":{"gitId":"wish2023"},"content":"        case \"SUNDAY\":"},{"lineNumber":290,"author":{"gitId":"wish2023"},"content":"            LocalDate sundayDate \u003d getFirstDateMatchingDay(DayOfWeek.SUNDAY);"},{"lineNumber":291,"author":{"gitId":"wish2023"},"content":"            addDates(sundayDate);"},{"lineNumber":292,"author":{"gitId":"wish2023"},"content":"            break;"},{"lineNumber":293,"author":{"gitId":"wish2023"},"content":"        default:"},{"lineNumber":294,"author":{"gitId":"wish2023"},"content":"            setRecurrenceDate(recurrence);"},{"lineNumber":295,"author":{"gitId":"wish2023"},"content":"            return;"},{"lineNumber":296,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":297,"author":{"gitId":"wish2023"},"content":"        this.recurrence \u003d recurrence;"},{"lineNumber":298,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":299,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":300,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":301,"author":{"gitId":"wish2023"},"content":"     * Adds dates of tasks in recurrenceDates for 10 weeks."},{"lineNumber":302,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":303,"author":{"gitId":"wish2023"},"content":"     * @param startDate the start date of the task"},{"lineNumber":304,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":305,"author":{"gitId":"wish2023"},"content":"    private void addDates(LocalDate startDate) {"},{"lineNumber":306,"author":{"gitId":"wish2023"},"content":"        for (int i \u003d 0; i \u003c 10; i++) {"},{"lineNumber":307,"author":{"gitId":"wish2023"},"content":"            recurrenceDates.add(startDate.plusWeeks(i));"},{"lineNumber":308,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":309,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":310,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":311,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":312,"author":{"gitId":"wish2023"},"content":"     * Returns the date of the first indicated day of the week."},{"lineNumber":313,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":314,"author":{"gitId":"wish2023"},"content":"     * @param dayOfWeek day of the week whose first date needs to be found"},{"lineNumber":315,"author":{"gitId":"wish2023"},"content":"     * @return first date from today of day of week"},{"lineNumber":316,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":317,"author":{"gitId":"wish2023"},"content":"    private LocalDate getFirstDateMatchingDay(DayOfWeek dayOfWeek) {"},{"lineNumber":318,"author":{"gitId":"wish2023"},"content":"        LocalDate startDate \u003d LocalDate.now();"},{"lineNumber":319,"author":{"gitId":"wish2023"},"content":"        for (int i \u003d 0; i \u003c 6; i++) {"},{"lineNumber":320,"author":{"gitId":"wish2023"},"content":"            if (startDate.getDayOfWeek().equals(dayOfWeek)) {"},{"lineNumber":321,"author":{"gitId":"wish2023"},"content":"                break;"},{"lineNumber":322,"author":{"gitId":"wish2023"},"content":"            } else {"},{"lineNumber":323,"author":{"gitId":"wish2023"},"content":"                startDate \u003d startDate.plusDays(1);"},{"lineNumber":324,"author":{"gitId":"wish2023"},"content":"            }"},{"lineNumber":325,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":326,"author":{"gitId":"wish2023"},"content":"        return startDate;"},{"lineNumber":327,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":328,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":329,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":330,"author":{"gitId":"wish2023"},"content":"     * Adds task date to recurrenceDates."},{"lineNumber":331,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":332,"author":{"gitId":"wish2023"},"content":"     * @param recurrence Date task occurs"},{"lineNumber":333,"author":{"gitId":"wish2023"},"content":"     * @throws InvalidRecurrenceException Exception thrown when user mistypes recurrence"},{"lineNumber":334,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":335,"author":{"gitId":"wish2023"},"content":"    private void setRecurrenceDate(String recurrence) throws InvalidRecurrenceException {"},{"lineNumber":336,"author":{"gitId":"wish2023"},"content":"        try {"},{"lineNumber":337,"author":{"gitId":"wish2023"},"content":"            addSingleDate(recurrence);"},{"lineNumber":338,"author":{"gitId":"wish2023"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":339,"author":{"gitId":"wish2023"},"content":"            throw new InvalidRecurrenceException();"},{"lineNumber":340,"author":{"gitId":"wish2023"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":341,"author":{"gitId":"wish2023"},"content":"            throw new InvalidRecurrenceException();"},{"lineNumber":342,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":343,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":344,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":345,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":346,"author":{"gitId":"wish2023"},"content":"     * Adds a date to recurrenceDates."},{"lineNumber":347,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":348,"author":{"gitId":"wish2023"},"content":"     * @param recurrence Date of task occurrence"},{"lineNumber":349,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":350,"author":{"gitId":"wish2023"},"content":"    private void addSingleDate(String recurrence) {"},{"lineNumber":351,"author":{"gitId":"wish2023"},"content":"        LocalDate date \u003d getDate(recurrence);"},{"lineNumber":352,"author":{"gitId":"wish2023"},"content":"        if (recurrence.length() \u003d\u003d \"dd-MM\".length()) {"},{"lineNumber":353,"author":{"gitId":"wish2023"},"content":"            this.recurrence \u003d recurrence + \"-\" + date.getYear();"},{"lineNumber":354,"author":{"gitId":"wish2023"},"content":"        } else {"},{"lineNumber":355,"author":{"gitId":"wish2023"},"content":"            this.recurrence \u003d recurrence;"},{"lineNumber":356,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":357,"author":{"gitId":"wish2023"},"content":"        recurrenceDates.add(date);"},{"lineNumber":358,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":359,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":360,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":361,"author":{"gitId":"wish2023"},"content":"     * Sets the deadline of task."},{"lineNumber":362,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":363,"author":{"gitId":"wish2023"},"content":"     * @param deadline Date of deadline for task"},{"lineNumber":364,"author":{"gitId":"wish2023"},"content":"     * @throws InvalidDeadlineException if user mistypes deadline date"},{"lineNumber":365,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":366,"author":{"gitId":"wish2023"},"content":"    private void setDeadlineDate(String deadline) throws InvalidDeadlineException {"},{"lineNumber":367,"author":{"gitId":"wish2023"},"content":"        if (!deadline.equals(NO_DEADLINE)) {"},{"lineNumber":368,"author":{"gitId":"wish2023"},"content":"            trySetHardDeadline(deadline);"},{"lineNumber":369,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":370,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":371,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":372,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":373,"author":{"gitId":"wish2023"},"content":"     * Attempts to set a hard deadline for a task."},{"lineNumber":374,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":375,"author":{"gitId":"wish2023"},"content":"     * @param deadline Date of deadline for task"},{"lineNumber":376,"author":{"gitId":"wish2023"},"content":"     * @throws InvalidDeadlineException if user mistypes deadline date"},{"lineNumber":377,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":378,"author":{"gitId":"wish2023"},"content":"    private void trySetHardDeadline(String deadline) throws InvalidDeadlineException {"},{"lineNumber":379,"author":{"gitId":"wish2023"},"content":"        try {"},{"lineNumber":380,"author":{"gitId":"wish2023"},"content":"            setHardDeadline(deadline);"},{"lineNumber":381,"author":{"gitId":"wish2023"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":382,"author":{"gitId":"wish2023"},"content":"            throw new InvalidDeadlineException();"},{"lineNumber":383,"author":{"gitId":"wish2023"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":384,"author":{"gitId":"wish2023"},"content":"            throw new InvalidDeadlineException();"},{"lineNumber":385,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":386,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":387,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":388,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":389,"author":{"gitId":"wish2023"},"content":"     * Sets a hard deadline for task."},{"lineNumber":390,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":391,"author":{"gitId":"wish2023"},"content":"     * @param deadline Date of deadline for task"},{"lineNumber":392,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":393,"author":{"gitId":"wish2023"},"content":"    private void setHardDeadline(String deadline) {"},{"lineNumber":394,"author":{"gitId":"wish2023"},"content":"        LocalDate date \u003d getDate(deadline);"},{"lineNumber":395,"author":{"gitId":"wish2023"},"content":"        if (deadline.length() \u003d\u003d \"dd-MM\".length()) {"},{"lineNumber":396,"author":{"gitId":"wish2023"},"content":"            this.deadline \u003d deadline + \"-\" + date.getYear();"},{"lineNumber":397,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":398,"author":{"gitId":"wish2023"},"content":"        this.deadlineDate \u003d date;"},{"lineNumber":399,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":400,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":401,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":402,"author":{"gitId":"wish2023"},"content":"     * Converts a date from String to LocalDate."},{"lineNumber":403,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":404,"author":{"gitId":"wish2023"},"content":"     * @param dateString Date to be returned in a string"},{"lineNumber":405,"author":{"gitId":"wish2023"},"content":"     * @return The converted date"},{"lineNumber":406,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":407,"author":{"gitId":"wish2023"},"content":"    private LocalDate getDate(String dateString) {"},{"lineNumber":408,"author":{"gitId":"wish2023"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DD_MM_YYYY);"},{"lineNumber":409,"author":{"gitId":"wish2023"},"content":"        LocalDate date;"},{"lineNumber":410,"author":{"gitId":"wish2023"},"content":"        if (dateString.length() \u003d\u003d DD_MM.length()) {"},{"lineNumber":411,"author":{"gitId":"wish2023"},"content":"            int year \u003d getYear(dateString);"},{"lineNumber":412,"author":{"gitId":"wish2023"},"content":"            date \u003d LocalDate.parse(dateString + DASH"},{"lineNumber":413,"author":{"gitId":"wish2023"},"content":"                    + year, formatter);"},{"lineNumber":414,"author":{"gitId":"wish2023"},"content":"        } else {"},{"lineNumber":415,"author":{"gitId":"wish2023"},"content":"            date \u003d LocalDate.parse(dateString, formatter);"},{"lineNumber":416,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":417,"author":{"gitId":"wish2023"},"content":"        return date;"},{"lineNumber":418,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":419,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":420,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":421,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":422,"author":{"gitId":"wish2023"},"content":"     * Clears all dates in recurrenceDates."},{"lineNumber":423,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":424,"author":{"gitId":"Kafcis"},"content":"    public void resetRecurrence() {"},{"lineNumber":425,"author":{"gitId":"wish2023"},"content":"        recurrenceDates.clear();"},{"lineNumber":426,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":427,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":428,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":429,"author":{"gitId":"wish2023"},"content":"     * Extracts the month of task occurrence."},{"lineNumber":430,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":431,"author":{"gitId":"wish2023"},"content":"     * @param recurrence Date of task occurrence"},{"lineNumber":432,"author":{"gitId":"wish2023"},"content":"     * @return month of task"},{"lineNumber":433,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":434,"author":{"gitId":"wish2023"},"content":"    private int getMonth(String recurrence) {"},{"lineNumber":435,"author":{"gitId":"wish2023"},"content":"        return Integer.parseInt(recurrence.substring(3, 5));"},{"lineNumber":436,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":437,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":438,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":439,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":440,"author":{"gitId":"wish2023"},"content":"     * Extracts the day of month of task occurrence."},{"lineNumber":441,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":442,"author":{"gitId":"wish2023"},"content":"     * @param recurrence Date of task occurrence"},{"lineNumber":443,"author":{"gitId":"wish2023"},"content":"     * @return day of task"},{"lineNumber":444,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":445,"author":{"gitId":"wish2023"},"content":"    private int getDay(String recurrence) {"},{"lineNumber":446,"author":{"gitId":"wish2023"},"content":"        return Integer.parseInt(recurrence.substring(0, 2));"},{"lineNumber":447,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":448,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":449,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":450,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":451,"author":{"gitId":"wish2023"},"content":"     * Extracts the year of task occurrence."},{"lineNumber":452,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":453,"author":{"gitId":"wish2023"},"content":"     * @param recurrence Date of task occurrence"},{"lineNumber":454,"author":{"gitId":"wish2023"},"content":"     * @return year of task"},{"lineNumber":455,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":456,"author":{"gitId":"wish2023"},"content":"    private int getYear(String recurrence) {"},{"lineNumber":457,"author":{"gitId":"wish2023"},"content":"        int month \u003d getMonth(recurrence);"},{"lineNumber":458,"author":{"gitId":"wish2023"},"content":"        int day \u003d getDay(recurrence);"},{"lineNumber":459,"author":{"gitId":"wish2023"},"content":"        int year \u003d calculateYear(month, day);"},{"lineNumber":460,"author":{"gitId":"wish2023"},"content":"        return year;"},{"lineNumber":461,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":462,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":463,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":464,"author":{"gitId":"wish2023"},"content":"     * Calculates the year of a task based on month and day."},{"lineNumber":465,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":466,"author":{"gitId":"wish2023"},"content":"     * @param month     Month of task occurrence"},{"lineNumber":467,"author":{"gitId":"wish2023"},"content":"     * @param day       Day of task occurrence"},{"lineNumber":468,"author":{"gitId":"wish2023"},"content":"     * @return year of task occurrence."},{"lineNumber":469,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":470,"author":{"gitId":"wish2023"},"content":"    private int calculateYear(int month, int day) {"},{"lineNumber":471,"author":{"gitId":"wish2023"},"content":"        LocalDate currentDate \u003d LocalDate.now();"},{"lineNumber":472,"author":{"gitId":"wish2023"},"content":"        int year;"},{"lineNumber":473,"author":{"gitId":"wish2023"},"content":"        if (isCurrentMonthAhead(currentDate, month)) {"},{"lineNumber":474,"author":{"gitId":"wish2023"},"content":"            year \u003d currentDate.getYear() + 1;"},{"lineNumber":475,"author":{"gitId":"wish2023"},"content":"        } else if (isCurrentDayAhead(currentDate, month, day)) {"},{"lineNumber":476,"author":{"gitId":"wish2023"},"content":"            year \u003d currentDate.getYear() + 1;"},{"lineNumber":477,"author":{"gitId":"Kafcis"},"content":"        } else {"},{"lineNumber":478,"author":{"gitId":"wish2023"},"content":"            year \u003d currentDate.getYear();"},{"lineNumber":479,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":480,"author":{"gitId":"wish2023"},"content":"        return year;"},{"lineNumber":481,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":482,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":483,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":484,"author":{"gitId":"wish2023"},"content":"     * Checks if current day is ahead of task day in calender year."},{"lineNumber":485,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":486,"author":{"gitId":"wish2023"},"content":"     * @param currentDate   Today\u0027s date"},{"lineNumber":487,"author":{"gitId":"wish2023"},"content":"     * @param month         Month of task occurrence"},{"lineNumber":488,"author":{"gitId":"wish2023"},"content":"     * @param day           Day of task occurrence"},{"lineNumber":489,"author":{"gitId":"wish2023"},"content":"     * @return whether current day is ahead of task day"},{"lineNumber":490,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":491,"author":{"gitId":"wish2023"},"content":"    private boolean isCurrentDayAhead(LocalDate currentDate, int month, int day) {"},{"lineNumber":492,"author":{"gitId":"wish2023"},"content":"        return currentDate.getMonthValue() \u003d\u003d month"},{"lineNumber":493,"author":{"gitId":"wish2023"},"content":"                \u0026\u0026 currentDate.getDayOfMonth() \u003e day;"},{"lineNumber":494,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":495,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":496,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":497,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":498,"author":{"gitId":"wish2023"},"content":"     * Checks if current month is ahead of task month in calender year."},{"lineNumber":499,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":500,"author":{"gitId":"wish2023"},"content":"     * @param currentDate   Today\u0027s date"},{"lineNumber":501,"author":{"gitId":"wish2023"},"content":"     * @param month         Month of task occurrence"},{"lineNumber":502,"author":{"gitId":"wish2023"},"content":"     * @return whether current month is ahead of task month"},{"lineNumber":503,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":504,"author":{"gitId":"wish2023"},"content":"    private boolean isCurrentMonthAhead(LocalDate currentDate, int month) {"},{"lineNumber":505,"author":{"gitId":"wish2023"},"content":"        return currentDate.getMonthValue() \u003e month;"},{"lineNumber":506,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":507,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":508,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":509,"author":{"gitId":"wish2023"},"content":"     * Returns the dates of when the task will occur."},{"lineNumber":510,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":511,"author":{"gitId":"wish2023"},"content":"     * @return dates the task will occur"},{"lineNumber":512,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":513,"author":{"gitId":"wish2023"},"content":"    public ArrayList\u003cLocalDate\u003e getRecurrenceDates() {"},{"lineNumber":514,"author":{"gitId":"wish2023"},"content":"        return recurrenceDates;"},{"lineNumber":515,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":516,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":517,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":518,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":519,"author":{"gitId":"wish2023"},"content":"     * Returns the starting time of a task."},{"lineNumber":520,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":521,"author":{"gitId":"wish2023"},"content":"     * @return the start time of the task"},{"lineNumber":522,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":523,"author":{"gitId":"daniellimws"},"content":"    public LocalTime getStartTime() {"},{"lineNumber":524,"author":{"gitId":"daniellimws"},"content":"        return startTime;"},{"lineNumber":525,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":526,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":527,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":528,"author":{"gitId":"wish2023"},"content":"     * Returns the time a task is expected to finish."},{"lineNumber":529,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":530,"author":{"gitId":"wish2023"},"content":"     * @return ending time of a task"},{"lineNumber":531,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":532,"author":{"gitId":"wish2023"},"content":"    public LocalTime getEndTime() {"},{"lineNumber":533,"author":{"gitId":"wish2023"},"content":"        return endTime;"},{"lineNumber":534,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":535,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":536,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":537,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":538,"author":{"gitId":"wish2023"},"content":"     * Set the start time of the task."},{"lineNumber":539,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":540,"author":{"gitId":"wish2023"},"content":"     * @param startTime Start time of task"},{"lineNumber":541,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":542,"author":{"gitId":"Kafcis"},"content":"    public void setStartTime(LocalTime startTime) {"},{"lineNumber":543,"author":{"gitId":"Kafcis"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":544,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":545,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":546,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":547,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":548,"author":{"gitId":"daniellimws"},"content":"     * Converts the start time to a string."},{"lineNumber":549,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":550,"author":{"gitId":"daniellimws"},"content":"     * @return Start time of task as a string."},{"lineNumber":551,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":552,"author":{"gitId":"daniellimws"},"content":"    public String getStartTimeString() {"},{"lineNumber":553,"author":{"gitId":"daniellimws"},"content":"        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");"},{"lineNumber":554,"author":{"gitId":"Kafcis"},"content":"        if (startTime \u003d\u003d null) {"},{"lineNumber":555,"author":{"gitId":"Kafcis"},"content":"            return \"\";"},{"lineNumber":556,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":557,"author":{"gitId":"daniellimws"},"content":"        return startTime.format(timeFormatter);"},{"lineNumber":558,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":559,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":560,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":561,"author":{"gitId":"wish2023"},"content":"     * Returns the date or occurrence of task."},{"lineNumber":562,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":563,"author":{"gitId":"wish2023"},"content":"     * @return when the task occurs/repeats"},{"lineNumber":564,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":565,"author":{"gitId":"wish2023"},"content":"    public String getRecurrence() {"},{"lineNumber":566,"author":{"gitId":"wish2023"},"content":"        return recurrence;"},{"lineNumber":567,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":568,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":569,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":570,"author":{"gitId":"wish2023"},"content":"     * Returns duration of the task."},{"lineNumber":571,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":572,"author":{"gitId":"wish2023"},"content":"     * @return Duration of task"},{"lineNumber":573,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":574,"author":{"gitId":"daniellimws"},"content":"    public int getDuration() {"},{"lineNumber":575,"author":{"gitId":"wish2023"},"content":"        return duration;"},{"lineNumber":576,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":577,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":578,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":579,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":580,"author":{"gitId":"daniellimws"},"content":"     * Converts the duration to a string."},{"lineNumber":581,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":582,"author":{"gitId":"daniellimws"},"content":"     * @return Duration of task as a string."},{"lineNumber":583,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":584,"author":{"gitId":"daniellimws"},"content":"    public String getDurationString() {"},{"lineNumber":585,"author":{"gitId":"daniellimws"},"content":"        return Integer.toString(duration);"},{"lineNumber":586,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":587,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":588,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":589,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":590,"author":{"gitId":"wish2023"},"content":"     * Returns due date of the task."},{"lineNumber":591,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":592,"author":{"gitId":"wish2023"},"content":"     * @return Due date of task"},{"lineNumber":593,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":594,"author":{"gitId":"wish2023"},"content":"    public String getDeadline() {"},{"lineNumber":595,"author":{"gitId":"wish2023"},"content":"        return deadline;"},{"lineNumber":596,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":597,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":598,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":599,"author":{"gitId":"Kafcis"},"content":"    @Override"},{"lineNumber":600,"author":{"gitId":"Kafcis"},"content":"    public int compareTo(TimeData o) {"},{"lineNumber":601,"author":{"gitId":"Kafcis"},"content":"        return 0;"},{"lineNumber":602,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":603,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":604,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":605,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":606,"author":{"gitId":"wish2023"},"content":"     * Removes a date from recurrenceDates."},{"lineNumber":607,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":608,"author":{"gitId":"wish2023"},"content":"     * @param date Date to be removed"},{"lineNumber":609,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":610,"author":{"gitId":"wish2023"},"content":"    public void removeDate(LocalDate date) {"},{"lineNumber":611,"author":{"gitId":"wish2023"},"content":"        recurrenceDates.remove(date);"},{"lineNumber":612,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":613,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":614,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":615,"author":{"gitId":"wish2023"},"content":"     * Compare this time with another object."},{"lineNumber":616,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":617,"author":{"gitId":"wish2023"},"content":"     * @param o Object to compare with."},{"lineNumber":618,"author":{"gitId":"wish2023"},"content":"     * @return Whether the object compared with is also a time and has the exact same properties."},{"lineNumber":619,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":620,"author":{"gitId":"wish2023"},"content":"    @Override"},{"lineNumber":621,"author":{"gitId":"wish2023"},"content":"    public boolean equals(Object o) {"},{"lineNumber":622,"author":{"gitId":"wish2023"},"content":"        if (this \u003d\u003d o) {"},{"lineNumber":623,"author":{"gitId":"wish2023"},"content":"            return true;"},{"lineNumber":624,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":625,"author":{"gitId":"wish2023"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"},{"lineNumber":626,"author":{"gitId":"wish2023"},"content":"            return false;"},{"lineNumber":627,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":628,"author":{"gitId":"Kafcis"},"content":"        TimeData time \u003d (TimeData) o;"},{"lineNumber":629,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":630,"author":{"gitId":"wish2023"},"content":"        return isFlexible \u003d\u003d time.isFlexible"},{"lineNumber":631,"author":{"gitId":"wish2023"},"content":"                \u0026\u0026 Objects.equals(startTime, time.startTime)"},{"lineNumber":632,"author":{"gitId":"wish2023"},"content":"                \u0026\u0026 Objects.equals(duration, time.duration)"},{"lineNumber":633,"author":{"gitId":"wish2023"},"content":"                \u0026\u0026 Objects.equals(deadline, time.deadline)"},{"lineNumber":634,"author":{"gitId":"wish2023"},"content":"                \u0026\u0026 Objects.equals(recurrenceDates, time.recurrenceDates);"},{"lineNumber":635,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":636,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":637,"author":{"gitId":"Kafcis"},"content":"}"}],"authorContributionMap":{"Kafcis":63,"daniellimws":36,"wish2023":538}},{"path":"src/main/java/athena/task/taskfilter/DayFilter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.task.taskfilter;"},{"lineNumber":2,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.task.Task;"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":"public class DayFilter extends TaskFilter {"},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":9,"author":{"gitId":"daniellimws"},"content":"    private LocalDate filterDate;"},{"lineNumber":10,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":11,"author":{"gitId":"daniellimws"},"content":"    public DayFilter(LocalDate filterDate) {"},{"lineNumber":12,"author":{"gitId":"daniellimws"},"content":"        this.filterDate \u003d filterDate;"},{"lineNumber":13,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":15,"author":{"gitId":"daniellimws"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"daniellimws"},"content":"    public boolean isTaskIncluded(Task task) {"},{"lineNumber":17,"author":{"gitId":"daniellimws"},"content":"        for (LocalDate date : task.getDates()) {"},{"lineNumber":18,"author":{"gitId":"daniellimws"},"content":"            if (date.equals(filterDate)) {"},{"lineNumber":19,"author":{"gitId":"daniellimws"},"content":"                return true;"},{"lineNumber":20,"author":{"gitId":"daniellimws"},"content":"            }"},{"lineNumber":21,"author":{"gitId":"daniellimws"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"daniellimws"},"content":"        return false;"},{"lineNumber":23,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"daniellimws"},"content":"}"}],"authorContributionMap":{"daniellimws":24}},{"path":"src/main/java/athena/task/taskfilter/FilterCalculator.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wish2023"},"content":"package athena.task.taskfilter;"},{"lineNumber":2,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":3,"author":{"gitId":"wish2023"},"content":"import athena.Forecast;"},{"lineNumber":4,"author":{"gitId":"wish2023"},"content":"import athena.Importance;"},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.InvalidForecastException;"},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.InvalidImportanceException;"},{"lineNumber":7,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":8,"author":{"gitId":"wish2023"},"content":"public class FilterCalculator {"},{"lineNumber":9,"author":{"gitId":"wish2023"},"content":"    Forecast forecast;"},{"lineNumber":10,"author":{"gitId":"wish2023"},"content":"    Importance importance;"},{"lineNumber":11,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":12,"author":{"gitId":"wish2023"},"content":"    public FilterCalculator(String importance, String forecast)"},{"lineNumber":13,"author":{"gitId":"wish2023"},"content":"            throws InvalidImportanceException, InvalidForecastException {"},{"lineNumber":14,"author":{"gitId":"wish2023"},"content":"        this.forecast \u003d calculateForecast(forecast);"},{"lineNumber":15,"author":{"gitId":"wish2023"},"content":"        this.importance \u003d calculateImportance(importance);"},{"lineNumber":16,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":18,"author":{"gitId":"wish2023"},"content":"    private Importance calculateImportance(String importance) throws InvalidImportanceException {"},{"lineNumber":19,"author":{"gitId":"wish2023"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"wish2023"},"content":"            return Importance.valueOf(importance.toUpperCase());"},{"lineNumber":21,"author":{"gitId":"wish2023"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":22,"author":{"gitId":"wish2023"},"content":"            throw new InvalidImportanceException();"},{"lineNumber":23,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":26,"author":{"gitId":"wish2023"},"content":"    private Forecast calculateForecast(String forecast) throws InvalidForecastException {"},{"lineNumber":27,"author":{"gitId":"wish2023"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"wish2023"},"content":"            return Forecast.valueOf(forecast.toUpperCase());"},{"lineNumber":29,"author":{"gitId":"wish2023"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":30,"author":{"gitId":"wish2023"},"content":"            throw new InvalidForecastException();"},{"lineNumber":31,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":34,"author":{"gitId":"wish2023"},"content":"    public Forecast getForecast() {"},{"lineNumber":35,"author":{"gitId":"wish2023"},"content":"        return forecast;"},{"lineNumber":36,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":38,"author":{"gitId":"wish2023"},"content":"    public Importance getImportance() {"},{"lineNumber":39,"author":{"gitId":"wish2023"},"content":"        return importance;"},{"lineNumber":40,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"wish2023"},"content":"}"}],"authorContributionMap":{"daniellimws":2,"wish2023":39}},{"path":"src/main/java/athena/task/taskfilter/FlexibleTimeFilter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Kafcis"},"content":"package athena.task.taskfilter;"},{"lineNumber":2,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":3,"author":{"gitId":"Kafcis"},"content":"import athena.task.Task;"},{"lineNumber":4,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":5,"author":{"gitId":"Kafcis"},"content":"public class FlexibleTimeFilter extends TaskFilter {"},{"lineNumber":6,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":7,"author":{"gitId":"wish2023"},"content":"    private Boolean doesIncludeFlexibleTask;"},{"lineNumber":8,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":9,"author":{"gitId":"wish2023"},"content":"    public FlexibleTimeFilter(Boolean doesIncludeFlexibleTask) {"},{"lineNumber":10,"author":{"gitId":"wish2023"},"content":"        this.doesIncludeFlexibleTask \u003d doesIncludeFlexibleTask;"},{"lineNumber":11,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":13,"author":{"gitId":"Kafcis"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Kafcis"},"content":"     * This is to check if the time for this task is flexible."},{"lineNumber":15,"author":{"gitId":"Kafcis"},"content":"     * need to modify this later to access checkFlexible"},{"lineNumber":16,"author":{"gitId":"Kafcis"},"content":"     * currently it only checks for an empty getDate of the task"},{"lineNumber":17,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"Kafcis"},"content":"     * @param task Task to check."},{"lineNumber":19,"author":{"gitId":"Kafcis"},"content":"     * @return boolean"},{"lineNumber":20,"author":{"gitId":"Kafcis"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Kafcis"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"Kafcis"},"content":"    public boolean isTaskIncluded(Task task) {"},{"lineNumber":23,"author":{"gitId":"Kafcis"},"content":"        return task.isFlexible() \u003d\u003d doesIncludeFlexibleTask;"},{"lineNumber":24,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":26,"author":{"gitId":"Kafcis"},"content":"}"},{"lineNumber":27,"author":{"gitId":"Kafcis"},"content":""}],"authorContributionMap":{"Kafcis":24,"wish2023":3}},{"path":"src/main/java/athena/task/taskfilter/ForecastFilter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wish2023"},"content":"package athena.task.taskfilter;"},{"lineNumber":2,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":3,"author":{"gitId":"wish2023"},"content":"import athena.Forecast;"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"import athena.common.utils.DateUtils;"},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"import athena.task.Task;"},{"lineNumber":6,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":7,"author":{"gitId":"wish2023"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"wish2023"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":10,"author":{"gitId":"wish2023"},"content":"public class ForecastFilter extends TaskFilter {"},{"lineNumber":11,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":12,"author":{"gitId":"daniellimws"},"content":"    private final Forecast forecast;"},{"lineNumber":13,"author":{"gitId":"Kafcis"},"content":"    private LocalDate filterDate \u003d LocalDate.now();"},{"lineNumber":14,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":15,"author":{"gitId":"wish2023"},"content":"    public ForecastFilter(Forecast forecast) {"},{"lineNumber":16,"author":{"gitId":"wish2023"},"content":"        this.forecast \u003d forecast;"},{"lineNumber":17,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":19,"author":{"gitId":"Kafcis"},"content":"    public void setDate(LocalDate filterDate) {"},{"lineNumber":20,"author":{"gitId":"Kafcis"},"content":"        this.filterDate \u003d filterDate;"},{"lineNumber":21,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":23,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"wish2023"},"content":"     * Checks whether to include a task based on its date."},{"lineNumber":25,"author":{"gitId":"wish2023"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"wish2023"},"content":"     * @param task Task to check."},{"lineNumber":27,"author":{"gitId":"wish2023"},"content":"     * @return Whether the task should be included."},{"lineNumber":28,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"wish2023"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"wish2023"},"content":"    public boolean isTaskIncluded(Task task) {"},{"lineNumber":31,"author":{"gitId":"wish2023"},"content":"        for (LocalDate date : task.getDates()) {"},{"lineNumber":32,"author":{"gitId":"daniellimws"},"content":"            if (DateUtils.isDateIncluded(date, forecast)) {"},{"lineNumber":33,"author":{"gitId":"wish2023"},"content":"                return true;"},{"lineNumber":34,"author":{"gitId":"wish2023"},"content":"            }"},{"lineNumber":35,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"wish2023"},"content":"        return false;"},{"lineNumber":37,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"wish2023"},"content":"}"}],"authorContributionMap":{"Kafcis":5,"daniellimws":4,"wish2023":29}},{"path":"src/main/java/athena/task/taskfilter/ImportanceFilter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.task.taskfilter;"},{"lineNumber":2,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.Importance;"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"import athena.task.Task;"},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":6,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":"public class ImportanceFilter extends TaskFilter {"},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":9,"author":{"gitId":"daniellimws"},"content":"    private final Importance importance;"},{"lineNumber":10,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":11,"author":{"gitId":"daniellimws"},"content":"    public ImportanceFilter(Importance importance) {"},{"lineNumber":12,"author":{"gitId":"daniellimws"},"content":"        this.importance \u003d importance;"},{"lineNumber":13,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":15,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"daniellimws"},"content":"     * Checks whether to include a task based on it\u0027s importance."},{"lineNumber":17,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"daniellimws"},"content":"     * @param task Task to check."},{"lineNumber":19,"author":{"gitId":"daniellimws"},"content":"     * @return Whether the task should be included."},{"lineNumber":20,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"daniellimws"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"daniellimws"},"content":"    public boolean isTaskIncluded(Task task) {"},{"lineNumber":23,"author":{"gitId":"wish2023"},"content":"        if (importance \u003d\u003d Importance.ALL) {"},{"lineNumber":24,"author":{"gitId":"daniellimws"},"content":"            return true;"},{"lineNumber":25,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"daniellimws"},"content":"        return task.getImportance() \u003d\u003d importance;"},{"lineNumber":27,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"daniellimws"},"content":"}"}],"authorContributionMap":{"daniellimws":25,"wish2023":3}},{"path":"src/main/java/athena/task/taskfilter/TaskFilter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.task.taskfilter;"},{"lineNumber":2,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.task.Task;"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":" * Contains information about how to filter a task."},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":" * This is used by athena.timetable.Timetable to filter out"},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":" * tasks based on the user\u0027s request."},{"lineNumber":9,"author":{"gitId":"daniellimws"},"content":" */"},{"lineNumber":10,"author":{"gitId":"daniellimws"},"content":"public abstract class TaskFilter {"},{"lineNumber":11,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"daniellimws"},"content":"     * Should be overridden by children classes to filter a task based on certain"},{"lineNumber":13,"author":{"gitId":"daniellimws"},"content":"     * criteria."},{"lineNumber":14,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"daniellimws"},"content":"     * @param task Task to check."},{"lineNumber":16,"author":{"gitId":"daniellimws"},"content":"     * @return Whether the task should be included."},{"lineNumber":17,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"daniellimws"},"content":"    public abstract boolean isTaskIncluded(Task task);"},{"lineNumber":19,"author":{"gitId":"daniellimws"},"content":"}"}],"authorContributionMap":{"daniellimws":19}},{"path":"src/main/java/athena/timetable/Timetable.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.timetable;"},{"lineNumber":2,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.Forecast;"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"import athena.Importance;"},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"import athena.TaskList;"},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":"import athena.common.utils.DateUtils;"},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":"import athena.task.Task;"},{"lineNumber":8,"author":{"gitId":"alstontham"},"content":"import athena.task.taskfilter.ForecastFilter;"},{"lineNumber":9,"author":{"gitId":"alstontham"},"content":"import athena.task.taskfilter.ImportanceFilter;"},{"lineNumber":10,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":11,"author":{"gitId":"daniellimws"},"content":"import java.time.LocalDate;"},{"lineNumber":12,"author":{"gitId":"daniellimws"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"daniellimws"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"daniellimws"},"content":"import java.util.TreeMap;"},{"lineNumber":15,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":16,"author":{"gitId":"daniellimws"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"daniellimws"},"content":" * Takes a TaskList to generate a timetable for the user."},{"lineNumber":18,"author":{"gitId":"daniellimws"},"content":" */"},{"lineNumber":19,"author":{"gitId":"daniellimws"},"content":"public class Timetable {"},{"lineNumber":20,"author":{"gitId":"daniellimws"},"content":"    public static final int ATHENA_WAKE_UP_HOUR \u003d 8;"},{"lineNumber":21,"author":{"gitId":"daniellimws"},"content":"    public static final int ATHENA_SLEEP_HOUR \u003d 24;"},{"lineNumber":22,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":23,"author":{"gitId":"daniellimws"},"content":"    private final TaskList taskList;"},{"lineNumber":24,"author":{"gitId":"daniellimws"},"content":"    private ArrayList\u003cTimetableDay\u003e timetableDays;"},{"lineNumber":25,"author":{"gitId":"daniellimws"},"content":"    private TreeMap\u003cLocalDate, TimetableDay\u003e timetableDayMap;"},{"lineNumber":26,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":27,"author":{"gitId":"daniellimws"},"content":"    private final Forecast forecast;"},{"lineNumber":28,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":29,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"alstontham"},"content":"     * Creates a timetable object from a TaskList object."},{"lineNumber":31,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"alstontham"},"content":"     * @param taskList Task list"},{"lineNumber":33,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"daniellimws"},"content":"    public Timetable(TaskList taskList) {"},{"lineNumber":35,"author":{"gitId":"daniellimws"},"content":"        this(taskList, Importance.ALL, Forecast.WEEK);"},{"lineNumber":36,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":38,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"alstontham"},"content":"     * Creates a timetable object from a TaskList, ImportanceFilter and ForecastFilter object."},{"lineNumber":40,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"alstontham"},"content":"     * @param taskList   Task list"},{"lineNumber":42,"author":{"gitId":"daniellimws"},"content":"     * @param importance To filter tasks of a certain importance"},{"lineNumber":43,"author":{"gitId":"daniellimws"},"content":"     * @param forecast   To filter tasks based on given forecast"},{"lineNumber":44,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"daniellimws"},"content":"    public Timetable(TaskList taskList, Importance importance, Forecast forecast) {"},{"lineNumber":46,"author":{"gitId":"daniellimws"},"content":"        assert taskList !\u003d null;"},{"lineNumber":47,"author":{"gitId":"daniellimws"},"content":"        this.taskList \u003d taskList.getFilteredList(new ImportanceFilter(importance))"},{"lineNumber":48,"author":{"gitId":"daniellimws"},"content":"                .getFilteredList(new ForecastFilter(forecast));"},{"lineNumber":49,"author":{"gitId":"daniellimws"},"content":"        this.forecast \u003d forecast;"},{"lineNumber":50,"author":{"gitId":"daniellimws"},"content":"        populateTimetable();"},{"lineNumber":51,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":53,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"daniellimws"},"content":"     * Getter for timetableDays."},{"lineNumber":55,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"daniellimws"},"content":"     * @return timetableDays."},{"lineNumber":57,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"daniellimws"},"content":"    public ArrayList\u003cTimetableDay\u003e getTimetableDays() {"},{"lineNumber":59,"author":{"gitId":"daniellimws"},"content":"        return timetableDays;"},{"lineNumber":60,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":62,"author":{"gitId":"daniellimws"},"content":"    public TreeMap\u003cLocalDate, TimetableDay\u003e getTimetableDayMap() {"},{"lineNumber":63,"author":{"gitId":"daniellimws"},"content":"        return timetableDayMap;"},{"lineNumber":64,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":66,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"daniellimws"},"content":"     * Populates the timetable, represented by a list of TimetableDays with the information from the task list."},{"lineNumber":68,"author":{"gitId":"daniellimws"},"content":"     * For this version, we only populate the timetable with the tasks for this week (starting from Monday)."},{"lineNumber":69,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"daniellimws"},"content":"    private void populateTimetable() {"},{"lineNumber":71,"author":{"gitId":"daniellimws"},"content":"        this.timetableDays \u003d new ArrayList\u003c\u003e();"},{"lineNumber":72,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":73,"author":{"gitId":"daniellimws"},"content":"        timetableDayMap \u003d new TreeMap\u003c\u003e();"},{"lineNumber":74,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":75,"author":{"gitId":"daniellimws"},"content":"        for (Task task : taskList.getTasks()) {"},{"lineNumber":76,"author":{"gitId":"wish2023"},"content":"            ArrayList\u003cLocalDate\u003e dates \u003d task.getDates();"},{"lineNumber":77,"author":{"gitId":"wish2023"},"content":"            for (LocalDate date : dates) {"},{"lineNumber":78,"author":{"gitId":"daniellimws"},"content":"                assert date !\u003d null;"},{"lineNumber":79,"author":{"gitId":"daniellimws"},"content":"                if (!DateUtils.isDateIncluded(date, forecast)) {"},{"lineNumber":80,"author":{"gitId":"daniellimws"},"content":"                    continue;"},{"lineNumber":81,"author":{"gitId":"daniellimws"},"content":"                }"},{"lineNumber":82,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":83,"author":{"gitId":"daniellimws"},"content":"                TimetableDay timetableDay;"},{"lineNumber":84,"author":{"gitId":"daniellimws"},"content":"                if (timetableDayMap.containsKey(date)) {"},{"lineNumber":85,"author":{"gitId":"daniellimws"},"content":"                    timetableDay \u003d timetableDayMap.get(date);"},{"lineNumber":86,"author":{"gitId":"daniellimws"},"content":"                } else {"},{"lineNumber":87,"author":{"gitId":"daniellimws"},"content":"                    timetableDay \u003d new TimetableDay(date);"},{"lineNumber":88,"author":{"gitId":"daniellimws"},"content":"                    timetableDayMap.put(date, timetableDay);"},{"lineNumber":89,"author":{"gitId":"daniellimws"},"content":"                }"},{"lineNumber":90,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":91,"author":{"gitId":"daniellimws"},"content":"                timetableDay.addTask(task);"},{"lineNumber":92,"author":{"gitId":"daniellimws"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":95,"author":{"gitId":"daniellimws"},"content":"        for (LocalDate key : timetableDayMap.keySet()) {"},{"lineNumber":96,"author":{"gitId":"daniellimws"},"content":"            timetableDays.add(timetableDayMap.get(key));"},{"lineNumber":97,"author":{"gitId":"daniellimws"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":100,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"daniellimws"},"content":"     * Generates a string containing the user\u0027s tasks, separated by their date of occurrence,"},{"lineNumber":102,"author":{"gitId":"daniellimws"},"content":"     * according to the list of dates given."},{"lineNumber":103,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"daniellimws"},"content":"     * @param dates Dates to include in the output."},{"lineNumber":105,"author":{"gitId":"daniellimws"},"content":"     * @return A list of tasks separated by date."},{"lineNumber":106,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"daniellimws"},"content":"    private String getTaskListForDates(ArrayList\u003cLocalDate\u003e dates) {"},{"lineNumber":108,"author":{"gitId":"daniellimws"},"content":"        StringBuilder list \u003d new StringBuilder(\"Your task list: \\n\");"},{"lineNumber":109,"author":{"gitId":"daniellimws"},"content":"        for (LocalDate date : dates) {"},{"lineNumber":110,"author":{"gitId":"daniellimws"},"content":"            if (timetableDayMap.containsKey(date)) {"},{"lineNumber":111,"author":{"gitId":"daniellimws"},"content":"                list.append(timetableDayMap.get(date));"},{"lineNumber":112,"author":{"gitId":"daniellimws"},"content":"                list.append(\"\\n\");"},{"lineNumber":113,"author":{"gitId":"daniellimws"},"content":"            }"},{"lineNumber":114,"author":{"gitId":"daniellimws"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"daniellimws"},"content":"        return list.toString().trim();"},{"lineNumber":116,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":118,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"daniellimws"},"content":"     * Generates a string to show the user the timetable and list of tasks."},{"lineNumber":120,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":121,"author":{"gitId":"daniellimws"},"content":"     * @return A string representing the timetable and list of tasks."},{"lineNumber":122,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"daniellimws"},"content":"    @Override"},{"lineNumber":124,"author":{"gitId":"daniellimws"},"content":"    public String toString() {"},{"lineNumber":125,"author":{"gitId":"daniellimws"},"content":"        String output;"},{"lineNumber":126,"author":{"gitId":"daniellimws"},"content":"        if (forecast !\u003d Forecast.ALL) {"},{"lineNumber":127,"author":{"gitId":"daniellimws"},"content":"            ArrayList\u003cLocalDate\u003e dates \u003d DateUtils.getDatesBasedOnForecast(forecast);"},{"lineNumber":128,"author":{"gitId":"daniellimws"},"content":"            TimetableDrawer timetableDrawer \u003d new TimetableDrawer(this);"},{"lineNumber":129,"author":{"gitId":"daniellimws"},"content":"            String timetableString \u003d timetableDrawer.drawTimetable(dates, ATHENA_WAKE_UP_HOUR, ATHENA_SLEEP_HOUR);"},{"lineNumber":130,"author":{"gitId":"daniellimws"},"content":"            String taskListString \u003d getTaskListForDates(dates);"},{"lineNumber":131,"author":{"gitId":"daniellimws"},"content":"            output \u003d timetableString + taskListString;"},{"lineNumber":132,"author":{"gitId":"daniellimws"},"content":"        } else {"},{"lineNumber":133,"author":{"gitId":"daniellimws"},"content":"            LocalDate[] datesArray \u003d timetableDayMap.keySet().toArray(new LocalDate[0]);"},{"lineNumber":134,"author":{"gitId":"daniellimws"},"content":"            ArrayList\u003cLocalDate\u003e datesList \u003d new ArrayList\u003c\u003e(Arrays.asList(datesArray));"},{"lineNumber":135,"author":{"gitId":"daniellimws"},"content":"            output \u003d getTaskListForDates(datesList);"},{"lineNumber":136,"author":{"gitId":"daniellimws"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":138,"author":{"gitId":"daniellimws"},"content":"        return output.trim() + \"\\n\";"},{"lineNumber":139,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"daniellimws"},"content":"}"}],"authorContributionMap":{"alstontham":10,"daniellimws":127,"wish2023":3}},{"path":"src/main/java/athena/timetable/TimetableDay.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.timetable;"},{"lineNumber":2,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.TaskList;"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"import athena.task.Task;"},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":9,"author":{"gitId":"daniellimws"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"daniellimws"},"content":" * Represents a day in the timetable."},{"lineNumber":11,"author":{"gitId":"daniellimws"},"content":" * Contains the date and the list of tasks, which is a subset of all the tasks"},{"lineNumber":12,"author":{"gitId":"daniellimws"},"content":" * that the user registered into the program."},{"lineNumber":13,"author":{"gitId":"daniellimws"},"content":" */"},{"lineNumber":14,"author":{"gitId":"daniellimws"},"content":"public class TimetableDay {"},{"lineNumber":15,"author":{"gitId":"daniellimws"},"content":"    private final LocalDate date;"},{"lineNumber":16,"author":{"gitId":"daniellimws"},"content":"    private final TaskList taskList;"},{"lineNumber":17,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":18,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"daniellimws"},"content":"     * Initializes the object with the date and an empty task list."},{"lineNumber":20,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"daniellimws"},"content":"     * @param date Date represented by this object."},{"lineNumber":22,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"daniellimws"},"content":"    public TimetableDay(LocalDate date) {"},{"lineNumber":24,"author":{"gitId":"daniellimws"},"content":"        assert date !\u003d null;"},{"lineNumber":25,"author":{"gitId":"daniellimws"},"content":"        this.date \u003d date;"},{"lineNumber":26,"author":{"gitId":"daniellimws"},"content":"        this.taskList \u003d new TaskList();"},{"lineNumber":27,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":29,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"daniellimws"},"content":"     * Getter for date."},{"lineNumber":31,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"daniellimws"},"content":"     * @return date."},{"lineNumber":33,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"daniellimws"},"content":"    public LocalDate getDate() {"},{"lineNumber":35,"author":{"gitId":"daniellimws"},"content":"        return date;"},{"lineNumber":36,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":38,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"daniellimws"},"content":"     * Getter for taskList."},{"lineNumber":40,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"daniellimws"},"content":"     * @return taskList."},{"lineNumber":42,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"daniellimws"},"content":"    public TaskList getTaskList() {"},{"lineNumber":44,"author":{"gitId":"daniellimws"},"content":"        return taskList;"},{"lineNumber":45,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":47,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"daniellimws"},"content":"     * Adds a task to the list."},{"lineNumber":49,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"daniellimws"},"content":"     * @param task Task to be added."},{"lineNumber":51,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"daniellimws"},"content":"    public void addTask(Task task) {"},{"lineNumber":53,"author":{"gitId":"daniellimws"},"content":"        taskList.addTask(task);"},{"lineNumber":54,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":56,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"daniellimws"},"content":"     * Generates a string containing the date and list of tasks that is to"},{"lineNumber":58,"author":{"gitId":"daniellimws"},"content":"     * be printed to the user."},{"lineNumber":59,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"daniellimws"},"content":"     * @return A string containing the date and list of tasks."},{"lineNumber":61,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"daniellimws"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"daniellimws"},"content":"    public String toString() {"},{"lineNumber":64,"author":{"gitId":"daniellimws"},"content":"        StringBuilder message \u003d new StringBuilder(date.toString() + \":\\n\");"},{"lineNumber":65,"author":{"gitId":"daniellimws"},"content":"        if (taskList.getTasks().isEmpty()) {"},{"lineNumber":66,"author":{"gitId":"daniellimws"},"content":"            message.append(\"Got no tasks for this day\\n\");"},{"lineNumber":67,"author":{"gitId":"daniellimws"},"content":"        } else {"},{"lineNumber":68,"author":{"gitId":"daniellimws"},"content":"            for (Task task : taskList.getTasks()) {"},{"lineNumber":69,"author":{"gitId":"daniellimws"},"content":"                message.append(task).append(\"\\n\");"},{"lineNumber":70,"author":{"gitId":"daniellimws"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"daniellimws"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"daniellimws"},"content":"        return message.toString();"},{"lineNumber":73,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":75,"author":{"gitId":"daniellimws"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"daniellimws"},"content":"    public boolean equals(Object o) {"},{"lineNumber":77,"author":{"gitId":"daniellimws"},"content":"        if (this \u003d\u003d o) {"},{"lineNumber":78,"author":{"gitId":"daniellimws"},"content":"            return true;"},{"lineNumber":79,"author":{"gitId":"daniellimws"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"daniellimws"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"},{"lineNumber":81,"author":{"gitId":"daniellimws"},"content":"            return false;"},{"lineNumber":82,"author":{"gitId":"daniellimws"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"daniellimws"},"content":"        TimetableDay that \u003d (TimetableDay) o;"},{"lineNumber":84,"author":{"gitId":"daniellimws"},"content":"        return Objects.equals(date, that.date)"},{"lineNumber":85,"author":{"gitId":"daniellimws"},"content":"                \u0026\u0026 Objects.equals(taskList, that.taskList);"},{"lineNumber":86,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":88,"author":{"gitId":"daniellimws"},"content":"    @Override"},{"lineNumber":89,"author":{"gitId":"daniellimws"},"content":"    public int hashCode() {"},{"lineNumber":90,"author":{"gitId":"daniellimws"},"content":"        return Objects.hash(date, taskList);"},{"lineNumber":91,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"daniellimws"},"content":"}"}],"authorContributionMap":{"daniellimws":92}},{"path":"src/main/java/athena/timetable/TimetableDrawer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.timetable;"},{"lineNumber":2,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.TaskList;"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"import athena.task.Task;"},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":"import java.util.TreeMap;"},{"lineNumber":9,"author":{"gitId":"daniellimws"},"content":"import java.util.function.Function;"},{"lineNumber":10,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":11,"author":{"gitId":"daniellimws"},"content":"public class TimetableDrawer {"},{"lineNumber":12,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":13,"author":{"gitId":"daniellimws"},"content":"    public static final String DAY_BOX_HORIZONTAL_BORDER \u003d \"-------\";"},{"lineNumber":14,"author":{"gitId":"daniellimws"},"content":"    public static final String BOX_CORNER \u003d \"+\";"},{"lineNumber":15,"author":{"gitId":"daniellimws"},"content":"    public static final String TIME_HEADER_HORIZONTAL_BORDER \u003d \"---------\";"},{"lineNumber":16,"author":{"gitId":"daniellimws"},"content":"    public static final String TASK_BOX_HORIZONTAL_BORDER \u003d TIME_HEADER_HORIZONTAL_BORDER + \"-\";"},{"lineNumber":17,"author":{"gitId":"daniellimws"},"content":"    public static final String DATE_BOX \u003d \"| %02d/%02d |\";"},{"lineNumber":18,"author":{"gitId":"daniellimws"},"content":"    public static final String TASK_NUMBER_LABEL \u003d \"[%d]\";"},{"lineNumber":19,"author":{"gitId":"daniellimws"},"content":"    public static final String DAY_BOX \u003d \"|  %s  |\";"},{"lineNumber":20,"author":{"gitId":"daniellimws"},"content":"    public static final String EMPTY_TASK_BOX \u003d \"          |\";"},{"lineNumber":21,"author":{"gitId":"daniellimws"},"content":"    public static final String TASK_BOX \u003d \" %s|\";"},{"lineNumber":22,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":23,"author":{"gitId":"daniellimws"},"content":"    private final TreeMap\u003cLocalDate, TimetableDay\u003e timetableDayMap;"},{"lineNumber":24,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":25,"author":{"gitId":"daniellimws"},"content":"    public TimetableDrawer(Timetable timetable) {"},{"lineNumber":26,"author":{"gitId":"daniellimws"},"content":"        this.timetableDayMap \u003d timetable.getTimetableDayMap();"},{"lineNumber":27,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":29,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"daniellimws"},"content":"     * Generates the timetable header containing hour marks."},{"lineNumber":31,"author":{"gitId":"daniellimws"},"content":"     * For example, +------08------09------10------11------+"},{"lineNumber":32,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"daniellimws"},"content":"     * @param startHour The starting hour in 24-hour representation."},{"lineNumber":34,"author":{"gitId":"daniellimws"},"content":"     * @param endHour   The ending hour in 24-hour representation."},{"lineNumber":35,"author":{"gitId":"daniellimws"},"content":"     * @return A string containing the timetable header with hour marks."},{"lineNumber":36,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"daniellimws"},"content":"    private String drawTimetableTimeHeader(int startHour, int endHour) {"},{"lineNumber":38,"author":{"gitId":"daniellimws"},"content":"        StringBuilder header \u003d new StringBuilder();"},{"lineNumber":39,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":40,"author":{"gitId":"daniellimws"},"content":"        header.append(BOX_CORNER + DAY_BOX_HORIZONTAL_BORDER);"},{"lineNumber":41,"author":{"gitId":"daniellimws"},"content":"        for (int hour \u003d startHour; hour \u003c endHour; hour++) {"},{"lineNumber":42,"author":{"gitId":"daniellimws"},"content":"            String paddedHourString \u003d String.format(\"%02d\", hour);"},{"lineNumber":43,"author":{"gitId":"daniellimws"},"content":"            header.append(paddedHourString).append(TIME_HEADER_HORIZONTAL_BORDER);"},{"lineNumber":44,"author":{"gitId":"daniellimws"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"daniellimws"},"content":"        header.append(BOX_CORNER + \"\\n\");"},{"lineNumber":46,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":47,"author":{"gitId":"daniellimws"},"content":"        return header.toString();"},{"lineNumber":48,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":50,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"daniellimws"},"content":"     * Generates the bottom border for a day in the timetable."},{"lineNumber":52,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"daniellimws"},"content":"     * @param startHour The starting hour in 24-hour representation."},{"lineNumber":54,"author":{"gitId":"daniellimws"},"content":"     * @param endHour   The ending hour in 24-hour representation."},{"lineNumber":55,"author":{"gitId":"daniellimws"},"content":"     * @return A string that represents the bottom border for a day in the timetable."},{"lineNumber":56,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"daniellimws"},"content":"    private String drawBottomBorder(int startHour, int endHour) {"},{"lineNumber":58,"author":{"gitId":"daniellimws"},"content":"        StringBuilder row \u003d new StringBuilder();"},{"lineNumber":59,"author":{"gitId":"daniellimws"},"content":"        row.append(BOX_CORNER + DAY_BOX_HORIZONTAL_BORDER + BOX_CORNER);"},{"lineNumber":60,"author":{"gitId":"daniellimws"},"content":"        for (int i \u003d startHour; i \u003c endHour; i++) {"},{"lineNumber":61,"author":{"gitId":"daniellimws"},"content":"            row.append(TASK_BOX_HORIZONTAL_BORDER + BOX_CORNER);"},{"lineNumber":62,"author":{"gitId":"daniellimws"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"daniellimws"},"content":"        row.append(\"\\n\");"},{"lineNumber":64,"author":{"gitId":"daniellimws"},"content":"        return row.toString();"},{"lineNumber":65,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":67,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"daniellimws"},"content":"     * Utility method to fit a string into a given length."},{"lineNumber":69,"author":{"gitId":"daniellimws"},"content":"     * If the string is shorter than desired, pad it with spaces."},{"lineNumber":70,"author":{"gitId":"daniellimws"},"content":"     * If the string is longer than desired, truncate it and replace the end with \"..\"."},{"lineNumber":71,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"daniellimws"},"content":"     * @param string The string to fit."},{"lineNumber":73,"author":{"gitId":"daniellimws"},"content":"     * @param maxLen The desired length."},{"lineNumber":74,"author":{"gitId":"daniellimws"},"content":"     * @return The string that is modified to fit into a given length."},{"lineNumber":75,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"daniellimws"},"content":"    private String shortenOrPadString(String string, int maxLen) {"},{"lineNumber":77,"author":{"gitId":"daniellimws"},"content":"        if (string.length() \u003d\u003d maxLen) {"},{"lineNumber":78,"author":{"gitId":"daniellimws"},"content":"            return string;"},{"lineNumber":79,"author":{"gitId":"daniellimws"},"content":"        } else if (string.length() \u003c maxLen) {"},{"lineNumber":80,"author":{"gitId":"daniellimws"},"content":"            return String.format(\"%\" + -maxLen + \"s\", string);"},{"lineNumber":81,"author":{"gitId":"daniellimws"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"daniellimws"},"content":"        return String.format(\"%s..\", string.substring(0, maxLen - 2));"},{"lineNumber":83,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":85,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"daniellimws"},"content":"     * Finds a task in a task list that starts at the given hour."},{"lineNumber":87,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"daniellimws"},"content":"     * @param taskList Task list to search through."},{"lineNumber":89,"author":{"gitId":"daniellimws"},"content":"     * @param hour     Starting time of the task."},{"lineNumber":90,"author":{"gitId":"daniellimws"},"content":"     * @return The task that starts at the given hour. Null if doesn\u0027t exist."},{"lineNumber":91,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"daniellimws"},"content":"    private Task findTaskAtHour(TaskList taskList, int hour) {"},{"lineNumber":93,"author":{"gitId":"daniellimws"},"content":"        for (Task task : taskList.getTasks()) {"},{"lineNumber":94,"author":{"gitId":"daniellimws"},"content":"            try {"},{"lineNumber":95,"author":{"gitId":"daniellimws"},"content":"                int taskHour \u003d task.getTimeInfo().getStartTime().getHour();"},{"lineNumber":96,"author":{"gitId":"daniellimws"},"content":"                if (taskHour \u003d\u003d hour) {"},{"lineNumber":97,"author":{"gitId":"daniellimws"},"content":"                    return task;"},{"lineNumber":98,"author":{"gitId":"daniellimws"},"content":"                }"},{"lineNumber":99,"author":{"gitId":"daniellimws"},"content":"            } catch (NullPointerException e) {"},{"lineNumber":100,"author":{"gitId":"daniellimws"},"content":"                //do nothing"},{"lineNumber":101,"author":{"gitId":"daniellimws"},"content":"            }"},{"lineNumber":102,"author":{"gitId":"daniellimws"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"daniellimws"},"content":"        return null;"},{"lineNumber":104,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":106,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"daniellimws"},"content":"     * Generates a row for a day in the timetable containing the task information desired."},{"lineNumber":108,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"daniellimws"},"content":"     * @param day            The TimetableDay object for this day."},{"lineNumber":110,"author":{"gitId":"daniellimws"},"content":"     * @param startHour      The starting hour in 24-hour representation."},{"lineNumber":111,"author":{"gitId":"daniellimws"},"content":"     * @param endHour        The ending hour in 24-hour representation."},{"lineNumber":112,"author":{"gitId":"daniellimws"},"content":"     * @param taskInfoWriter A Function that extracts the information desired from a task."},{"lineNumber":113,"author":{"gitId":"daniellimws"},"content":"     * @return A string containing the task information desired."},{"lineNumber":114,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"daniellimws"},"content":"    private String drawTimetableDayRow(TimetableDay day, int startHour, int endHour,"},{"lineNumber":116,"author":{"gitId":"daniellimws"},"content":"                                       Function\u003cTask, String\u003e taskInfoWriter) {"},{"lineNumber":117,"author":{"gitId":"daniellimws"},"content":"        StringBuilder row \u003d new StringBuilder();"},{"lineNumber":118,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":119,"author":{"gitId":"daniellimws"},"content":"        for (int hour \u003d startHour; hour \u003c endHour; hour++) {"},{"lineNumber":120,"author":{"gitId":"daniellimws"},"content":"            Task task \u003d findTaskAtHour(day.getTaskList(), hour);"},{"lineNumber":121,"author":{"gitId":"daniellimws"},"content":"            if (task \u003d\u003d null) {"},{"lineNumber":122,"author":{"gitId":"daniellimws"},"content":"                row.append(EMPTY_TASK_BOX);"},{"lineNumber":123,"author":{"gitId":"daniellimws"},"content":"                continue;"},{"lineNumber":124,"author":{"gitId":"daniellimws"},"content":"            }"},{"lineNumber":125,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":126,"author":{"gitId":"daniellimws"},"content":"            int duration \u003d task.getTimeInfo().getDuration();"},{"lineNumber":127,"author":{"gitId":"daniellimws"},"content":"            duration \u003d Math.min(duration, endHour - hour);"},{"lineNumber":128,"author":{"gitId":"daniellimws"},"content":"            hour +\u003d duration - 1;"},{"lineNumber":129,"author":{"gitId":"daniellimws"},"content":"            int boxWidth \u003d duration * (TASK_BOX_HORIZONTAL_BORDER + BOX_CORNER).length() - 2;"},{"lineNumber":130,"author":{"gitId":"daniellimws"},"content":"            row.append(String.format(TASK_BOX, shortenOrPadString(taskInfoWriter.apply(task), boxWidth)));"},{"lineNumber":131,"author":{"gitId":"daniellimws"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":133,"author":{"gitId":"daniellimws"},"content":"        return row.toString();"},{"lineNumber":134,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":136,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"daniellimws"},"content":"     * Generates the first row for a day in the timetable, which contains the name of the day and the task names."},{"lineNumber":138,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":139,"author":{"gitId":"daniellimws"},"content":"     * @param day       The TimetableDay object for this day."},{"lineNumber":140,"author":{"gitId":"daniellimws"},"content":"     * @param startHour The starting hour in 24-hour representation."},{"lineNumber":141,"author":{"gitId":"daniellimws"},"content":"     * @param endHour   The ending hour in 24-hour representation."},{"lineNumber":142,"author":{"gitId":"daniellimws"},"content":"     * @return A string containing name of the day and the task names."},{"lineNumber":143,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"daniellimws"},"content":"    private String drawTimetableDayFirstRow(TimetableDay day, int startHour, int endHour) {"},{"lineNumber":145,"author":{"gitId":"daniellimws"},"content":"        String dayShortName \u003d day.getDate().getDayOfWeek().toString().substring(0, 3).toUpperCase();"},{"lineNumber":146,"author":{"gitId":"daniellimws"},"content":"        String row \u003d String.format(DAY_BOX, dayShortName);"},{"lineNumber":147,"author":{"gitId":"daniellimws"},"content":"        row +\u003d drawTimetableDayRow(day, startHour, endHour, Task::getName);"},{"lineNumber":148,"author":{"gitId":"daniellimws"},"content":"        row +\u003d \"\\n\";"},{"lineNumber":149,"author":{"gitId":"daniellimws"},"content":"        return row;"},{"lineNumber":150,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":152,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"daniellimws"},"content":"     * Generates the second row for a day in the timetable, which contains the date of the day and the task numbers."},{"lineNumber":154,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":155,"author":{"gitId":"daniellimws"},"content":"     * @param day       The TimetableDay object for this day."},{"lineNumber":156,"author":{"gitId":"daniellimws"},"content":"     * @param startHour The starting hour in 24-hour representation."},{"lineNumber":157,"author":{"gitId":"daniellimws"},"content":"     * @param endHour   The ending hour in 24-hour representation."},{"lineNumber":158,"author":{"gitId":"daniellimws"},"content":"     * @return A string containing date of the day and the task numbers."},{"lineNumber":159,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"daniellimws"},"content":"    private String drawTimetableDaySecondRow(TimetableDay day, int startHour, int endHour) {"},{"lineNumber":161,"author":{"gitId":"daniellimws"},"content":"        LocalDate date \u003d day.getDate();"},{"lineNumber":162,"author":{"gitId":"daniellimws"},"content":"        String row \u003d String.format(DATE_BOX, date.getDayOfMonth(), date.getMonthValue());"},{"lineNumber":163,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":164,"author":{"gitId":"daniellimws"},"content":"        row +\u003d drawTimetableDayRow(day, startHour, endHour, task -\u003e String.format(TASK_NUMBER_LABEL, task.getNumber()));"},{"lineNumber":165,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":166,"author":{"gitId":"daniellimws"},"content":"        row +\u003d \"\\n\";"},{"lineNumber":167,"author":{"gitId":"daniellimws"},"content":"        return row;"},{"lineNumber":168,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":170,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"daniellimws"},"content":"     * Generates the row representing a day in the timetable."},{"lineNumber":172,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":173,"author":{"gitId":"daniellimws"},"content":"     * @param day       The TimetableDay object for this day."},{"lineNumber":174,"author":{"gitId":"daniellimws"},"content":"     * @param startHour The starting hour in 24-hour representation."},{"lineNumber":175,"author":{"gitId":"daniellimws"},"content":"     * @param endHour   The ending hour in 24-hour representation."},{"lineNumber":176,"author":{"gitId":"daniellimws"},"content":"     * @return A string containing information about a day in the timetable."},{"lineNumber":177,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":178,"author":{"gitId":"daniellimws"},"content":"    private String drawTimetableDay(TimetableDay day, int startHour, int endHour) {"},{"lineNumber":179,"author":{"gitId":"daniellimws"},"content":"        String row \u003d \"\";"},{"lineNumber":180,"author":{"gitId":"daniellimws"},"content":"        row +\u003d drawTimetableDayFirstRow(day, startHour, endHour);"},{"lineNumber":181,"author":{"gitId":"daniellimws"},"content":"        row +\u003d drawTimetableDaySecondRow(day, startHour, endHour);"},{"lineNumber":182,"author":{"gitId":"daniellimws"},"content":"        row +\u003d drawBottomBorder(startHour, endHour);"},{"lineNumber":183,"author":{"gitId":"daniellimws"},"content":"        return row;"},{"lineNumber":184,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":186,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":187,"author":{"gitId":"daniellimws"},"content":"     * Draws the timetable."},{"lineNumber":188,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":189,"author":{"gitId":"daniellimws"},"content":"     * @param dates      Dates to include in the timetable."},{"lineNumber":190,"author":{"gitId":"daniellimws"},"content":"     * @param wakeUpHour Starting hour of the timetable."},{"lineNumber":191,"author":{"gitId":"daniellimws"},"content":"     * @param sleepHour  Ending hour of the timetable."},{"lineNumber":192,"author":{"gitId":"daniellimws"},"content":"     * @return String representation of the timetable."},{"lineNumber":193,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":194,"author":{"gitId":"daniellimws"},"content":"    public String drawTimetable(ArrayList\u003cLocalDate\u003e dates, int wakeUpHour, int sleepHour) {"},{"lineNumber":195,"author":{"gitId":"daniellimws"},"content":"        StringBuilder result \u003d new StringBuilder(drawTimetableTimeHeader(wakeUpHour, sleepHour));"},{"lineNumber":196,"author":{"gitId":"daniellimws"},"content":"        for (LocalDate date : dates) {"},{"lineNumber":197,"author":{"gitId":"daniellimws"},"content":"            if (timetableDayMap.containsKey(date)) {"},{"lineNumber":198,"author":{"gitId":"daniellimws"},"content":"                result.append(drawTimetableDay(timetableDayMap.get(date), wakeUpHour, sleepHour));"},{"lineNumber":199,"author":{"gitId":"daniellimws"},"content":"            } else {"},{"lineNumber":200,"author":{"gitId":"daniellimws"},"content":"                result.append(drawTimetableDay(new TimetableDay(date), wakeUpHour, sleepHour));"},{"lineNumber":201,"author":{"gitId":"daniellimws"},"content":"            }"},{"lineNumber":202,"author":{"gitId":"daniellimws"},"content":"        }"},{"lineNumber":203,"author":{"gitId":"daniellimws"},"content":"        return result.toString();"},{"lineNumber":204,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"daniellimws"},"content":"}"}],"authorContributionMap":{"daniellimws":205}},{"path":"src/main/java/athena/ui/AthenaUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"alstontham"},"content":"package athena.ui;"},{"lineNumber":2,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":3,"author":{"gitId":"alstontham"},"content":"import athena.task.Task;"},{"lineNumber":4,"author":{"gitId":"Kafcis"},"content":"import athena.task.TimeData;"},{"lineNumber":5,"author":{"gitId":"alstontham"},"content":"import athena.timetable.Timetable;"},{"lineNumber":6,"author":{"gitId":"alstontham"},"content":"import org.fusesource.jansi.AnsiConsole;"},{"lineNumber":7,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":8,"author":{"gitId":"alstontham"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":10,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"alstontham"},"content":" * Represents all of the text that the user sees on the command line."},{"lineNumber":12,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":13,"author":{"gitId":"alstontham"},"content":"public class AthenaUi implements Ui {"},{"lineNumber":14,"author":{"gitId":"alstontham"},"content":"    private ColorText colorText;"},{"lineNumber":15,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":16,"author":{"gitId":"alstontham"},"content":"    public AthenaUi() {"},{"lineNumber":17,"author":{"gitId":"alstontham"},"content":"        AnsiConsole.systemInstall();"},{"lineNumber":18,"author":{"gitId":"alstontham"},"content":"        colorText \u003d new ColorText();"},{"lineNumber":19,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":21,"author":{"gitId":"alstontham"},"content":"    public void printAthenaLogo() {"},{"lineNumber":22,"author":{"gitId":"alstontham"},"content":"        printAthenaVoice(\"     ___   .__________.  __    __   _______  .__   __.      ___      \\n\""},{"lineNumber":23,"author":{"gitId":"alstontham"},"content":"                + \"    /   \\\\  |          | |  |  |  | |   ____| |  \\\\ |  |     /   \\\\     \\n\""},{"lineNumber":24,"author":{"gitId":"alstontham"},"content":"                + \"   /  ^  \\\\ `---|  |---` |  |__|  | |  |__    |   \\\\|  |    /  ^  \\\\    \\n\""},{"lineNumber":25,"author":{"gitId":"alstontham"},"content":"                + \"  /  /_\\\\  \\\\    |  |     |   __   | |   __|   |  . `  |   /  /_\\\\  \\\\   \\n\""},{"lineNumber":26,"author":{"gitId":"alstontham"},"content":"                + \" /  _____  \\\\   |  |     |  |  |  | |  |____  |  |\\\\   |  /  _____  \\\\  \\n\""},{"lineNumber":27,"author":{"gitId":"alstontham"},"content":"                + \"/__/     \\\\__\\\\  |__|     |__|  |__| |_______| |__| \\\\__| /__/     \\\\__\\\\\");"},{"lineNumber":28,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":30,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"alstontham"},"content":"     * Inserts an arrow before user input, making it easier for users to distinguish their input."},{"lineNumber":32,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"alstontham"},"content":"    public void printUserInputIndicator() {"},{"lineNumber":34,"author":{"gitId":"alstontham"},"content":"        printPurple(\"-\u003e \");"},{"lineNumber":35,"author":{"gitId":"alstontham"},"content":"        System.out.flush();"},{"lineNumber":36,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":38,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"alstontham"},"content":"     * Transfers user input to a string and trims extra whitespace."},{"lineNumber":40,"author":{"gitId":"alstontham"},"content":"     * @param userInput User input detected by the Scanner object"},{"lineNumber":41,"author":{"gitId":"alstontham"},"content":"     * @return The user\u0027s input as a string"},{"lineNumber":42,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"alstontham"},"content":"    public String detectInput(Scanner userInput) {"},{"lineNumber":44,"author":{"gitId":"alstontham"},"content":"        String inputString \u003d userInput.nextLine();"},{"lineNumber":45,"author":{"gitId":"alstontham"},"content":"        return inputString.trim();"},{"lineNumber":46,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":48,"author":{"gitId":"alstontham"},"content":"    public void printNewline() {"},{"lineNumber":49,"author":{"gitId":"alstontham"},"content":"        System.out.print(\"\\n\");"},{"lineNumber":50,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":52,"author":{"gitId":"alstontham"},"content":"    public void printError(String inputString) {"},{"lineNumber":53,"author":{"gitId":"alstontham"},"content":"        System.out.println(colorText.toRed(inputString));"},{"lineNumber":54,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":56,"author":{"gitId":"alstontham"},"content":"    public void printHighlight(String inputString) {"},{"lineNumber":57,"author":{"gitId":"alstontham"},"content":"        System.out.println(colorText.toYellow(inputString));"},{"lineNumber":58,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":60,"author":{"gitId":"alstontham"},"content":"    public void printNormal(String inputString) {"},{"lineNumber":61,"author":{"gitId":"alstontham"},"content":"        System.out.print(inputString);"},{"lineNumber":62,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":64,"author":{"gitId":"alstontham"},"content":"    public void printNormalNextLine(String inputString) {"},{"lineNumber":65,"author":{"gitId":"alstontham"},"content":"        System.out.println(inputString);"},{"lineNumber":66,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":68,"author":{"gitId":"alstontham"},"content":"    public void printPurple(String inputString) {"},{"lineNumber":69,"author":{"gitId":"alstontham"},"content":"        System.out.print(colorText.toPurple(inputString));"},{"lineNumber":70,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":72,"author":{"gitId":"alstontham"},"content":"    public void printAthenaVoice(String inputString) {"},{"lineNumber":73,"author":{"gitId":"alstontham"},"content":"        System.out.println(colorText.toPurple(inputString));"},{"lineNumber":74,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":76,"author":{"gitId":"alstontham"},"content":"    public void printBold(String inputString) {"},{"lineNumber":77,"author":{"gitId":"alstontham"},"content":"        System.out.print(colorText.toBlue(inputString));"},{"lineNumber":78,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":80,"author":{"gitId":"alstontham"},"content":"    public void printBoldNextLine(String inputString) {"},{"lineNumber":81,"author":{"gitId":"alstontham"},"content":"        System.out.println(colorText.toBlue(inputString));"},{"lineNumber":82,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":84,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"alstontham"},"content":"     * Prints the first message that the user sees upon launching the application."},{"lineNumber":86,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"alstontham"},"content":"    public void printWelcomeMessage() {"},{"lineNumber":88,"author":{"gitId":"alstontham"},"content":"        printAthenaVoice(\"Hello! I\u0027m the Goddess of Wisdom and War, the mighty ATHENA!\\n\" + \"...\\n\""},{"lineNumber":89,"author":{"gitId":"alstontham"},"content":"                + \"Okay okay I\u0027m not a Goddess but I am your Automated Timetable Helper Encourager n\u0027 Assistant!\\n\""},{"lineNumber":90,"author":{"gitId":"alstontham"},"content":"                + \"What can I do? Are you challenging me to a duel?\\n\" + \"...\\n\""},{"lineNumber":91,"author":{"gitId":"alstontham"},"content":"                + \"Oh you mean in terms of tasks? Just type \\\"help\\\" to witness my mighty repertoire!\\n\""},{"lineNumber":92,"author":{"gitId":"alstontham"},"content":"                + \"So, what would you like to do today?\");"},{"lineNumber":93,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":95,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"alstontham"},"content":"     * Prints out a message verifying which task the user has added to their list."},{"lineNumber":97,"author":{"gitId":"alstontham"},"content":"     *"},{"lineNumber":98,"author":{"gitId":"alstontham"},"content":"     * @param task A task object that represents the task being added"},{"lineNumber":99,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"wish2023"},"content":"    public void printTaskAdded(Task task) {"},{"lineNumber":101,"author":{"gitId":"alstontham"},"content":"        printNormal(\"You\u0027ve successfully added \");"},{"lineNumber":102,"author":{"gitId":"alstontham"},"content":"        printBold(task.getName());"},{"lineNumber":103,"author":{"gitId":"alstontham"},"content":"        printNormalNextLine(\" to your list!\");"},{"lineNumber":104,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":105,"author":{"gitId":"alstontham"},"content":"        if (task.getTimeInfo().getStartTimeString().equals(\"\")) {"},{"lineNumber":106,"author":{"gitId":"alstontham"},"content":"            printNormal(\"Since you haven\u0027t specified a start time, I\u0027ll allocate this task for you!\");"},{"lineNumber":107,"author":{"gitId":"alstontham"},"content":"        } else {"},{"lineNumber":108,"author":{"gitId":"alstontham"},"content":"            printNormal(\"It will start at \");"},{"lineNumber":109,"author":{"gitId":"alstontham"},"content":"            printBold(task.getTimeInfo().getStartTimeString());"},{"lineNumber":110,"author":{"gitId":"alstontham"},"content":"            printNormal(\".\");"},{"lineNumber":111,"author":{"gitId":"alstontham"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":113,"author":{"gitId":"alstontham"},"content":"        if (task.getTimeInfo().getDeadline().toLowerCase().equals(\"no deadline\")) {"},{"lineNumber":114,"author":{"gitId":"alstontham"},"content":"            printNormalNextLine(\" This task has no deadline.\");"},{"lineNumber":115,"author":{"gitId":"alstontham"},"content":"        } else {"},{"lineNumber":116,"author":{"gitId":"alstontham"},"content":"            printNormal(\" This task is scheduled to finish on \");"},{"lineNumber":117,"author":{"gitId":"alstontham"},"content":"            printBold(task.getTimeInfo().getDeadline());"},{"lineNumber":118,"author":{"gitId":"alstontham"},"content":"            printNormalNextLine(\".\");"},{"lineNumber":119,"author":{"gitId":"alstontham"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":121,"author":{"gitId":"alstontham"},"content":"        printNormalNextLine(\"\");"},{"lineNumber":122,"author":{"gitId":"alstontham"},"content":"        printNormal(\"You should spend a total of \");"},{"lineNumber":123,"author":{"gitId":"alstontham"},"content":"        printBold(task.getTimeInfo().getDurationString());"},{"lineNumber":124,"author":{"gitId":"alstontham"},"content":"        printNormal(\" hour(s) on it. \");"},{"lineNumber":125,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":126,"author":{"gitId":"alstontham"},"content":"        if (task.getTimeInfo().getRecurrence().toLowerCase().equals(\"today\")) {"},{"lineNumber":127,"author":{"gitId":"alstontham"},"content":"            printNormal(\"It is set to happen \");"},{"lineNumber":128,"author":{"gitId":"alstontham"},"content":"            printBold(task.getTimeInfo().getRecurrence());"},{"lineNumber":129,"author":{"gitId":"alstontham"},"content":"        } else if (task.getTimeInfo().getRecurrence().contains(\"-\")) {"},{"lineNumber":130,"author":{"gitId":"alstontham"},"content":"            printNormal(\"It is set to happen on \");"},{"lineNumber":131,"author":{"gitId":"alstontham"},"content":"            printBold(task.getTimeInfo().getRecurrence());"},{"lineNumber":132,"author":{"gitId":"alstontham"},"content":"        } else {"},{"lineNumber":133,"author":{"gitId":"alstontham"},"content":"            printNormal(\"It is set to happen every \");"},{"lineNumber":134,"author":{"gitId":"alstontham"},"content":"            printBold(task.getTimeInfo().getRecurrence());"},{"lineNumber":135,"author":{"gitId":"alstontham"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":137,"author":{"gitId":"alstontham"},"content":"        printNormal(\" and has an importance of \");"},{"lineNumber":138,"author":{"gitId":"alstontham"},"content":"        printBold(task.getImportance().toString());"},{"lineNumber":139,"author":{"gitId":"alstontham"},"content":"        printNormalNextLine(\".\");"},{"lineNumber":140,"author":{"gitId":"alstontham"},"content":"        printNormalNextLine(\"Additionally, you\u0027ve also added these notes!\");"},{"lineNumber":141,"author":{"gitId":"alstontham"},"content":"        printBold(task.getNotes());"},{"lineNumber":142,"author":{"gitId":"alstontham"},"content":"        printNormalNextLine(\".\");"},{"lineNumber":143,"author":{"gitId":"alstontham"},"content":"        printNormalNextLine(\"Looks like another mission to complete! Let\u0027s do it!\");"},{"lineNumber":144,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":146,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"alstontham"},"content":"     * Prints out a message verifying that the task the user specified has been marked as done."},{"lineNumber":148,"author":{"gitId":"alstontham"},"content":"     *"},{"lineNumber":149,"author":{"gitId":"alstontham"},"content":"     * @param task The task that the user marked as done"},{"lineNumber":150,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":151,"author":{"gitId":"alstontham"},"content":"    public void printTaskDone(Task task) {"},{"lineNumber":152,"author":{"gitId":"alstontham"},"content":"        printNormal(\"A job well done! I\u0027ve slayed the-- I mean, marked the task \");"},{"lineNumber":153,"author":{"gitId":"alstontham"},"content":"        printBold(task.getName());"},{"lineNumber":154,"author":{"gitId":"alstontham"},"content":"        printNormalNextLine(\" as complete!\");"},{"lineNumber":155,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":157,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":158,"author":{"gitId":"alstontham"},"content":"     * Prints out a message verifying that the task the user specified has been edited, and shows the user the"},{"lineNumber":159,"author":{"gitId":"alstontham"},"content":"     * new task details."},{"lineNumber":160,"author":{"gitId":"alstontham"},"content":"     * @param task A task object that represents the task being edited"},{"lineNumber":161,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":162,"author":{"gitId":"wish2023"},"content":"    public void printTaskEdited(Task task) {"},{"lineNumber":163,"author":{"gitId":"alstontham"},"content":"        printNormal(\"You\u0027ve changed the details of task number \");"},{"lineNumber":164,"author":{"gitId":"alstontham"},"content":"        printBoldNextLine((task.getNumber()) + \": \" + task.getName() + \"!\");"},{"lineNumber":165,"author":{"gitId":"alstontham"},"content":"        printNormalNextLine(\"Here are the new details of your task!\");"},{"lineNumber":166,"author":{"gitId":"alstontham"},"content":"        printNormal(\"Start Time: \");"},{"lineNumber":167,"author":{"gitId":"Kafcis"},"content":"        TimeData timeInfo \u003d task.getTimeInfo();"},{"lineNumber":168,"author":{"gitId":"Kafcis"},"content":"        printBoldNextLine(timeInfo.getStartTimeString());"},{"lineNumber":169,"author":{"gitId":"alstontham"},"content":"        printNormal(\"Duration: \");"},{"lineNumber":170,"author":{"gitId":"Kafcis"},"content":"        printBoldNextLine(timeInfo.getDurationString());"},{"lineNumber":171,"author":{"gitId":"alstontham"},"content":"        printNormal(\"Due Date: \");"},{"lineNumber":172,"author":{"gitId":"Kafcis"},"content":"        printBoldNextLine(timeInfo.getDeadline());"},{"lineNumber":173,"author":{"gitId":"alstontham"},"content":"        printNormal(\"Recurrence: \");"},{"lineNumber":174,"author":{"gitId":"Kafcis"},"content":"        printBoldNextLine(timeInfo.getRecurrence());"},{"lineNumber":175,"author":{"gitId":"alstontham"},"content":"        printNormal(\"Importance: \");"},{"lineNumber":176,"author":{"gitId":"alstontham"},"content":"        printBoldNextLine(task.getImportance().toString());"},{"lineNumber":177,"author":{"gitId":"alstontham"},"content":"        printNormal(\"Additional Notes: \");"},{"lineNumber":178,"author":{"gitId":"alstontham"},"content":"        printBoldNextLine(task.getNotes());"},{"lineNumber":179,"author":{"gitId":"alstontham"},"content":"        printNormalNextLine(\"The mistakes of the past have been vanquished!\");"},{"lineNumber":180,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":182,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":183,"author":{"gitId":"alstontham"},"content":"     * Prints out a message verifying that the task the user specified has been deleted."},{"lineNumber":184,"author":{"gitId":"alstontham"},"content":"     *"},{"lineNumber":185,"author":{"gitId":"alstontham"},"content":"     * @param task The task that the user has deleted."},{"lineNumber":186,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":187,"author":{"gitId":"alstontham"},"content":"    public void printTaskDeleted(Task task, String taskRestore) {"},{"lineNumber":188,"author":{"gitId":"alstontham"},"content":"        printNormal(\"Are we pretending the task \");"},{"lineNumber":189,"author":{"gitId":"alstontham"},"content":"        printBold(task.getName());"},{"lineNumber":190,"author":{"gitId":"alstontham"},"content":"        printNormalNextLine(\" never existed? Very well...\");"},{"lineNumber":191,"author":{"gitId":"alstontham"},"content":"        printNormalNextLine(\"We both know the human propensity to make mistakes, if you want it back just type:\");"},{"lineNumber":192,"author":{"gitId":"alstontham"},"content":"        printBoldNextLine(taskRestore);"},{"lineNumber":193,"author":{"gitId":"alstontham"},"content":"        printNormalNextLine(\"You can thank me later!\");"},{"lineNumber":194,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":196,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":197,"author":{"gitId":"alstontham"},"content":"     * Prints out the task details that the user specified to view."},{"lineNumber":198,"author":{"gitId":"alstontham"},"content":"     *"},{"lineNumber":199,"author":{"gitId":"alstontham"},"content":"     * @param taskDetails The task that the user wants to view."},{"lineNumber":200,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":201,"author":{"gitId":"alstontham"},"content":"    public void printTaskDetails(String taskDetails) {"},{"lineNumber":202,"author":{"gitId":"alstontham"},"content":"        printNormal(\"Here are the details of your task: \");"},{"lineNumber":203,"author":{"gitId":"alstontham"},"content":"        printBoldNextLine(taskDetails);"},{"lineNumber":204,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":206,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":207,"author":{"gitId":"alstontham"},"content":"     * Prints out a help menu of all available tasks that ATHENA is able to do."},{"lineNumber":208,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":209,"author":{"gitId":"alstontham"},"content":"    public void printHelp() {"},{"lineNumber":210,"author":{"gitId":"alstontham"},"content":"        printNormal(\"Not sure of what I\u0027m capable of doing? \");"},{"lineNumber":211,"author":{"gitId":"alstontham"},"content":"        printNormalNextLine(\"Well here\u0027s a list just for you!\\n\");"},{"lineNumber":212,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":213,"author":{"gitId":"alstontham"},"content":"        printAthenaVoice(\"To add a task \");"},{"lineNumber":214,"author":{"gitId":"alstontham"},"content":"        printNormalNextLine(\"(parameters in square brackets are optional fields):\");"},{"lineNumber":215,"author":{"gitId":"alstontham"},"content":"        printHighlight(\"add n/NAME [t/TIME] [d/DURATION] [D/DEADLINE] [r/RECURRENCE] \""},{"lineNumber":216,"author":{"gitId":"alstontham"},"content":"                        + \"[i/IMPORTANCE] [a/ADDITIONAL-NOTES]\");"},{"lineNumber":217,"author":{"gitId":"alstontham"},"content":"        printNormalNextLine(\"e.g. add n/Assignment1 t/1100 D/16-09-2020 d/2 r/Today \""},{"lineNumber":218,"author":{"gitId":"alstontham"},"content":"                + \"i/high a/Refer to lecture notes\\n\");"},{"lineNumber":219,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":220,"author":{"gitId":"alstontham"},"content":"        printAthenaVoice(\"To list your current tasks \");"},{"lineNumber":221,"author":{"gitId":"alstontham"},"content":"        printNormalNextLine(\"(parameters in square brackets are optional fields):\");"},{"lineNumber":222,"author":{"gitId":"alstontham"},"content":"        printHighlight(\"list [f/FORECAST] [i/IMPORTANCE]\");"},{"lineNumber":223,"author":{"gitId":"alstontham"},"content":"        printNormalNextLine(\"e.g. list [f/WEEK] [i/medium]\\n\");"},{"lineNumber":224,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":225,"author":{"gitId":"alstontham"},"content":"        printAthenaVoice(\"To mark a task as done:\");"},{"lineNumber":226,"author":{"gitId":"alstontham"},"content":"        printHighlight(\"done INDEX\");"},{"lineNumber":227,"author":{"gitId":"alstontham"},"content":"        printNormalNextLine(\"e.g. done 2\\n\");"},{"lineNumber":228,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":229,"author":{"gitId":"alstontham"},"content":"        printAthenaVoice(\"To edit a task \");"},{"lineNumber":230,"author":{"gitId":"alstontham"},"content":"        printNormalNextLine(\" (parameters in square brackets are optional fields, \""},{"lineNumber":231,"author":{"gitId":"alstontham"},"content":"                + \"but at least one parameter needs to be included):\");"},{"lineNumber":232,"author":{"gitId":"alstontham"},"content":"        printHighlight(\"edit INDEX [n/NAME] [t/TIME] [d/DURATION] [D/DEADLINE] \""},{"lineNumber":233,"author":{"gitId":"alstontham"},"content":"                + \"[r/RECURRENCE] [i/IMPORTANCE] [a/ADDITIONAL-NOTES]\");"},{"lineNumber":234,"author":{"gitId":"alstontham"},"content":"        printNormalNextLine(\"e.g.  edit 1 n/Assignment1 t/1100 D/16-09-2020 d/2 r/today \""},{"lineNumber":235,"author":{"gitId":"alstontham"},"content":"                + \"i/high a/Refer to lecture notes\\n\");"},{"lineNumber":236,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":237,"author":{"gitId":"alstontham"},"content":"        printAthenaVoice(\"To delete a task:\");"},{"lineNumber":238,"author":{"gitId":"alstontham"},"content":"        printHighlight(\"delete INDEX\");"},{"lineNumber":239,"author":{"gitId":"alstontham"},"content":"        printNormalNextLine(\"e.g. delete 2\\n\");"},{"lineNumber":240,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":241,"author":{"gitId":"alstontham"},"content":"        printAthenaVoice(\"To view a task:\");"},{"lineNumber":242,"author":{"gitId":"alstontham"},"content":"        printHighlight(\"view INDEX\");"},{"lineNumber":243,"author":{"gitId":"alstontham"},"content":"        printNormalNextLine(\"e.g. view 2\\n\");"},{"lineNumber":244,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":245,"author":{"gitId":"alstontham"},"content":"        printAthenaVoice(\"To say farewell to me, ATHENA:\");"},{"lineNumber":246,"author":{"gitId":"alstontham"},"content":"        printHighlight(\"exit\");"},{"lineNumber":247,"author":{"gitId":"alstontham"},"content":"        printNormalNextLine(\"But why would you want to leave me anyways? Hmph.\");"},{"lineNumber":248,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":249,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":250,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":251,"author":{"gitId":"alstontham"},"content":"     * Prints a message when there is an error with a task in the storage file."},{"lineNumber":252,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":253,"author":{"gitId":"alstontham"},"content":"    public void printInvalidTask() {"},{"lineNumber":254,"author":{"gitId":"alstontham"},"content":"        printError(\"One of the tasks in the archives seems to be cursed, I have disposed of it!\");"},{"lineNumber":255,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":256,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":257,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":258,"author":{"gitId":"wish2023"},"content":"     * Print a message when user enters time in invalid format."},{"lineNumber":259,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":260,"author":{"gitId":"wish2023"},"content":"    public void printInvalidTimeFormatException() {"},{"lineNumber":261,"author":{"gitId":"alstontham"},"content":"        printError(\"Please enter your time in the format [HHMM].\");"},{"lineNumber":262,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":263,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":264,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":265,"author":{"gitId":"alstontham"},"content":"     * Prints a message stating the task is not found."},{"lineNumber":266,"author":{"gitId":"alstontham"},"content":"     *"},{"lineNumber":267,"author":{"gitId":"alstontham"},"content":"     * @param taskNumber Task number given by the user"},{"lineNumber":268,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":269,"author":{"gitId":"alstontham"},"content":"    public void printTaskNotFound(int taskNumber) {"},{"lineNumber":270,"author":{"gitId":"alstontham"},"content":"        printError(\"The task with the label \" + taskNumber + \"cannot be found.\");"},{"lineNumber":271,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":272,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":273,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":274,"author":{"gitId":"alstontham"},"content":"     * Prints a message telling user they did not specify either the name or start time of the task."},{"lineNumber":275,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":276,"author":{"gitId":"alstontham"},"content":"    public void printAddMissingRequiredParametersException() {"},{"lineNumber":277,"author":{"gitId":"alstontham"},"content":"        printError(\"You haven\u0027t specified the name of the task! \""},{"lineNumber":278,"author":{"gitId":"alstontham"},"content":"                + \"How can we go on a conquest if we don\u0027t know what to slay?\");"},{"lineNumber":279,"author":{"gitId":"alstontham"},"content":"        printNormal(\"In case you\u0027ve forgotten, this is how you add a task: \");"},{"lineNumber":280,"author":{"gitId":"alstontham"},"content":"        printHighlight(\"add n/NAME [t/TIME] [d/DURATION] [D/DEADLINE] [r/RECURRENCE] \""},{"lineNumber":281,"author":{"gitId":"alstontham"},"content":"                + \"[i/IMPORTANCE] [a/ADDITIONAL-NOTES]\");"},{"lineNumber":282,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":283,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":284,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":285,"author":{"gitId":"alstontham"},"content":"     * Prints an error when the date is not formatted correctly."},{"lineNumber":286,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":287,"author":{"gitId":"alstontham"},"content":"    public void printAddDateWrongFormatException() {"},{"lineNumber":288,"author":{"gitId":"alstontham"},"content":"        printError(\"You didn\u0027t format something in the right way!\");"},{"lineNumber":289,"author":{"gitId":"alstontham"},"content":"        printNormal(\"In case you\u0027ve forgotten, this is how you add a task: \");"},{"lineNumber":290,"author":{"gitId":"alstontham"},"content":"        printHighlight(\"add n/NAME [t/TIME] [d/DURATION] [D/DEADLINE] [r/RECURRENCE] \""},{"lineNumber":291,"author":{"gitId":"alstontham"},"content":"                + \"[i/IMPORTANCE] [a/ADDITIONAL-NOTES]\");"},{"lineNumber":292,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":293,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":294,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":295,"author":{"gitId":"alstontham"},"content":"     * Prints a message telling user they did not provide a valid index for the delete command."},{"lineNumber":296,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":297,"author":{"gitId":"alstontham"},"content":"    public void printDeleteInvalidIndexException() {"},{"lineNumber":298,"author":{"gitId":"alstontham"},"content":"        printError(\"Hmm...not sure what you\u0027re trying to delete, but there is no task at that index.\");"},{"lineNumber":299,"author":{"gitId":"alstontham"},"content":"        printNormal(\"In case you\u0027ve forgotten your list of tasks and their indexes, type: \");"},{"lineNumber":300,"author":{"gitId":"alstontham"},"content":"        printHighlight(\"list [f/FORECAST] [i/IMPORTANCE]\");"},{"lineNumber":301,"author":{"gitId":"alstontham"},"content":"        printNormal(\"This is how you delete a task, provided there is a task at the index you specify: \");"},{"lineNumber":302,"author":{"gitId":"alstontham"},"content":"        printHighlight(\"delete INDEX\");"},{"lineNumber":303,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":304,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":305,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":306,"author":{"gitId":"wish2023"},"content":"     * Prints a message telling user to input recurrence in correct format."},{"lineNumber":307,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":308,"author":{"gitId":"wish2023"},"content":"    public void printInvalidRecurrenceException() {"},{"lineNumber":309,"author":{"gitId":"alstontham"},"content":"        printError(\"Remember your date has to be valid in the format dd-mm(-yyyy).\""},{"lineNumber":310,"author":{"gitId":"alstontham"},"content":"                + \"Or you can type a day of the week for repeating tasks.\");"},{"lineNumber":311,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":312,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":313,"author":{"gitId":"wish2023"},"content":"    public void printTimeNotHourlyException() {"},{"lineNumber":314,"author":{"gitId":"wish2023"},"content":"        printError(\"Your time has to be hourly only! This version does not support \""},{"lineNumber":315,"author":{"gitId":"wish2023"},"content":"                + \" any time where the minute hand is not on 12.\");"},{"lineNumber":316,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":317,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":318,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":319,"author":{"gitId":"wish2023"},"content":"     * Prints a message telling user that their proposed date has passed."},{"lineNumber":320,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":321,"author":{"gitId":"wish2023"},"content":"    public void printDateHasPassedException() {"},{"lineNumber":322,"author":{"gitId":"wish2023"},"content":"        printError(\"Your date or time has already passed. \""},{"lineNumber":323,"author":{"gitId":"alstontham"},"content":"                + \"I can\u0027t help you here unless I\u0027m a time traveller.\");"},{"lineNumber":324,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":325,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":326,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":327,"author":{"gitId":"wish2023"},"content":"     * Print message telling user they have mistyped the deadline date."},{"lineNumber":328,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":329,"author":{"gitId":"wish2023"},"content":"    public void printInvalidDeadlineException() {"},{"lineNumber":330,"author":{"gitId":"alstontham"},"content":"        printError(\"Remember your deadline has to be valid in the format dd-mm(-yyyy).\");"},{"lineNumber":331,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":332,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":333,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":334,"author":{"gitId":"alstontham"},"content":"     * Prints a message telling user they did not provide an index for the delete command."},{"lineNumber":335,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":336,"author":{"gitId":"alstontham"},"content":"    public void printDeleteNoIndexException() {"},{"lineNumber":337,"author":{"gitId":"alstontham"},"content":"        printError(\"So you\u0027re trying to delete a task...but which one exactly? You haven\u0027t specified.\");"},{"lineNumber":338,"author":{"gitId":"alstontham"},"content":"        printNormal(\"In case you\u0027ve forgotten your list of tasks and their indexes, type: \");"},{"lineNumber":339,"author":{"gitId":"alstontham"},"content":"        printHighlight(\"list [f/FORECAST] [i/IMPORTANCE]\");"},{"lineNumber":340,"author":{"gitId":"alstontham"},"content":"        printNormal(\"Also just as a reminder, this is how you delete a task: \");"},{"lineNumber":341,"author":{"gitId":"alstontham"},"content":"        printHighlight(\"delete INDEX\");"},{"lineNumber":342,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":343,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":344,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":345,"author":{"gitId":"alstontham"},"content":"     * Prints a message telling user they did not provide a valid index for the done command."},{"lineNumber":346,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":347,"author":{"gitId":"alstontham"},"content":"    public void printDoneInvalidIndexException() {"},{"lineNumber":348,"author":{"gitId":"alstontham"},"content":"        printError(\"I\u0027m not sure if you\u0027re trying to smoke me or smoke yourself, \""},{"lineNumber":349,"author":{"gitId":"alstontham"},"content":"                + \"but there is no task at that index.\");"},{"lineNumber":350,"author":{"gitId":"alstontham"},"content":"        printNormal(\"To see your list of tasks and their indexes, type this below: \");"},{"lineNumber":351,"author":{"gitId":"alstontham"},"content":"        printHighlight(\"list [f/FORECAST] [i/IMPORTANCE]\");"},{"lineNumber":352,"author":{"gitId":"alstontham"},"content":"        printNormal(\"This is how you mark a task as done, provided that is a task at the index you specify: \");"},{"lineNumber":353,"author":{"gitId":"alstontham"},"content":"        printHighlight(\"done INDEX\");"},{"lineNumber":354,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":355,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":356,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":357,"author":{"gitId":"alstontham"},"content":"     * Prints a message telling user they did not provide an index for the done command."},{"lineNumber":358,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":359,"author":{"gitId":"alstontham"},"content":"    public void printDoneNoIndexException() {"},{"lineNumber":360,"author":{"gitId":"alstontham"},"content":"        printError(\"I know you\u0027re really eager, but you need to specify \""},{"lineNumber":361,"author":{"gitId":"alstontham"},"content":"                + \"the index of a task to mark that particular task as done!\");"},{"lineNumber":362,"author":{"gitId":"alstontham"},"content":"        printNormal(\"To see your list of tasks and their indexes, type: \");"},{"lineNumber":363,"author":{"gitId":"alstontham"},"content":"        printHighlight(\"list [f/FORECAST] [i/IMPORTANCE]\");"},{"lineNumber":364,"author":{"gitId":"alstontham"},"content":"        printNormal(\"In the rare chance that you\u0027ve forgotten how to mark a task as done, here is my tip for you: \");"},{"lineNumber":365,"author":{"gitId":"alstontham"},"content":"        printHighlight(\"done INDEX\");"},{"lineNumber":366,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":367,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":368,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":369,"author":{"gitId":"wish2023"},"content":"     * Prints a message telling the user they\u0027ve already marked the task as done."},{"lineNumber":370,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":371,"author":{"gitId":"wish2023"},"content":"    public void printTaskIsDoneException() {"},{"lineNumber":372,"author":{"gitId":"alstontham"},"content":"        printError(\"Hmmm looks like you\u0027ve already completed that task. Maybe consider taking a break?\");"},{"lineNumber":373,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":374,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":375,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":376,"author":{"gitId":"alstontham"},"content":"     * Prints a message telling user they did not provide a valid index for the view command."},{"lineNumber":377,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":378,"author":{"gitId":"alstontham"},"content":"    public void printViewInvalidIndexException() {"},{"lineNumber":379,"author":{"gitId":"alstontham"},"content":"        printError(\"Errrrr I\u0027m not sure what you wanted to do but....\""},{"lineNumber":380,"author":{"gitId":"alstontham"},"content":"                + \"there is no task at that index. You should enter an index number that contains a task.\");"},{"lineNumber":381,"author":{"gitId":"alstontham"},"content":"        printNormal(\"To see your list of tasks and their indexes, type: \");"},{"lineNumber":382,"author":{"gitId":"alstontham"},"content":"        printHighlight(\"list [f/FORECAST] [i/IMPORTANCE]\");"},{"lineNumber":383,"author":{"gitId":"alstontham"},"content":"        printNormal(\"Also, in case you forgot how to view the details of a task, type: \");"},{"lineNumber":384,"author":{"gitId":"alstontham"},"content":"        printHighlight(\"view INDEX\");"},{"lineNumber":385,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":386,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":387,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":388,"author":{"gitId":"alstontham"},"content":"     * Prints a message telling user they did not provide an index for the view command."},{"lineNumber":389,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":390,"author":{"gitId":"alstontham"},"content":"    public void printViewNoIndexException() {"},{"lineNumber":391,"author":{"gitId":"alstontham"},"content":"        printError(\"Hold up, hold up, it seems like you haven\u0027t told me which task you want to view!\");"},{"lineNumber":392,"author":{"gitId":"alstontham"},"content":"        printNormal(\"If you can\u0027t remember which task has which index number, type: \");"},{"lineNumber":393,"author":{"gitId":"alstontham"},"content":"        printHighlight(\"list [f/FORECAST] [i/IMPORTANCE]\");"},{"lineNumber":394,"author":{"gitId":"alstontham"},"content":"        printNormal(\"And if you forgot how to view a task, here you go: \");"},{"lineNumber":395,"author":{"gitId":"alstontham"},"content":"        printHighlight(\"view INDEX\");"},{"lineNumber":396,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":397,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":398,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":399,"author":{"gitId":"alstontham"},"content":"     * Prints a message telling user they did not provide an index for the edit command."},{"lineNumber":400,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":401,"author":{"gitId":"alstontham"},"content":"    public void printEditNoIndexException() {"},{"lineNumber":402,"author":{"gitId":"alstontham"},"content":"        printError(\"Your edit command instructions aren\u0027t quite right...\");"},{"lineNumber":403,"author":{"gitId":"alstontham"},"content":"        printNormal(\"Remember to edit at least one parameter! \""},{"lineNumber":404,"author":{"gitId":"alstontham"},"content":"                + \"I mean...why would you use the edit command if you don\u0027t want to edit anything?\\n\""},{"lineNumber":405,"author":{"gitId":"alstontham"},"content":"                + \"I know the command is quite long, so here\u0027s a reminder for you: \");"},{"lineNumber":406,"author":{"gitId":"alstontham"},"content":"        printHighlight(\"edit INDEX [n/NAME] [t/TIME] [d/DURATION] [D/DEADLINE] \""},{"lineNumber":407,"author":{"gitId":"alstontham"},"content":"                + \"[r/RECURRENCE] [i/IMPORTANCE] [a/ADDITIONAL-NOTES]\");"},{"lineNumber":408,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":409,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":410,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":411,"author":{"gitId":"alstontham"},"content":"     * Prints a message telling user they did not input a command that is recognized by the program."},{"lineNumber":412,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":413,"author":{"gitId":"alstontham"},"content":"    public void printInvalidCommandException() {"},{"lineNumber":414,"author":{"gitId":"alstontham"},"content":"        printError(\"I know I\u0027m really smart but even I don\u0027t know what you\u0027re requesting. \""},{"lineNumber":415,"author":{"gitId":"alstontham"},"content":"                + \"Maybe if you type \u0027help\u0027, you can see what the valid commands are.\");"},{"lineNumber":416,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":417,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":418,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":419,"author":{"gitId":"alstontham"},"content":"     * Prints a message telling user their task list is empty."},{"lineNumber":420,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":421,"author":{"gitId":"alstontham"},"content":"    public void printEmptyTaskListException() {"},{"lineNumber":422,"author":{"gitId":"alstontham"},"content":"        printError(\"You don\u0027t have any tasks in your list! \""},{"lineNumber":423,"author":{"gitId":"alstontham"},"content":"                + \"You should probably add some in if you want to be productive.\");"},{"lineNumber":424,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":425,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":426,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":427,"author":{"gitId":"wish2023"},"content":"     * Prints a message telling user there\u0027s a clash with this task."},{"lineNumber":428,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":429,"author":{"gitId":"wish2023"},"content":"    public void printClashInTaskException() {"},{"lineNumber":430,"author":{"gitId":"alstontham"},"content":"        printError(\"There\u0027s a clash in this task, please choose a different time or date.\");"},{"lineNumber":431,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":432,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":433,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":434,"author":{"gitId":"wish2023"},"content":"     * Prints a message telling user they\u0027ve entered an invalid importance."},{"lineNumber":435,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":436,"author":{"gitId":"wish2023"},"content":"    public void printInvalidImportanceException() {"},{"lineNumber":437,"author":{"gitId":"alstontham"},"content":"        printError(\"You have entered an invalid importance. Please choose from high, medium, or low.\");"},{"lineNumber":438,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":439,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":440,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":441,"author":{"gitId":"wish2023"},"content":"     * Prints a message telling user they\u0027ve entered an invalid forecast."},{"lineNumber":442,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":443,"author":{"gitId":"wish2023"},"content":"    public void printInvalidForecastException() {"},{"lineNumber":444,"author":{"gitId":"alstontham"},"content":"        printError(\"You have entered an invalid forecast. Please choose from day, week, or all.\");"},{"lineNumber":445,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":446,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":447,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":448,"author":{"gitId":"alstontham"},"content":"     * Prints a message when the user chooses to exit the program."},{"lineNumber":449,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":450,"author":{"gitId":"alstontham"},"content":"    public void printExitMessage() {"},{"lineNumber":451,"author":{"gitId":"alstontham"},"content":"        printAthenaVoice(\"Going so soon? Well I\u0027ll be here the next time you need me. Farewell!\");"},{"lineNumber":452,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":453,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":454,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":455,"author":{"gitId":"alstontham"},"content":"     * Prints the timetable."},{"lineNumber":456,"author":{"gitId":"alstontham"},"content":"     *"},{"lineNumber":457,"author":{"gitId":"alstontham"},"content":"     * @param timetable Timetable to be printed"},{"lineNumber":458,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":459,"author":{"gitId":"alstontham"},"content":"    public void printTimetable(Timetable timetable) {"},{"lineNumber":460,"author":{"gitId":"alstontham"},"content":"        System.out.println(timetable);"},{"lineNumber":461,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":462,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":463,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":464,"author":{"gitId":"alstontham"},"content":"     * Generic error handling that prints out when an unexpected storage loading error has occurred."},{"lineNumber":465,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":466,"author":{"gitId":"Kafcis"},"content":"    public void printStorageLoadFail() {"},{"lineNumber":467,"author":{"gitId":"alstontham"},"content":"        printError(\"Storage loading has failed.\");"},{"lineNumber":468,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":469,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":470,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":471,"author":{"gitId":"alstontham"},"content":"     * Prints an error message when there is an error with the stored data."},{"lineNumber":472,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":473,"author":{"gitId":"alstontham"},"content":"     * @param corruptedLine Line in the save file that has an error and has to be removed"},{"lineNumber":474,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":475,"author":{"gitId":"Kafcis"},"content":"    public void printCorruptedLine(String corruptedLine) {"},{"lineNumber":476,"author":{"gitId":"alstontham"},"content":"        printError(\"This task is invalid: \" + corruptedLine + \".\");"},{"lineNumber":477,"author":{"gitId":"alstontham"},"content":"        printError(\"Please remove it externally to continue.\");"},{"lineNumber":478,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":479,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":480,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":481,"author":{"gitId":"alstontham"},"content":"     * Generic error handling that prints out when an unexpected allocation error has occurred."},{"lineNumber":482,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":483,"author":{"gitId":"Kafcis"},"content":"    public void printAllocationFailed() {"},{"lineNumber":484,"author":{"gitId":"alstontham"},"content":"        printError(\"Allocation Failed.\");"},{"lineNumber":485,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":486,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":487,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":488,"author":{"gitId":"alstontham"},"content":"     * Prints a message telling the user they cannot add a task before 8am and after 12 midnight."},{"lineNumber":489,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":490,"author":{"gitId":"daniellimws"},"content":"    public void printSleepTimeNotAllowed() {"},{"lineNumber":491,"author":{"gitId":"alstontham"},"content":"        printError(\"You are not allowed to add a task from 12am to 8am. It is time to sleep!\");"},{"lineNumber":492,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":493,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":494,"author":{"gitId":"Kafcis"},"content":"    public void printTaskTooLong(int taskNumber) {"},{"lineNumber":495,"author":{"gitId":"Kafcis"},"content":"        System.out.println(colorText.toRed(\"Task number \" + taskNumber"},{"lineNumber":496,"author":{"gitId":"Kafcis"},"content":"                + \" takes too long to complete, please reduce the time 16 hours and below \\n\"));"},{"lineNumber":497,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":498,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":499,"author":{"gitId":"Kafcis"},"content":"    public void printIllegalTimeModificationException() {"},{"lineNumber":500,"author":{"gitId":"Kafcis"},"content":"        System.out.println(colorText.toRed("},{"lineNumber":501,"author":{"gitId":"Kafcis"},"content":"                \"You are not allowed to modify the time of flexible tasks \\n\"));"},{"lineNumber":502,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":503,"author":{"gitId":"alstontham"},"content":"}"}],"authorContributionMap":{"alstontham":418,"Kafcis":27,"daniellimws":1,"wish2023":57}},{"path":"src/main/java/athena/ui/ColorText.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"alstontham"},"content":"package athena.ui;"},{"lineNumber":2,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":3,"author":{"gitId":"alstontham"},"content":"public class ColorText {"},{"lineNumber":4,"author":{"gitId":"alstontham"},"content":"    private static final String ANSI_RESET \u003d \"\\u001B[0m\";"},{"lineNumber":5,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":6,"author":{"gitId":"alstontham"},"content":"    public ColorText() {"},{"lineNumber":7,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":8,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":10,"author":{"gitId":"alstontham"},"content":"    public String toBlue(String inputString) {"},{"lineNumber":11,"author":{"gitId":"alstontham"},"content":"        String ansiBlue \u003d \"\\u001B[34m\";"},{"lineNumber":12,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":13,"author":{"gitId":"alstontham"},"content":"        return ansiBlue + inputString + ANSI_RESET;"},{"lineNumber":14,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":16,"author":{"gitId":"alstontham"},"content":"    public String toPurple(String inputString) {"},{"lineNumber":17,"author":{"gitId":"alstontham"},"content":"        String ansiPurple \u003d \"\\u001b[35m\";"},{"lineNumber":18,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":19,"author":{"gitId":"alstontham"},"content":"        return ansiPurple + inputString + ANSI_RESET;"},{"lineNumber":20,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":22,"author":{"gitId":"alstontham"},"content":"    public String toRed(String inputString) {"},{"lineNumber":23,"author":{"gitId":"alstontham"},"content":"        String ansiRed \u003d \"\\u001B[31m\";"},{"lineNumber":24,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":25,"author":{"gitId":"alstontham"},"content":"        return ansiRed + inputString + ANSI_RESET;"},{"lineNumber":26,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":28,"author":{"gitId":"alstontham"},"content":"    public String toYellow(String inputString) {"},{"lineNumber":29,"author":{"gitId":"alstontham"},"content":"        String ansiYellow \u003d \"\\u001b[33m\";"},{"lineNumber":30,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":31,"author":{"gitId":"alstontham"},"content":"        return ansiYellow + inputString + ANSI_RESET;"},{"lineNumber":32,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"alstontham"},"content":"}"}],"authorContributionMap":{"alstontham":33}},{"path":"src/main/java/athena/ui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"alstontham"},"content":"package athena.ui;"},{"lineNumber":2,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":3,"author":{"gitId":"alstontham"},"content":"import athena.Importance;"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"import athena.task.Task;"},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"import athena.timetable.Timetable;"},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":7,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"alstontham"},"content":" * API of the Ui component."},{"lineNumber":9,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":10,"author":{"gitId":"alstontham"},"content":"public interface Ui {"},{"lineNumber":11,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"alstontham"},"content":"     * Prints Athena\u0027s logo when the app starts."},{"lineNumber":13,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"alstontham"},"content":"    void printAthenaLogo();"},{"lineNumber":15,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":16,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"alstontham"},"content":"     * Prints the first message that the user sees upon launching the application."},{"lineNumber":18,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"alstontham"},"content":"    void printWelcomeMessage();"},{"lineNumber":20,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":21,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"alstontham"},"content":"     * Prints out a message verifying which task the user has added to their list."},{"lineNumber":23,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"wish2023"},"content":"     * @param task Task that is added"},{"lineNumber":25,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"wish2023"},"content":"    void printTaskAdded(Task task);"},{"lineNumber":27,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":28,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"alstontham"},"content":"     * Prints out a message verifying that the task the user specified has been marked as done."},{"lineNumber":30,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"alstontham"},"content":"     * @param task The task that the user marked as done"},{"lineNumber":32,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"alstontham"},"content":"    void printTaskDone(Task task);"},{"lineNumber":34,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":35,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"alstontham"},"content":"     * Prints out a message verifying that the task the user specified has been edited, and shows the user the"},{"lineNumber":37,"author":{"gitId":"alstontham"},"content":"     * new task details."},{"lineNumber":38,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"wish2023"},"content":"     * @param task The updated task"},{"lineNumber":40,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"wish2023"},"content":"    void printTaskEdited(Task task);"},{"lineNumber":42,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":43,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"alstontham"},"content":"     * Prints out a message verifying that the task the user specified has been deleted."},{"lineNumber":45,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"alstontham"},"content":"     * @param task The task that the user has deleted."},{"lineNumber":47,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"alstontham"},"content":"    void printTaskDeleted(Task task, String taskRestore);"},{"lineNumber":49,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":50,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"amanda-chua"},"content":"     * Prints out the task details that the user specified to view."},{"lineNumber":52,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"amanda-chua"},"content":"     * @param taskDetails The task that the user wants to view."},{"lineNumber":54,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"alstontham"},"content":"    void printTaskDetails(String taskDetails);"},{"lineNumber":56,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":57,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"alstontham"},"content":"     * Prints out a help menu of all available tasks that ATHENA is able to do."},{"lineNumber":59,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"alstontham"},"content":"    void printHelp();"},{"lineNumber":61,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":62,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"alstontham"},"content":"     * Prints a message when there is an error with a task in the storage file."},{"lineNumber":64,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"alstontham"},"content":"    void printInvalidTask();"},{"lineNumber":66,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":67,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"daniellimws"},"content":"     * Prints a message stating the task is not found."},{"lineNumber":69,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"alstontham"},"content":"     * @param taskNumber Task number given by the user"},{"lineNumber":71,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"alstontham"},"content":"    void printTaskNotFound(int taskNumber);"},{"lineNumber":73,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":74,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"alstontham"},"content":"     * Prints a message telling user they did not specify either the name or start time of the task."},{"lineNumber":76,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"alstontham"},"content":"    void printAddMissingRequiredParametersException();"},{"lineNumber":78,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":79,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"alstontham"},"content":"     * Prints a message telling user they did not provide a valid index for the delete command."},{"lineNumber":81,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"alstontham"},"content":"    void printDeleteInvalidIndexException();"},{"lineNumber":83,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":84,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"alstontham"},"content":"     * Prints a message telling user they did not provide an index for the delete command."},{"lineNumber":86,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"alstontham"},"content":"    void printDeleteNoIndexException();"},{"lineNumber":88,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":89,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"alstontham"},"content":"     * Prints a message telling user they did not provide a valid index for the done command."},{"lineNumber":91,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"alstontham"},"content":"    void printDoneInvalidIndexException();"},{"lineNumber":93,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":94,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"alstontham"},"content":"     * Prints a message telling user they did not provide an index for the done command."},{"lineNumber":96,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"alstontham"},"content":"    void printDoneNoIndexException();"},{"lineNumber":98,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":99,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"amanda-chua"},"content":"     * Prints a message telling user they did not provide a valid index for the view command."},{"lineNumber":101,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"alstontham"},"content":"    void printViewInvalidIndexException();"},{"lineNumber":103,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":104,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"amanda-chua"},"content":"     * Prints a message telling user they did not provide an index for the view command."},{"lineNumber":106,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"alstontham"},"content":"    void printViewNoIndexException();"},{"lineNumber":108,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":109,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"alstontham"},"content":"     * Prints a message telling user they did not provide an index for the edit command."},{"lineNumber":111,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"alstontham"},"content":"    void printEditNoIndexException();"},{"lineNumber":113,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":114,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"alstontham"},"content":"     * Prints a message telling user they did not input a command that is recognized by the program."},{"lineNumber":116,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"alstontham"},"content":"    void printInvalidCommandException();"},{"lineNumber":118,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":119,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"alstontham"},"content":"     * Prints a message telling user their task list is empty."},{"lineNumber":121,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"alstontham"},"content":"    void printEmptyTaskListException();"},{"lineNumber":123,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":124,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"alstontham"},"content":"     * Prints a message when the user chooses to exit the program."},{"lineNumber":126,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"alstontham"},"content":"    void printExitMessage();"},{"lineNumber":128,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":129,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"daniellimws"},"content":"     * Prints the timetable."},{"lineNumber":131,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":132,"author":{"gitId":"alstontham"},"content":"     * @param timetable Timetable to be printed"},{"lineNumber":133,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"alstontham"},"content":"    void printTimetable(Timetable timetable);"},{"lineNumber":135,"author":{"gitId":"alstontham"},"content":"}"}],"authorContributionMap":{"alstontham":100,"Kafcis":6,"amanda-chua":14,"daniellimws":11,"wish2023":4}},{"path":"src/test/java/athena/ParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"alstontham"},"content":"package athena;"},{"lineNumber":2,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":3,"author":{"gitId":"amanda-chua"},"content":"import athena.commands.AddCommand;"},{"lineNumber":4,"author":{"gitId":"amanda-chua"},"content":"import athena.commands.Command;"},{"lineNumber":5,"author":{"gitId":"amanda-chua"},"content":"import athena.commands.DeleteCommand;"},{"lineNumber":6,"author":{"gitId":"amanda-chua"},"content":"import athena.commands.DoneCommand;"},{"lineNumber":7,"author":{"gitId":"amanda-chua"},"content":"import athena.commands.EditCommand;"},{"lineNumber":8,"author":{"gitId":"amanda-chua"},"content":"import athena.commands.ExitCommand;"},{"lineNumber":9,"author":{"gitId":"amanda-chua"},"content":"import athena.commands.HelpCommand;"},{"lineNumber":10,"author":{"gitId":"amanda-chua"},"content":"import athena.commands.ListCommand;"},{"lineNumber":11,"author":{"gitId":"amanda-chua"},"content":"import athena.commands.ViewCommand;"},{"lineNumber":12,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.InvalidForecastException;"},{"lineNumber":13,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.InvalidImportanceException;"},{"lineNumber":14,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":15,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.InvalidCommandException;"},{"lineNumber":16,"author":{"gitId":"alstontham"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":17,"author":{"gitId":"alstontham"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":19,"author":{"gitId":"daniellimws"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":20,"author":{"gitId":"daniellimws"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":21,"author":{"gitId":"daniellimws"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":22,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":23,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"alstontham"},"content":" * Tests method of the Parser class."},{"lineNumber":25,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":26,"author":{"gitId":"alstontham"},"content":"class ParserTest {"},{"lineNumber":27,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":28,"author":{"gitId":"alstontham"},"content":"    private Parser parser;"},{"lineNumber":29,"author":{"gitId":"alstontham"},"content":"    private TaskList taskList;"},{"lineNumber":30,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":31,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"alstontham"},"content":"     * Creates a new Parser and TaskList object before running each test."},{"lineNumber":33,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"alstontham"},"content":"    @BeforeEach"},{"lineNumber":35,"author":{"gitId":"alstontham"},"content":"    public void setUp() {"},{"lineNumber":36,"author":{"gitId":"alstontham"},"content":"        taskList \u003d new TaskList();"},{"lineNumber":37,"author":{"gitId":"amanda-chua"},"content":"        parser \u003d new Parser();"},{"lineNumber":38,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":40,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"alstontham"},"content":"     * Checks if an exception is thrown if the user enters an invalid command."},{"lineNumber":42,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"alstontham"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"alstontham"},"content":"    public void parse_unknownCommandWord_throwsException() {"},{"lineNumber":45,"author":{"gitId":"alstontham"},"content":"        final String input \u003d \"unknown arguments\";"},{"lineNumber":46,"author":{"gitId":"alstontham"},"content":"        assertThrows(InvalidCommandException.class, () -\u003e {"},{"lineNumber":47,"author":{"gitId":"alstontham"},"content":"            parseAndAssertCommandType(input, Command.class);"},{"lineNumber":48,"author":{"gitId":"alstontham"},"content":"        });"},{"lineNumber":49,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":51,"author":{"gitId":"alstontham"},"content":"    /*"},{"lineNumber":52,"author":{"gitId":"alstontham"},"content":"     * Tests for 0-argument commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":55,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"alstontham"},"content":"     * Checks if the help command is shown if the user types \"help\"."},{"lineNumber":57,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"alstontham"},"content":"     * @throws CommandException Exception thrown if there is an error with the user entered command"},{"lineNumber":59,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"alstontham"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"alstontham"},"content":"    public void parse_helpCommand_parsedCorrectly() throws CommandException {"},{"lineNumber":62,"author":{"gitId":"alstontham"},"content":"        final String input \u003d \"help\";"},{"lineNumber":63,"author":{"gitId":"alstontham"},"content":"        parseAndAssertCommandType(input, HelpCommand.class);"},{"lineNumber":64,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":66,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"alstontham"},"content":"     * Checks if the program exits if the user types \"exit\"."},{"lineNumber":68,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"alstontham"},"content":"     * @throws CommandException Exception thrown if there is an error with the user entered command"},{"lineNumber":70,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"alstontham"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"alstontham"},"content":"    public void parse_exitCommand_parsedCorrectly() throws CommandException {"},{"lineNumber":73,"author":{"gitId":"alstontham"},"content":"        final String input \u003d \"exit\";"},{"lineNumber":74,"author":{"gitId":"alstontham"},"content":"        parseAndAssertCommandType(input, ExitCommand.class);"},{"lineNumber":75,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":77,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"amanda-chua"},"content":"     * Checks if the program exits if the user types \"ex\"."},{"lineNumber":79,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"amanda-chua"},"content":"     * @throws CommandException Exception thrown if there is an error with the user entered command"},{"lineNumber":81,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"amanda-chua"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"amanda-chua"},"content":"    public void parse_exitShortcutCommand_parsedCorrectly() throws CommandException {"},{"lineNumber":84,"author":{"gitId":"amanda-chua"},"content":"        final String input \u003d \"ex\";"},{"lineNumber":85,"author":{"gitId":"amanda-chua"},"content":"        parseAndAssertCommandType(input, ExitCommand.class);"},{"lineNumber":86,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":88,"author":{"gitId":"alstontham"},"content":"    /*"},{"lineNumber":89,"author":{"gitId":"alstontham"},"content":"     * Tests for single index argument commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":90,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":92,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"alstontham"},"content":"     * Checks if the program deletes the correct task at index 1."},{"lineNumber":94,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"alstontham"},"content":"     * @throws CommandException Exception thrown if there is an error with the user entered command"},{"lineNumber":96,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"alstontham"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"alstontham"},"content":"    public void parse_deleteCommandNumericArg_indexParsedCorrectly() throws CommandException {"},{"lineNumber":99,"author":{"gitId":"alstontham"},"content":"        final int testNumber \u003d 1;"},{"lineNumber":100,"author":{"gitId":"alstontham"},"content":"        final String input \u003d \"delete 1\";"},{"lineNumber":101,"author":{"gitId":"alstontham"},"content":"        final DeleteCommand parsedCommand \u003d parseAndAssertCommandType(input, DeleteCommand.class);"},{"lineNumber":102,"author":{"gitId":"alstontham"},"content":"        final DeleteCommand expectedCommand \u003d new DeleteCommand(testNumber);"},{"lineNumber":103,"author":{"gitId":"alstontham"},"content":"        assertEquals(parsedCommand, expectedCommand);"},{"lineNumber":104,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":106,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"amanda-chua"},"content":"     * Checks if the program deletes the correct task at index 1."},{"lineNumber":108,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"amanda-chua"},"content":"     * @throws CommandException Exception thrown if there is an error with the user entered command"},{"lineNumber":110,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"amanda-chua"},"content":"    @Test"},{"lineNumber":112,"author":{"gitId":"amanda-chua"},"content":"    public void parse_deleteShortcutCommandNumericArg_indexParsedCorrectly() throws CommandException {"},{"lineNumber":113,"author":{"gitId":"amanda-chua"},"content":"        final int testNumber \u003d 1;"},{"lineNumber":114,"author":{"gitId":"amanda-chua"},"content":"        final String input \u003d \"dl 1\";"},{"lineNumber":115,"author":{"gitId":"amanda-chua"},"content":"        final DeleteCommand parsedCommand \u003d parseAndAssertCommandType(input, DeleteCommand.class);"},{"lineNumber":116,"author":{"gitId":"amanda-chua"},"content":"        final DeleteCommand expectedCommand \u003d new DeleteCommand(testNumber);"},{"lineNumber":117,"author":{"gitId":"amanda-chua"},"content":"        assertEquals(parsedCommand, expectedCommand);"},{"lineNumber":118,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":120,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"alstontham"},"content":"     * Checks if the program marks the task at index 1 as done."},{"lineNumber":122,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":123,"author":{"gitId":"alstontham"},"content":"     * @throws CommandException Exception thrown if there is an error with the user entered command"},{"lineNumber":124,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"alstontham"},"content":"    @Test"},{"lineNumber":126,"author":{"gitId":"alstontham"},"content":"    public void parse_doneCommandNumericArg_indexParsedCorrectly() throws CommandException {"},{"lineNumber":127,"author":{"gitId":"alstontham"},"content":"        final int testNumber \u003d 1;"},{"lineNumber":128,"author":{"gitId":"alstontham"},"content":"        final String input \u003d \"done 1\";"},{"lineNumber":129,"author":{"gitId":"alstontham"},"content":"        final DoneCommand parsedCommand \u003d parseAndAssertCommandType(input, DoneCommand.class);"},{"lineNumber":130,"author":{"gitId":"alstontham"},"content":"        final DoneCommand expectedCommand \u003d new DoneCommand(testNumber);"},{"lineNumber":131,"author":{"gitId":"alstontham"},"content":"        assertEquals(parsedCommand, expectedCommand);"},{"lineNumber":132,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":134,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"amanda-chua"},"content":"     * Checks if the program marks the task at index 1 as done."},{"lineNumber":136,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":137,"author":{"gitId":"amanda-chua"},"content":"     * @throws CommandException Exception thrown if there is an error with the user entered command"},{"lineNumber":138,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"amanda-chua"},"content":"    @Test"},{"lineNumber":140,"author":{"gitId":"amanda-chua"},"content":"    public void parse_doneShortcutCommandNumericArg_indexParsedCorrectly() throws CommandException {"},{"lineNumber":141,"author":{"gitId":"amanda-chua"},"content":"        final int testNumber \u003d 1;"},{"lineNumber":142,"author":{"gitId":"amanda-chua"},"content":"        final String input \u003d \"dn 1\";"},{"lineNumber":143,"author":{"gitId":"amanda-chua"},"content":"        final DoneCommand parsedCommand \u003d parseAndAssertCommandType(input, DoneCommand.class);"},{"lineNumber":144,"author":{"gitId":"amanda-chua"},"content":"        final DoneCommand expectedCommand \u003d new DoneCommand(testNumber);"},{"lineNumber":145,"author":{"gitId":"amanda-chua"},"content":"        assertEquals(parsedCommand, expectedCommand);"},{"lineNumber":146,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":148,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"amanda-chua"},"content":"     * Checks if the program displays the details of task at index 1."},{"lineNumber":150,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":151,"author":{"gitId":"amanda-chua"},"content":"     * @throws CommandException Exception thrown if there is an error with the user entered command"},{"lineNumber":152,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"amanda-chua"},"content":"    @Test"},{"lineNumber":154,"author":{"gitId":"amanda-chua"},"content":"    public void parse_viewCommandNumericArg_indexParsedCorrectly() throws CommandException {"},{"lineNumber":155,"author":{"gitId":"amanda-chua"},"content":"        final int testNumber \u003d 1;"},{"lineNumber":156,"author":{"gitId":"amanda-chua"},"content":"        final String input \u003d \"view 1\";"},{"lineNumber":157,"author":{"gitId":"amanda-chua"},"content":"        final ViewCommand parsedCommand \u003d parseAndAssertCommandType(input, ViewCommand.class);"},{"lineNumber":158,"author":{"gitId":"amanda-chua"},"content":"        final ViewCommand expectedCommand \u003d new ViewCommand(testNumber);"},{"lineNumber":159,"author":{"gitId":"amanda-chua"},"content":"        assertEquals(parsedCommand, expectedCommand);"},{"lineNumber":160,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":162,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"amanda-chua"},"content":"     * Checks if the program displays the details of task at index 1."},{"lineNumber":164,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":165,"author":{"gitId":"amanda-chua"},"content":"     * @throws CommandException Exception thrown if there is an error with the user entered command"},{"lineNumber":166,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":167,"author":{"gitId":"amanda-chua"},"content":"    @Test"},{"lineNumber":168,"author":{"gitId":"amanda-chua"},"content":"    public void parse_viewShortcutCommandNumericArg_indexParsedCorrectly() throws CommandException {"},{"lineNumber":169,"author":{"gitId":"amanda-chua"},"content":"        final int testNumber \u003d 1;"},{"lineNumber":170,"author":{"gitId":"amanda-chua"},"content":"        final String input \u003d \"v 1\";"},{"lineNumber":171,"author":{"gitId":"amanda-chua"},"content":"        final ViewCommand parsedCommand \u003d parseAndAssertCommandType(input, ViewCommand.class);"},{"lineNumber":172,"author":{"gitId":"amanda-chua"},"content":"        final ViewCommand expectedCommand \u003d new ViewCommand(testNumber);"},{"lineNumber":173,"author":{"gitId":"amanda-chua"},"content":"        assertEquals(parsedCommand, expectedCommand);"},{"lineNumber":174,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":176,"author":{"gitId":"alstontham"},"content":"    /*"},{"lineNumber":177,"author":{"gitId":"alstontham"},"content":"     * Tests for multiple argument commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":178,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":179,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":180,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":181,"author":{"gitId":"alstontham"},"content":"     * Checks if the program adds a task correctly."},{"lineNumber":182,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":183,"author":{"gitId":"alstontham"},"content":"     * @throws CommandException Exception thrown if there is an error with the user entered command"},{"lineNumber":184,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":185,"author":{"gitId":"alstontham"},"content":"    @Test"},{"lineNumber":186,"author":{"gitId":"amanda-chua"},"content":"    public void parse_addCommandArg_parsedCorrectly() throws CommandException {"},{"lineNumber":187,"author":{"gitId":"alstontham"},"content":"        final String input \u003d \"add n/Assignment1 t/1100 D/16-09-2020 d/2 hours r/Monday i/high a/Refer to slides\";"},{"lineNumber":188,"author":{"gitId":"alstontham"},"content":"        final AddCommand parsedCommand \u003d parseAndAssertCommandType(input, AddCommand.class);"},{"lineNumber":189,"author":{"gitId":"alstontham"},"content":"        final AddCommand expectedCommand \u003d new AddCommand(\"Assignment1\", \"1100\","},{"lineNumber":190,"author":{"gitId":"daniellimws"},"content":"                \"2 hours\", \"16-09-2020\", \"Monday\", Importance.HIGH,"},{"lineNumber":191,"author":{"gitId":"Kafcis"},"content":"                \"Refer to slides\", false);"},{"lineNumber":192,"author":{"gitId":"alstontham"},"content":"        assertEquals(parsedCommand, expectedCommand);"},{"lineNumber":193,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":195,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":196,"author":{"gitId":"amanda-chua"},"content":"     * Checks if the program adds a task correctly."},{"lineNumber":197,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":198,"author":{"gitId":"amanda-chua"},"content":"     * @throws CommandException Exception thrown if there is an error with the user entered command"},{"lineNumber":199,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":200,"author":{"gitId":"amanda-chua"},"content":"    @Test"},{"lineNumber":201,"author":{"gitId":"amanda-chua"},"content":"    public void parse_addShortcutCommandArg_parsedCorrectly() throws CommandException {"},{"lineNumber":202,"author":{"gitId":"amanda-chua"},"content":"        final String input \u003d \"a n/Assignment1 t/1100 D/16-09-2020 d/2 hours r/Monday i/high a/Refer to slides\";"},{"lineNumber":203,"author":{"gitId":"amanda-chua"},"content":"        final AddCommand parsedCommand \u003d parseAndAssertCommandType(input, AddCommand.class);"},{"lineNumber":204,"author":{"gitId":"amanda-chua"},"content":"        final AddCommand expectedCommand \u003d new AddCommand(\"Assignment1\", \"1100\","},{"lineNumber":205,"author":{"gitId":"daniellimws"},"content":"                \"2 hours\", \"16-09-2020\", \"Monday\", Importance.HIGH,"},{"lineNumber":206,"author":{"gitId":"amanda-chua"},"content":"                \"Refer to slides\", false);"},{"lineNumber":207,"author":{"gitId":"amanda-chua"},"content":"        assertEquals(parsedCommand, expectedCommand);"},{"lineNumber":208,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":209,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":210,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":211,"author":{"gitId":"alstontham"},"content":"     * Checks if the program edits a task correctly."},{"lineNumber":212,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":213,"author":{"gitId":"alstontham"},"content":"     * @throws CommandException Exception thrown if there is an error with the user entered command"},{"lineNumber":214,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":215,"author":{"gitId":"alstontham"},"content":"    @Test"},{"lineNumber":216,"author":{"gitId":"amanda-chua"},"content":"    public void parse_editCommandAllArg_parsedCorrectly() throws CommandException {"},{"lineNumber":217,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(\"name\", \"1600\", \"1\", \"No deadline\","},{"lineNumber":218,"author":{"gitId":"wish2023"},"content":"                \"12-10-2021\", Importance.LOW, \"dummyNote\", false);"},{"lineNumber":219,"author":{"gitId":"alstontham"},"content":"        final int testNumber \u003d 0;"},{"lineNumber":220,"author":{"gitId":"wish2023"},"content":"        final String input \u003d \"edit 0 n/Assignment1 t/1100 D/16-09-2021 d/2 r/13-10-2021 i/high a/Refer to slides\";"},{"lineNumber":221,"author":{"gitId":"alstontham"},"content":"        final EditCommand parsedCommand \u003d parseAndAssertCommandType(input, EditCommand.class);"},{"lineNumber":222,"author":{"gitId":"alstontham"},"content":"        final EditCommand expectedCommand \u003d new EditCommand(testNumber, \"Assignment1\", \"1100\","},{"lineNumber":223,"author":{"gitId":"wish2023"},"content":"                \"2\", \"16-09-2021\", \"13-10-2021\", Importance.valueOf(\"high\".toUpperCase()),"},{"lineNumber":224,"author":{"gitId":"alstontham"},"content":"                \"Refer to slides\");"},{"lineNumber":225,"author":{"gitId":"alstontham"},"content":"        assertEquals(parsedCommand, expectedCommand);"},{"lineNumber":226,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":228,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":229,"author":{"gitId":"amanda-chua"},"content":"     * Checks if the program edits a task correctly."},{"lineNumber":230,"author":{"gitId":"amanda-chua"},"content":"     * @throws CommandException Exception thrown if there is an error with the user entered command"},{"lineNumber":231,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":232,"author":{"gitId":"amanda-chua"},"content":"    @Test"},{"lineNumber":233,"author":{"gitId":"amanda-chua"},"content":"    public void parse_editShortcutCommandAllArg_parsedCorrectly() throws CommandException {"},{"lineNumber":234,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(\"name\", \"1600\", \"2\", \"No deadline\","},{"lineNumber":235,"author":{"gitId":"wish2023"},"content":"                \"12-10-2021\", Importance.LOW, \"dummyNote\", false);"},{"lineNumber":236,"author":{"gitId":"alstontham"},"content":"        final int testNumber \u003d 0;"},{"lineNumber":237,"author":{"gitId":"wish2023"},"content":"        final String input \u003d \"e 0 n/Assignment1 t/1100 D/16-09-2021 d/2 hours r/13-10-2021 i/high a/Refer to slides\";"},{"lineNumber":238,"author":{"gitId":"alstontham"},"content":"        final EditCommand parsedCommand \u003d parseAndAssertCommandType(input, EditCommand.class);"},{"lineNumber":239,"author":{"gitId":"alstontham"},"content":"        final EditCommand expectedCommand \u003d new EditCommand(testNumber,\"Assignment1\", \"1100\","},{"lineNumber":240,"author":{"gitId":"wish2023"},"content":"                \"2 hours\", \"16-09-2021\", \"13-10-2021\", Importance.valueOf(\"high\".toUpperCase()),"},{"lineNumber":241,"author":{"gitId":"alstontham"},"content":"                \"Refer to slides\");"},{"lineNumber":242,"author":{"gitId":"alstontham"},"content":"        assertEquals(parsedCommand, expectedCommand);"},{"lineNumber":243,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":244,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":245,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":246,"author":{"gitId":"alstontham"},"content":"     * Checks if the program edits a task correctly with fewer parameters."},{"lineNumber":247,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":248,"author":{"gitId":"alstontham"},"content":"     * @throws CommandException Exception thrown if there is an error with the user entered command"},{"lineNumber":249,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":250,"author":{"gitId":"alstontham"},"content":"    @Test"},{"lineNumber":251,"author":{"gitId":"amanda-chua"},"content":"    public void parse_editCommandSomeArg_parsedCorrectly() throws CommandException {"},{"lineNumber":252,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(\"name\", \"1600\", \"2\", \"No deadline\","},{"lineNumber":253,"author":{"gitId":"wish2023"},"content":"                \"12-10-2021\", Importance.LOW, \"dummyNote\", false);"},{"lineNumber":254,"author":{"gitId":"alstontham"},"content":"        final int testNumber \u003d 0;"},{"lineNumber":255,"author":{"gitId":"alstontham"},"content":"        final String input \u003d \"edit 0 n/I have changed a/I am not filling any other arguments\";"},{"lineNumber":256,"author":{"gitId":"alstontham"},"content":"        final EditCommand parsedCommand \u003d parseAndAssertCommandType(input, EditCommand.class);"},{"lineNumber":257,"author":{"gitId":"daniellimws"},"content":"        final EditCommand expectedCommand \u003d new EditCommand(testNumber, \"I have changed\", \"1600\","},{"lineNumber":258,"author":{"gitId":"daniellimws"},"content":"                \"2\", \"No deadline\", \"12-10-2021\", Importance.LOW,"},{"lineNumber":259,"author":{"gitId":"alstontham"},"content":"                \"I am not filling any other arguments\");"},{"lineNumber":260,"author":{"gitId":"alstontham"},"content":"        assertEquals(parsedCommand, expectedCommand);"},{"lineNumber":261,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":262,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":263,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":264,"author":{"gitId":"alstontham"},"content":"     * Checks if an exception is thrown when the user provides invalid parameters for the edit command."},{"lineNumber":265,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":266,"author":{"gitId":"daniellimws"},"content":"    @Test"},{"lineNumber":267,"author":{"gitId":"alstontham"},"content":"    public void parse_editCommandBadArg_throwsException() {"},{"lineNumber":268,"author":{"gitId":"daniellimws"},"content":"        final String input \u003d \"edit abcde\";"},{"lineNumber":269,"author":{"gitId":"daniellimws"},"content":"        assertThrows(CommandException.class, () -\u003e {"},{"lineNumber":270,"author":{"gitId":"daniellimws"},"content":"            parseAndAssertCommandType(input, EditCommand.class);"},{"lineNumber":271,"author":{"gitId":"daniellimws"},"content":"        });"},{"lineNumber":272,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":273,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":274,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":275,"author":{"gitId":"alstontham"},"content":"     * Another case to check if an exception is thrown when the user provides invalid parameters for the edit command."},{"lineNumber":276,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":277,"author":{"gitId":"daniellimws"},"content":"    @Test"},{"lineNumber":278,"author":{"gitId":"alstontham"},"content":"    public void parse_editCommandBadArg2_throwsException() {"},{"lineNumber":279,"author":{"gitId":"daniellimws"},"content":"        final String input \u003d \"edit 1a/\";"},{"lineNumber":280,"author":{"gitId":"daniellimws"},"content":"        assertThrows(CommandException.class, () -\u003e {"},{"lineNumber":281,"author":{"gitId":"daniellimws"},"content":"            parseAndAssertCommandType(input, EditCommand.class);"},{"lineNumber":282,"author":{"gitId":"daniellimws"},"content":"        });"},{"lineNumber":283,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":284,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":285,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":286,"author":{"gitId":"alstontham"},"content":"     * Third case to check if an exception is thrown when the user provides invalid parameters for the edit command."},{"lineNumber":287,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":288,"author":{"gitId":"daniellimws"},"content":"    @Test"},{"lineNumber":289,"author":{"gitId":"alstontham"},"content":"    public void parse_editCommandBadArg3_throwsException() {"},{"lineNumber":290,"author":{"gitId":"daniellimws"},"content":"        final String input \u003d \"edit 1 n/n/\";"},{"lineNumber":291,"author":{"gitId":"daniellimws"},"content":"        assertThrows(CommandException.class, () -\u003e {"},{"lineNumber":292,"author":{"gitId":"daniellimws"},"content":"            parseAndAssertCommandType(input, EditCommand.class);"},{"lineNumber":293,"author":{"gitId":"daniellimws"},"content":"        });"},{"lineNumber":294,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":295,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":296,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":297,"author":{"gitId":"amanda-chua"},"content":"     * Checks if an exception is thrown when the user provides invalid parameters for the view command."},{"lineNumber":298,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":299,"author":{"gitId":"alstontham"},"content":"    @Test"},{"lineNumber":300,"author":{"gitId":"amanda-chua"},"content":"    public void parse_viewCommandBadArg_throwsException() {"},{"lineNumber":301,"author":{"gitId":"amanda-chua"},"content":"        final String input \u003d \"view abcde\";"},{"lineNumber":302,"author":{"gitId":"amanda-chua"},"content":"        assertThrows(CommandException.class, () -\u003e {"},{"lineNumber":303,"author":{"gitId":"amanda-chua"},"content":"            parseAndAssertCommandType(input, ViewCommand.class);"},{"lineNumber":304,"author":{"gitId":"amanda-chua"},"content":"        });"},{"lineNumber":305,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":306,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":307,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":308,"author":{"gitId":"amanda-chua"},"content":"     * Checks if an exception is thrown when the user provides invalid parameters for the done command."},{"lineNumber":309,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":310,"author":{"gitId":"amanda-chua"},"content":"    @Test"},{"lineNumber":311,"author":{"gitId":"amanda-chua"},"content":"    public void parse_doneCommandBadArg_throwsException() {"},{"lineNumber":312,"author":{"gitId":"amanda-chua"},"content":"        final String input \u003d \"done abcde\";"},{"lineNumber":313,"author":{"gitId":"amanda-chua"},"content":"        assertThrows(CommandException.class, () -\u003e {"},{"lineNumber":314,"author":{"gitId":"amanda-chua"},"content":"            parseAndAssertCommandType(input, DoneCommand.class);"},{"lineNumber":315,"author":{"gitId":"amanda-chua"},"content":"        });"},{"lineNumber":316,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":317,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":318,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":319,"author":{"gitId":"amanda-chua"},"content":"     * Checks if an exception is thrown when the user provides invalid parameters for the delete command."},{"lineNumber":320,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":321,"author":{"gitId":"amanda-chua"},"content":"    @Test"},{"lineNumber":322,"author":{"gitId":"amanda-chua"},"content":"    public void parse_deleteCommandBadArg_throwsException() {"},{"lineNumber":323,"author":{"gitId":"amanda-chua"},"content":"        final String input \u003d \"delete abcde\";"},{"lineNumber":324,"author":{"gitId":"amanda-chua"},"content":"        assertThrows(CommandException.class, () -\u003e {"},{"lineNumber":325,"author":{"gitId":"amanda-chua"},"content":"            parseAndAssertCommandType(input, DeleteCommand.class);"},{"lineNumber":326,"author":{"gitId":"amanda-chua"},"content":"        });"},{"lineNumber":327,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":328,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":329,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":330,"author":{"gitId":"amanda-chua"},"content":"     * Checks if lists out tasks properly with two specified parameters."},{"lineNumber":331,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":332,"author":{"gitId":"alstontham"},"content":"    @Test"},{"lineNumber":333,"author":{"gitId":"amanda-chua"},"content":"    public void parse_listCommandArg_parsedCorrectly() throws CommandException {"},{"lineNumber":334,"author":{"gitId":"alstontham"},"content":"        final String input \u003d \"list f/WEEK i/medium\";"},{"lineNumber":335,"author":{"gitId":"alstontham"},"content":"        final ListCommand parsedCommand \u003d parseAndAssertCommandType(input, ListCommand.class);"},{"lineNumber":336,"author":{"gitId":"alstontham"},"content":"        final ListCommand expectedCommand \u003d new ListCommand(Importance.MEDIUM, Forecast.WEEK);"},{"lineNumber":337,"author":{"gitId":"alstontham"},"content":"        assertEquals(parsedCommand, expectedCommand);"},{"lineNumber":338,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":339,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":340,"author":{"gitId":"daniellimws"},"content":"    @Test"},{"lineNumber":341,"author":{"gitId":"daniellimws"},"content":"    public void parse_listCommandBadImportanceNumber_throwsException() {"},{"lineNumber":342,"author":{"gitId":"daniellimws"},"content":"        final String input \u003d \"list i/-12345\";"},{"lineNumber":343,"author":{"gitId":"daniellimws"},"content":"        assertThrows(InvalidImportanceException.class, () -\u003e {"},{"lineNumber":344,"author":{"gitId":"daniellimws"},"content":"            parseAndAssertCommandType(input, DeleteCommand.class);"},{"lineNumber":345,"author":{"gitId":"daniellimws"},"content":"        });"},{"lineNumber":346,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":347,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":348,"author":{"gitId":"daniellimws"},"content":"    @Test"},{"lineNumber":349,"author":{"gitId":"daniellimws"},"content":"    public void parse_listCommandBadImportanceAlphabet_throwsException() {"},{"lineNumber":350,"author":{"gitId":"daniellimws"},"content":"        final String input \u003d \"list i/abcde\";"},{"lineNumber":351,"author":{"gitId":"daniellimws"},"content":"        assertThrows(InvalidImportanceException.class, () -\u003e {"},{"lineNumber":352,"author":{"gitId":"daniellimws"},"content":"            parseAndAssertCommandType(input, ListCommand.class);"},{"lineNumber":353,"author":{"gitId":"daniellimws"},"content":"        });"},{"lineNumber":354,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":355,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":356,"author":{"gitId":"daniellimws"},"content":"    @Test"},{"lineNumber":357,"author":{"gitId":"daniellimws"},"content":"    public void parse_listCommandBadForecastNumber_throwsException() {"},{"lineNumber":358,"author":{"gitId":"daniellimws"},"content":"        final String input \u003d \"list f/-12345\";"},{"lineNumber":359,"author":{"gitId":"daniellimws"},"content":"        assertThrows(InvalidForecastException.class, () -\u003e {"},{"lineNumber":360,"author":{"gitId":"daniellimws"},"content":"            parseAndAssertCommandType(input, ListCommand.class);"},{"lineNumber":361,"author":{"gitId":"daniellimws"},"content":"        });"},{"lineNumber":362,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":363,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":364,"author":{"gitId":"daniellimws"},"content":"    @Test"},{"lineNumber":365,"author":{"gitId":"daniellimws"},"content":"    public void parse_listCommandBadForecastAlphabet_throwsException() {"},{"lineNumber":366,"author":{"gitId":"daniellimws"},"content":"        final String input \u003d \"list f/abcde\";"},{"lineNumber":367,"author":{"gitId":"daniellimws"},"content":"        assertThrows(InvalidForecastException.class, () -\u003e {"},{"lineNumber":368,"author":{"gitId":"daniellimws"},"content":"            parseAndAssertCommandType(input, ListCommand.class);"},{"lineNumber":369,"author":{"gitId":"daniellimws"},"content":"        });"},{"lineNumber":370,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":371,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":372,"author":{"gitId":"alstontham"},"content":"    /*"},{"lineNumber":373,"author":{"gitId":"alstontham"},"content":"     * Utility methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":374,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":375,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":376,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":377,"author":{"gitId":"alstontham"},"content":"     * Parses input and asserts the class of the returned command object."},{"lineNumber":378,"author":{"gitId":"alstontham"},"content":"     *"},{"lineNumber":379,"author":{"gitId":"alstontham"},"content":"     * @param input                to be parsed"},{"lineNumber":380,"author":{"gitId":"alstontham"},"content":"     * @param expectedCommandClass expected class of returned command"},{"lineNumber":381,"author":{"gitId":"alstontham"},"content":"     * @return the parsed command object"},{"lineNumber":382,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":383,"author":{"gitId":"alstontham"},"content":"    private \u003cT extends Command\u003e T parseAndAssertCommandType(String input, Class\u003cT\u003e expectedCommandClass)"},{"lineNumber":384,"author":{"gitId":"alstontham"},"content":"            throws CommandException {"},{"lineNumber":385,"author":{"gitId":"alstontham"},"content":"        final Command result \u003d parser.parse(input, taskList);"},{"lineNumber":386,"author":{"gitId":"alstontham"},"content":"        assertTrue(result.getClass().isAssignableFrom(expectedCommandClass));"},{"lineNumber":387,"author":{"gitId":"alstontham"},"content":"        return (T) result;"},{"lineNumber":388,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":389,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":390,"author":{"gitId":"alstontham"},"content":"}"}],"authorContributionMap":{"alstontham":175,"Kafcis":9,"amanda-chua":133,"daniellimws":63,"wish2023":10}},{"path":"src/test/java/athena/StorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Kafcis"},"content":"package athena;"},{"lineNumber":2,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.ClashInTaskException;"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.storage.StorageException;"},{"lineNumber":6,"author":{"gitId":"Kafcis"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":8,"author":{"gitId":"Kafcis"},"content":"import java.io.BufferedReader;"},{"lineNumber":9,"author":{"gitId":"Kafcis"},"content":"import java.io.FileReader;"},{"lineNumber":10,"author":{"gitId":"Kafcis"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":12,"author":{"gitId":"daniellimws"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":13,"author":{"gitId":"Kafcis"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":14,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":15,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"alstontham"},"content":" * Tests Storage methods."},{"lineNumber":17,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":18,"author":{"gitId":"Kafcis"},"content":"class StorageTest {"},{"lineNumber":19,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":20,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"alstontham"},"content":"     * Checks if a save file is created correctly if a save file doesn\u0027t originally exist."},{"lineNumber":22,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Kafcis"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"daniellimws"},"content":"    void saveTaskListData_noPreviousSave_createSaveFile() throws CommandException {"},{"lineNumber":25,"author":{"gitId":"Kafcis"},"content":"        TaskList taskList \u003d null;"},{"lineNumber":26,"author":{"gitId":"Kafcis"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"Kafcis"},"content":"            taskList \u003d TestSetup.getTestTaskList();"},{"lineNumber":28,"author":{"gitId":"Kafcis"},"content":"        } catch (ClashInTaskException e) {"},{"lineNumber":29,"author":{"gitId":"Kafcis"},"content":"            assert false;"},{"lineNumber":30,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"Kafcis"},"content":"        Storage storage \u003d new Storage(\"src/test/java/athena/loadTask.csv\");"},{"lineNumber":32,"author":{"gitId":"daniellimws"},"content":"        storage.saveTaskListData(taskList);"},{"lineNumber":33,"author":{"gitId":"Kafcis"},"content":"        assertTrue(areFilesSame(\"src/test/java/athena/loadTask.csv\", \"src/test/java/athena/StorageTestAnswer1.csv\"));"},{"lineNumber":34,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":36,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"alstontham"},"content":"     * Checks if two save files are the same based on their contents."},{"lineNumber":38,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"alstontham"},"content":"     * @param file1 First file"},{"lineNumber":40,"author":{"gitId":"alstontham"},"content":"     * @param file2 Second file"},{"lineNumber":41,"author":{"gitId":"alstontham"},"content":"     * @return True or false depending on if the files are the same"},{"lineNumber":42,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Kafcis"},"content":"    private boolean areFilesSame(String file1, String file2) {"},{"lineNumber":44,"author":{"gitId":"Kafcis"},"content":"        BufferedReader expected \u003d null;"},{"lineNumber":45,"author":{"gitId":"Kafcis"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"Kafcis"},"content":"            expected \u003d new BufferedReader(new FileReader(file1));"},{"lineNumber":47,"author":{"gitId":"Kafcis"},"content":"            BufferedReader actual \u003d new BufferedReader(new FileReader(file2));"},{"lineNumber":48,"author":{"gitId":"Kafcis"},"content":"            String expectedLine \u003d expected.readLine();"},{"lineNumber":49,"author":{"gitId":"Kafcis"},"content":"            String actualLine \u003d actual.readLine();"},{"lineNumber":50,"author":{"gitId":"Kafcis"},"content":"            while ((expectedLine !\u003d null) || (actualLine !\u003d null)) {"},{"lineNumber":51,"author":{"gitId":"Kafcis"},"content":"                assert expectedLine !\u003d null;"},{"lineNumber":52,"author":{"gitId":"Kafcis"},"content":"                if (!expectedLine.contentEquals(actualLine)) {"},{"lineNumber":53,"author":{"gitId":"Kafcis"},"content":"                    return false;"},{"lineNumber":54,"author":{"gitId":"Kafcis"},"content":"                }"},{"lineNumber":55,"author":{"gitId":"Kafcis"},"content":"                expectedLine \u003d expected.readLine();"},{"lineNumber":56,"author":{"gitId":"Kafcis"},"content":"                actualLine \u003d actual.readLine();"},{"lineNumber":57,"author":{"gitId":"Kafcis"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"Kafcis"},"content":"            return true;"},{"lineNumber":59,"author":{"gitId":"Kafcis"},"content":"        } catch (IOException e) {"},{"lineNumber":60,"author":{"gitId":"Kafcis"},"content":"            return false;"},{"lineNumber":61,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":64,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"alstontham"},"content":"     * Checks if the program is able to load a save file correctly."},{"lineNumber":66,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"Kafcis"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"daniellimws"},"content":"    void loadTaskListData_saveFileFound_createTaskList() throws CommandException {"},{"lineNumber":69,"author":{"gitId":"Kafcis"},"content":"        Storage storage \u003d new Storage(\"src/test/java/athena/StorageTestAnswer1.csv\");"},{"lineNumber":70,"author":{"gitId":"Kafcis"},"content":"        TaskList taskList \u003d null;"},{"lineNumber":71,"author":{"gitId":"Kafcis"},"content":"        try {"},{"lineNumber":72,"author":{"gitId":"daniellimws"},"content":"            taskList \u003d storage.loadTaskListData();"},{"lineNumber":73,"author":{"gitId":"Kafcis"},"content":"        } catch (StorageException e) {"},{"lineNumber":74,"author":{"gitId":"Kafcis"},"content":"            assert false;"},{"lineNumber":75,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"daniellimws"},"content":"        TaskList tester \u003d TestSetup.getTestTaskList();"},{"lineNumber":77,"author":{"gitId":"daniellimws"},"content":"        assertTrue(tester.equals(taskList));"},{"lineNumber":78,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":80,"author":{"gitId":"Kafcis"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"daniellimws"},"content":"    void loadTaskListData_commaInTaskAttribute_commaIsReplaced() throws CommandException {"},{"lineNumber":82,"author":{"gitId":"Kafcis"},"content":"        Storage storage \u003d new Storage(\"src/test/java/athena/StorageTestAnswer2.csv\");"},{"lineNumber":83,"author":{"gitId":"Kafcis"},"content":"        TaskList taskList \u003d null;"},{"lineNumber":84,"author":{"gitId":"Kafcis"},"content":"        try {"},{"lineNumber":85,"author":{"gitId":"daniellimws"},"content":"            taskList \u003d storage.loadTaskListData();"},{"lineNumber":86,"author":{"gitId":"Kafcis"},"content":"        } catch (StorageException e) {"},{"lineNumber":87,"author":{"gitId":"Kafcis"},"content":"            assert false;"},{"lineNumber":88,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":90,"author":{"gitId":"Kafcis"},"content":"        TaskList tester \u003d null;"},{"lineNumber":91,"author":{"gitId":"Kafcis"},"content":"        try {"},{"lineNumber":92,"author":{"gitId":"Kafcis"},"content":"            tester \u003d TestSetup.getCommaTestTaskList();"},{"lineNumber":93,"author":{"gitId":"Kafcis"},"content":"        } catch (ClashInTaskException e) {"},{"lineNumber":94,"author":{"gitId":"Kafcis"},"content":"            assert false;"},{"lineNumber":95,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"daniellimws"},"content":"        assertTrue(tester.equals(taskList));"},{"lineNumber":97,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":98,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":100,"author":{"gitId":"daniellimws"},"content":"    @Test"},{"lineNumber":101,"author":{"gitId":"daniellimws"},"content":"    void loadTaskListData_scrambledTaskNumbers_correctMaxNumber() {"},{"lineNumber":102,"author":{"gitId":"Kafcis"},"content":"        Storage storage \u003d new Storage(\"src/test/java/athena/StorageMaxNumberTest.csv\");"},{"lineNumber":103,"author":{"gitId":"Kafcis"},"content":"        TaskList taskList \u003d null;"},{"lineNumber":104,"author":{"gitId":"Kafcis"},"content":"        try {"},{"lineNumber":105,"author":{"gitId":"daniellimws"},"content":"            taskList \u003d storage.loadTaskListData();"},{"lineNumber":106,"author":{"gitId":"Kafcis"},"content":"        } catch (StorageException e) {"},{"lineNumber":107,"author":{"gitId":"Kafcis"},"content":"            assert false;"},{"lineNumber":108,"author":{"gitId":"Kafcis"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"daniellimws"},"content":"        assertEquals(taskList.getMaxNumber(), 61);"},{"lineNumber":110,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"Kafcis"},"content":"}"}],"authorContributionMap":{"Kafcis":76,"alstontham":15,"daniellimws":20}},{"path":"src/test/java/athena/TestSetup.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena;"},{"lineNumber":2,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":4,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":" * Sets up a task list for testing classes."},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":" */"},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":"public class TestSetup {"},{"lineNumber":9,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":10,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"daniellimws"},"content":"     * Gets a task list filled with default tasks."},{"lineNumber":12,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"daniellimws"},"content":"     * @return Task list of default tasks"},{"lineNumber":14,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"daniellimws"},"content":"    public static TaskList getTestTaskList() throws CommandException {"},{"lineNumber":16,"author":{"gitId":"daniellimws"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":17,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(0, \"Assignment 1\", \"1600\", \"2\", \"01-01-2021\", \"12-12-2020\","},{"lineNumber":18,"author":{"gitId":"daniellimws"},"content":"                Importance.HIGH, \"Tough assignment\", false);"},{"lineNumber":19,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(1, \"Assignment 2\", \"1600\", \"2\", \"01-01-2021\", \"13-12-2020\","},{"lineNumber":20,"author":{"gitId":"daniellimws"},"content":"                Importance.MEDIUM, \"Tough assignment\", false);"},{"lineNumber":21,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(2, \"Assignment 3\", \"1000\", \"2\", \"01-01-2021\", \"14-12-2020\","},{"lineNumber":22,"author":{"gitId":"daniellimws"},"content":"                Importance.LOW, \"Tough assignment\", false);"},{"lineNumber":23,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(3, \"Assignment 4\", \"1300\", \"2\", \"01-01-2021\", \"14-12-2020\","},{"lineNumber":24,"author":{"gitId":"daniellimws"},"content":"                Importance.MEDIUM, \"Tough assignment\", false);"},{"lineNumber":25,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(4, \"Assignment 5\", \"1600\", \"2\", \"01-01-2021\", \"14-12-2020\","},{"lineNumber":26,"author":{"gitId":"daniellimws"},"content":"                Importance.HIGH, \"Tough assignment\", false);"},{"lineNumber":27,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(5, \"Assignment 6\", \"1600\", \"2\", \"01-01-2021\", \"15-12-2020\","},{"lineNumber":28,"author":{"gitId":"daniellimws"},"content":"                Importance.MEDIUM, \"Tough assignment\", false);"},{"lineNumber":29,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(6, \"Assignment 7\", \"1900\", \"2\", \"01-01-2021\", \"15-12-2020\","},{"lineNumber":30,"author":{"gitId":"daniellimws"},"content":"                Importance.HIGH, \"Tough assignment\", false);"},{"lineNumber":31,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(7, \"Assignment 8\", \"2100\", \"2\", \"01-01-2021\", \"15-12-2020\","},{"lineNumber":32,"author":{"gitId":"daniellimws"},"content":"                Importance.MEDIUM, \"Tough assignment\", false);"},{"lineNumber":33,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(8, \"Assignment 9\", \"1600\", \"2\", \"01-01-2021\", \"16-12-2020\","},{"lineNumber":34,"author":{"gitId":"daniellimws"},"content":"                Importance.LOW, \"Tough assignment\", false);"},{"lineNumber":35,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(9, \"Assignment 10\", \"1300\", \"2\", \"01-01-2021\", \"16-12-2020\","},{"lineNumber":36,"author":{"gitId":"daniellimws"},"content":"                Importance.MEDIUM, \"Tough assignment\", false);"},{"lineNumber":37,"author":{"gitId":"daniellimws"},"content":"        return taskList;"},{"lineNumber":38,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":40,"author":{"gitId":"daniellimws"},"content":"    public static TaskList getCommaTestTaskList() throws CommandException {"},{"lineNumber":41,"author":{"gitId":"daniellimws"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":42,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(0, \"Assignment,1\", \"1600\", \"2\", \"01-01-2021\", \"12-12-2020\","},{"lineNumber":43,"author":{"gitId":"daniellimws"},"content":"                Importance.HIGH, \"Tough assignment\", false);"},{"lineNumber":44,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(1, \"Assignment 2\", \"1600\", \"2\", \"01-01-2021\", \"13-12-2020\","},{"lineNumber":45,"author":{"gitId":"daniellimws"},"content":"                Importance.MEDIUM, \"Tough assignment,\", false);"},{"lineNumber":46,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(2, \"Assignment 3\", \"1000\", \"2\", \"01-01-2021\", \"14-12-2020\","},{"lineNumber":47,"author":{"gitId":"daniellimws"},"content":"                Importance.LOW, \"Tough ,,,assignment\", false);"},{"lineNumber":48,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(3, \"Assignment 4\", \"1300\", \"2\", \"01-01-2021\", \"14-12-2020\","},{"lineNumber":49,"author":{"gitId":"daniellimws"},"content":"                Importance.MEDIUM, \"Tough assignment\", false);"},{"lineNumber":50,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(4, \"Assignment 5\", \"1600\", \"2\", \"01-01-2021\", \"14-12-2020\","},{"lineNumber":51,"author":{"gitId":"daniellimws"},"content":"                Importance.HIGH, \"Tough assignment\", false);"},{"lineNumber":52,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(5, \"Assignment 6\", \"1600\", \"2\", \"01-01-2021\", \"15-12-2020\","},{"lineNumber":53,"author":{"gitId":"daniellimws"},"content":"                Importance.MEDIUM, \"Tough assignment,\", false);"},{"lineNumber":54,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(6, \"Assignment 7\", \"1900\", \"2\", \"01-01-2021\", \"15-12-2020\","},{"lineNumber":55,"author":{"gitId":"daniellimws"},"content":"                Importance.HIGH, \"Tough assignment\", false);"},{"lineNumber":56,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(7, \"Assignment 8\", \"2100\", \"2\", \"01-01-2021\", \"15-12-2020\","},{"lineNumber":57,"author":{"gitId":"daniellimws"},"content":"                Importance.MEDIUM, \"Tough assignment\", false);"},{"lineNumber":58,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(8, \"Assignment 9\", \"1600\", \"2\", \"01-01-2021\", \"16-12-2020\","},{"lineNumber":59,"author":{"gitId":"daniellimws"},"content":"                Importance.LOW, \"Tough assignment\", false);"},{"lineNumber":60,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(9, \"Assignment 10\", \"1300\", \"2\", \"01-01-2021\", \"16-12-2020\","},{"lineNumber":61,"author":{"gitId":"daniellimws"},"content":"                Importance.MEDIUM, \"Tough assignment\", false);"},{"lineNumber":62,"author":{"gitId":"daniellimws"},"content":"        return taskList;"},{"lineNumber":63,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":65,"author":{"gitId":"daniellimws"},"content":"}"}],"authorContributionMap":{"daniellimws":44,"wish2023":21}},{"path":"src/test/java/athena/TimeAllocatorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Kafcis"},"content":"package athena;"},{"lineNumber":2,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":4,"author":{"gitId":"Kafcis"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":6,"author":{"gitId":"Kafcis"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":8,"author":{"gitId":"Kafcis"},"content":"class TimeAllocatorTest {"},{"lineNumber":9,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":10,"author":{"gitId":"Kafcis"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"daniellimws"},"content":"    void runAllocate_overCapacityDay_validSchedule() throws CommandException {"},{"lineNumber":12,"author":{"gitId":"Kafcis"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":13,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(2, \"Assignment 3\", \"0800\", \"5\", \"01-01-2021\", \"today\","},{"lineNumber":14,"author":{"gitId":"Kafcis"},"content":"                Importance.MEDIUM, \"Tough assignment\", true);"},{"lineNumber":15,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(3, \"Assignment 4\", \"1300\", \"2\", \"01-01-2021\", \"today\","},{"lineNumber":16,"author":{"gitId":"Kafcis"},"content":"                Importance.MEDIUM, \"Tough assignment\", false);"},{"lineNumber":17,"author":{"gitId":"Kafcis"},"content":"        taskList.addTask(4, \"Assignment 5\", \"1500\", \"2\", \"01-01-2021\", \"today\","},{"lineNumber":18,"author":{"gitId":"Kafcis"},"content":"                Importance.MEDIUM, \"Tough assignment\", true);"},{"lineNumber":19,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(6, \"Assignment 7\", \"1700\", \"3\", \"01-01-2021\", \"today\","},{"lineNumber":20,"author":{"gitId":"Kafcis"},"content":"                Importance.MEDIUM, \"Tough assignment\", false);"},{"lineNumber":21,"author":{"gitId":"Kafcis"},"content":"        taskList.addTask(7, \"Assignment 8\", \"2000\", \"1\", \"01-01-2021\", \"today\","},{"lineNumber":22,"author":{"gitId":"Kafcis"},"content":"                Importance.MEDIUM, \"Tough assignment\", true);"},{"lineNumber":23,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":24,"author":{"gitId":"Kafcis"},"content":"        TaskList messyTaskList \u003d new TaskList();"},{"lineNumber":25,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":26,"author":{"gitId":"wish2023"},"content":"        messyTaskList.addTask(2, \"Assignment 3\", \"1900\", \"5\", \"01-01-2021\", \"today\","},{"lineNumber":27,"author":{"gitId":"Kafcis"},"content":"                Importance.MEDIUM, \"Tough assignment\", true);"},{"lineNumber":28,"author":{"gitId":"wish2023"},"content":"        messyTaskList.addTask(3, \"Assignment 4\", \"1300\", \"2\", \"01-01-2021\", \"today\","},{"lineNumber":29,"author":{"gitId":"Kafcis"},"content":"                Importance.MEDIUM, \"Tough assignment\", false);"},{"lineNumber":30,"author":{"gitId":"wish2023"},"content":"        messyTaskList.addTask(4, \"Assignment 5\", \"1600\", \"2\", \"01-01-2021\", \"today\","},{"lineNumber":31,"author":{"gitId":"Kafcis"},"content":"                Importance.MEDIUM, \"Tough assignment\", true);"},{"lineNumber":32,"author":{"gitId":"wish2023"},"content":"        messyTaskList.addTask(6, \"Assignment 7\", \"1700\", \"3\", \"01-01-2021\", \"today\","},{"lineNumber":33,"author":{"gitId":"Kafcis"},"content":"                Importance.MEDIUM, \"Tough assignment\", false);"},{"lineNumber":34,"author":{"gitId":"wish2023"},"content":"        messyTaskList.addTask(7, \"Assignment 8\", \"1500\", \"1\", \"01-01-2021\", \"today\","},{"lineNumber":35,"author":{"gitId":"Kafcis"},"content":"                Importance.MEDIUM, \"Tough assignment\", true);"},{"lineNumber":36,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":37,"author":{"gitId":"Kafcis"},"content":"        TimeAllocator allocator \u003d new TimeAllocator(messyTaskList);"},{"lineNumber":38,"author":{"gitId":"Kafcis"},"content":"        allocator.runAllocate();"},{"lineNumber":39,"author":{"gitId":"Kafcis"},"content":"        assertEquals(messyTaskList, taskList);"},{"lineNumber":40,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":41,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":42,"author":{"gitId":"Kafcis"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Kafcis"},"content":"}"}],"authorContributionMap":{"Kafcis":33,"daniellimws":2,"wish2023":8}},{"path":"src/test/java/athena/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"amanda-chua"},"content":"package athena.commands;"},{"lineNumber":2,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":3,"author":{"gitId":"amanda-chua"},"content":"import athena.Importance;"},{"lineNumber":4,"author":{"gitId":"amanda-chua"},"content":"import athena.TaskList;"},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":6,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":7,"author":{"gitId":"amanda-chua"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":8,"author":{"gitId":"amanda-chua"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":10,"author":{"gitId":"amanda-chua"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":11,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":12,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"alstontham"},"content":" * Tests methods of the add command."},{"lineNumber":14,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":15,"author":{"gitId":"amanda-chua"},"content":"class AddCommandTest {"},{"lineNumber":16,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":17,"author":{"gitId":"amanda-chua"},"content":"    private TaskList taskList;"},{"lineNumber":18,"author":{"gitId":"amanda-chua"},"content":"    private TaskList taskListWithAddedTask;"},{"lineNumber":19,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":20,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"amanda-chua"},"content":"     * Creates a task list for testing."},{"lineNumber":22,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"alstontham"},"content":"     * @return TaskList for testing"},{"lineNumber":24,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"daniellimws"},"content":"    public static TaskList getTaskList() throws CommandException {"},{"lineNumber":26,"author":{"gitId":"amanda-chua"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":27,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(0, \"Assignment 1\", \"1600\", \"2\", \"01-01-2021\", \"12-12-2020\","},{"lineNumber":28,"author":{"gitId":"Kafcis"},"content":"                Importance.HIGH, \"Tough assignment\", false);"},{"lineNumber":29,"author":{"gitId":"amanda-chua"},"content":"        return taskList;"},{"lineNumber":30,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":32,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"amanda-chua"},"content":"     * Creates a task list that is same as getTaskList() but with added task."},{"lineNumber":34,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"alstontham"},"content":"     * @return TaskList for testing with an added task"},{"lineNumber":36,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"daniellimws"},"content":"    public static TaskList getTaskListWithAddedTask() throws CommandException {"},{"lineNumber":38,"author":{"gitId":"amanda-chua"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":39,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(0, \"Assignment 1\", \"1600\", \"2\", \"01-01-2021\", \"12-12-2020\","},{"lineNumber":40,"author":{"gitId":"Kafcis"},"content":"                Importance.HIGH, \"Tough assignment\", false);"},{"lineNumber":41,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(1, \"Homework 2\", \"0800\", \"4\", \"01-01-2021\", \"10-12-2020\","},{"lineNumber":42,"author":{"gitId":"Kafcis"},"content":"                Importance.HIGH, \"Very easy homework\", false);"},{"lineNumber":43,"author":{"gitId":"amanda-chua"},"content":"        return taskList;"},{"lineNumber":44,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":46,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"amanda-chua"},"content":"     * Creates the components needed for testing."},{"lineNumber":48,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"amanda-chua"},"content":"    @BeforeEach"},{"lineNumber":50,"author":{"gitId":"daniellimws"},"content":"    public void setup() throws CommandException {"},{"lineNumber":51,"author":{"gitId":"amanda-chua"},"content":"        taskList \u003d getTaskList();"},{"lineNumber":52,"author":{"gitId":"amanda-chua"},"content":"        taskListWithAddedTask \u003d getTaskListWithAddedTask();"},{"lineNumber":53,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":55,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"amanda-chua"},"content":"     * Tests that the task is added into the Tasks list."},{"lineNumber":57,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"amanda-chua"},"content":"     * @throws CommandException Exception thrown if there is an error with the user entered command"},{"lineNumber":59,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"amanda-chua"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"daniellimws"},"content":"    public void execute_taskIsAdded() throws CommandException {"},{"lineNumber":62,"author":{"gitId":"amanda-chua"},"content":"        assertAddSuccessful(taskList, taskListWithAddedTask);"},{"lineNumber":63,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":65,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"amanda-chua"},"content":"     * Creates a new add command."},{"lineNumber":67,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"amanda-chua"},"content":"    private AddCommand createAddCommand() {"},{"lineNumber":69,"author":{"gitId":"wish2023"},"content":"        AddCommand command \u003d new AddCommand(\"Homework 2\", \"0800\", \"4\", \"01-01-2021\", \"10-12-2020\","},{"lineNumber":70,"author":{"gitId":"daniellimws"},"content":"                Importance.HIGH, \"Very easy homework\", false);"},{"lineNumber":71,"author":{"gitId":"amanda-chua"},"content":"        return command;"},{"lineNumber":72,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":74,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"amanda-chua"},"content":"     * Executes the command, and checks that the execution was what we expect."},{"lineNumber":76,"author":{"gitId":"alstontham"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"alstontham"},"content":"     * @param addCommand       add command"},{"lineNumber":78,"author":{"gitId":"alstontham"},"content":"     * @param expectedTaskList expected task list"},{"lineNumber":79,"author":{"gitId":"alstontham"},"content":"     * @param actualTaskList   actual task list"},{"lineNumber":80,"author":{"gitId":"amanda-chua"},"content":"     * @throws CommandException Exception thrown if there is an error with the user entered command"},{"lineNumber":81,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"wish2023"},"content":"    private void assertCommandBehaviour(AddCommand addCommand, TaskList expectedTaskList, TaskList actualTaskList)"},{"lineNumber":83,"author":{"gitId":"daniellimws"},"content":"            throws CommandException {"},{"lineNumber":84,"author":{"gitId":"alstontham"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":85,"author":{"gitId":"alstontham"},"content":"        addCommand.execute(taskList, athenaUi);"},{"lineNumber":86,"author":{"gitId":"amanda-chua"},"content":"        assertEquals(expectedTaskList, actualTaskList);"},{"lineNumber":87,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":89,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"amanda-chua"},"content":"     * Asserts the task successfully added."},{"lineNumber":91,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"alstontham"},"content":"     * @param taskList              TaskList"},{"lineNumber":93,"author":{"gitId":"alstontham"},"content":"     * @param taskListWithAddedTask Reference taskList to compare with after adding the task"},{"lineNumber":94,"author":{"gitId":"amanda-chua"},"content":"     * @throws CommandException Exception thrown if there is an error with the user entered command"},{"lineNumber":95,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"amanda-chua"},"content":"    private void assertAddSuccessful(TaskList taskList, TaskList taskListWithAddedTask)"},{"lineNumber":97,"author":{"gitId":"daniellimws"},"content":"            throws CommandException {"},{"lineNumber":98,"author":{"gitId":"amanda-chua"},"content":"        TaskList expectedTaskList \u003d taskListWithAddedTask;"},{"lineNumber":99,"author":{"gitId":"amanda-chua"},"content":"        TaskList actualTaskList \u003d taskList;"},{"lineNumber":100,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":101,"author":{"gitId":"amanda-chua"},"content":"        AddCommand command \u003d createAddCommand();"},{"lineNumber":102,"author":{"gitId":"amanda-chua"},"content":"        assertCommandBehaviour(command, expectedTaskList, actualTaskList);"},{"lineNumber":103,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":105,"author":{"gitId":"amanda-chua"},"content":"}"}],"authorContributionMap":{"alstontham":14,"Kafcis":4,"amanda-chua":74,"daniellimws":8,"wish2023":5}},{"path":"src/test/java/athena/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"amanda-chua"},"content":"package athena.commands;"},{"lineNumber":2,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":3,"author":{"gitId":"amanda-chua"},"content":"import athena.Importance;"},{"lineNumber":4,"author":{"gitId":"amanda-chua"},"content":"import athena.TaskList;"},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.DeleteInvalidIndexException;"},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":7,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":8,"author":{"gitId":"amanda-chua"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"amanda-chua"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":10,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":11,"author":{"gitId":"amanda-chua"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":12,"author":{"gitId":"daniellimws"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":13,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":14,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"alstontham"},"content":" * Tests methods of the delete command."},{"lineNumber":16,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":17,"author":{"gitId":"amanda-chua"},"content":"class DeleteCommandTest {"},{"lineNumber":18,"author":{"gitId":"amanda-chua"},"content":"    private TaskList taskList;"},{"lineNumber":19,"author":{"gitId":"amanda-chua"},"content":"    private TaskList taskListWithoutTask;"},{"lineNumber":20,"author":{"gitId":"alstontham"},"content":"    private AthenaUi athenaUi;"},{"lineNumber":21,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":22,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"daniellimws"},"content":"     * Creates a task list for testing."},{"lineNumber":24,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"alstontham"},"content":"     * @return TaskList for testing"},{"lineNumber":26,"author":{"gitId":"amanda-chua"},"content":"     * @throws CommandException Exception thrown if there is an error with the user entered command"},{"lineNumber":27,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"daniellimws"},"content":"    private TaskList getTaskList() throws CommandException {"},{"lineNumber":29,"author":{"gitId":"amanda-chua"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":30,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(0, \"Assignment 1\", \"1600\", \"2\", \"01-01-2021\", \"12-12-2020\","},{"lineNumber":31,"author":{"gitId":"Kafcis"},"content":"                Importance.HIGH, \"Tough assignment\", false);"},{"lineNumber":32,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(1, \"Assignment 2\", \"1600\", \"2\", \"01-01-2021\", \"13-12-2020\","},{"lineNumber":33,"author":{"gitId":"Kafcis"},"content":"                Importance.MEDIUM, \"Tough assignment\", false);"},{"lineNumber":34,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(2, \"Assignment 3\", \"1600\", \"2\", \"01-01-2021\", \"14-12-2020\","},{"lineNumber":35,"author":{"gitId":"Kafcis"},"content":"                Importance.MEDIUM, \"Tough assignment\", false);"},{"lineNumber":36,"author":{"gitId":"amanda-chua"},"content":"        return taskList;"},{"lineNumber":37,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":39,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"daniellimws"},"content":"     * Creates a task list that is same as getTaskList() but without task number 2."},{"lineNumber":41,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"alstontham"},"content":"     * @return TaskList for testing without task number 2"},{"lineNumber":43,"author":{"gitId":"amanda-chua"},"content":"     * @throws CommandException Exception thrown if there is an error with the user entered command"},{"lineNumber":44,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"daniellimws"},"content":"    private TaskList getTaskListWithoutTask() throws CommandException {"},{"lineNumber":46,"author":{"gitId":"amanda-chua"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":47,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(0, \"Assignment 1\", \"1600\", \"2\", \"01-01-2021\", \"12-12-2020\","},{"lineNumber":48,"author":{"gitId":"Kafcis"},"content":"                Importance.HIGH, \"Tough assignment\", false);"},{"lineNumber":49,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(2, \"Assignment 3\", \"1600\", \"2\", \"01-01-2021\", \"14-12-2020\","},{"lineNumber":50,"author":{"gitId":"Kafcis"},"content":"                Importance.MEDIUM, \"Tough assignment\", false);"},{"lineNumber":51,"author":{"gitId":"amanda-chua"},"content":"        return taskList;"},{"lineNumber":52,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":54,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"daniellimws"},"content":"     * Creates the components needed for testing."},{"lineNumber":56,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"amanda-chua"},"content":"     * @throws CommandException Exception thrown if there is an error with the user entered command"},{"lineNumber":58,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"amanda-chua"},"content":"    @BeforeEach"},{"lineNumber":60,"author":{"gitId":"daniellimws"},"content":"    public void setup() throws CommandException {"},{"lineNumber":61,"author":{"gitId":"alstontham"},"content":"        athenaUi \u003d new AthenaUi();"},{"lineNumber":62,"author":{"gitId":"amanda-chua"},"content":"        taskList \u003d getTaskList();"},{"lineNumber":63,"author":{"gitId":"amanda-chua"},"content":"        taskListWithoutTask \u003d getTaskListWithoutTask();"},{"lineNumber":64,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":66,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"daniellimws"},"content":"     * Tests that a task is a deleted from a list if a valid task number is given."},{"lineNumber":68,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"alstontham"},"content":"     * @throws DeleteInvalidIndexException Exception thrown when the given task number is not in the list"},{"lineNumber":70,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"amanda-chua"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"alstontham"},"content":"    public void execute_validNumber_taskIsDeleted() throws DeleteInvalidIndexException {"},{"lineNumber":73,"author":{"gitId":"amanda-chua"},"content":"        assertDeletionSuccessful(1, taskList, taskListWithoutTask);"},{"lineNumber":74,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":76,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"alstontham"},"content":"     * Tests that a DeleteInvalidIndexException is thrown when an task number not in the list is given."},{"lineNumber":78,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"amanda-chua"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"daniellimws"},"content":"    public void execute_invalidNumber_taskListIsUnchanged() {"},{"lineNumber":81,"author":{"gitId":"daniellimws"},"content":"        assertDeletionFailsDueToInvalidNumber(-1, taskList);"},{"lineNumber":82,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":84,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"amanda-chua"},"content":"     * Creates a new delete command."},{"lineNumber":86,"author":{"gitId":"amanda-chua"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"daniellimws"},"content":"     * @param taskNumber of the task that we want to delete"},{"lineNumber":88,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"daniellimws"},"content":"    private DeleteCommand createDeleteCommand(int taskNumber) {"},{"lineNumber":90,"author":{"gitId":"daniellimws"},"content":"        DeleteCommand command \u003d new DeleteCommand(taskNumber);"},{"lineNumber":91,"author":{"gitId":"amanda-chua"},"content":"        return command;"},{"lineNumber":92,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":94,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"alstontham"},"content":"     * Asserts that the execution of the command results in what we expect."},{"lineNumber":96,"author":{"gitId":"alstontham"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"alstontham"},"content":"     * @param deleteCommand    Delete command"},{"lineNumber":98,"author":{"gitId":"alstontham"},"content":"     * @param expectedTaskList Expected task list"},{"lineNumber":99,"author":{"gitId":"alstontham"},"content":"     * @param actualTaskList   Actual task list"},{"lineNumber":100,"author":{"gitId":"alstontham"},"content":"     * @throws DeleteInvalidIndexException Exception thrown when the given task number is not in the list"},{"lineNumber":101,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"daniellimws"},"content":"    private void assertCommandBehaviour(DeleteCommand deleteCommand, TaskList expectedTaskList,"},{"lineNumber":103,"author":{"gitId":"alstontham"},"content":"                                        TaskList actualTaskList) throws DeleteInvalidIndexException {"},{"lineNumber":104,"author":{"gitId":"alstontham"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":105,"author":{"gitId":"alstontham"},"content":"        deleteCommand.execute(taskList, athenaUi);"},{"lineNumber":106,"author":{"gitId":"amanda-chua"},"content":"        assertEquals(expectedTaskList, actualTaskList);"},{"lineNumber":107,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":109,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"daniellimws"},"content":"     * Asserts that nothing changes when the task with the given number does not exist in the given task list."},{"lineNumber":111,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":112,"author":{"gitId":"alstontham"},"content":"     * @param taskNumber Task number to delete, but it should be an invalid number"},{"lineNumber":113,"author":{"gitId":"alstontham"},"content":"     * @param taskList   TaskList to delete from"},{"lineNumber":114,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"daniellimws"},"content":"    private void assertDeletionFailsDueToInvalidNumber(int taskNumber, TaskList taskList) {"},{"lineNumber":116,"author":{"gitId":"daniellimws"},"content":"        DeleteCommand command \u003d createDeleteCommand(taskNumber);"},{"lineNumber":117,"author":{"gitId":"alstontham"},"content":"        assertThrows(DeleteInvalidIndexException.class, () -\u003e {"},{"lineNumber":118,"author":{"gitId":"alstontham"},"content":"            command.execute(taskList, athenaUi);"},{"lineNumber":119,"author":{"gitId":"daniellimws"},"content":"        });"},{"lineNumber":120,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":122,"author":{"gitId":"amanda-chua"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"daniellimws"},"content":"     * Asserts the task with the specified number can be successfully deleted."},{"lineNumber":124,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":125,"author":{"gitId":"alstontham"},"content":"     * @param taskNumber          Task number of the task to delete"},{"lineNumber":126,"author":{"gitId":"alstontham"},"content":"     * @param taskList            TaskList to delete from"},{"lineNumber":127,"author":{"gitId":"alstontham"},"content":"     * @param taskListWithoutTask Reference taskList to compare with after deleting the task"},{"lineNumber":128,"author":{"gitId":"alstontham"},"content":"     * @throws DeleteInvalidIndexException Exception thrown when the given task number is not in the list"},{"lineNumber":129,"author":{"gitId":"amanda-chua"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"daniellimws"},"content":"    private void assertDeletionSuccessful(int taskNumber, TaskList taskList, TaskList taskListWithoutTask)"},{"lineNumber":131,"author":{"gitId":"alstontham"},"content":"            throws DeleteInvalidIndexException {"},{"lineNumber":132,"author":{"gitId":"amanda-chua"},"content":""},{"lineNumber":133,"author":{"gitId":"daniellimws"},"content":"        DeleteCommand command \u003d createDeleteCommand(taskNumber);"},{"lineNumber":134,"author":{"gitId":"amanda-chua"},"content":"        assertCommandBehaviour(command, taskListWithoutTask, taskList);"},{"lineNumber":135,"author":{"gitId":"amanda-chua"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"amanda-chua"},"content":"}"}],"authorContributionMap":{"alstontham":29,"Kafcis":6,"amanda-chua":58,"daniellimws":38,"wish2023":5}},{"path":"src/test/java/athena/commands/DoneCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"amanda-chua"},"content":"package athena.commands;"},{"lineNumber":2,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.Importance;"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"import athena.TaskList;"},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.DoneInvalidIndexException;"},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.TaskIsDoneException;"},{"lineNumber":8,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":9,"author":{"gitId":"daniellimws"},"content":"import athena.task.Task;"},{"lineNumber":10,"author":{"gitId":"daniellimws"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"daniellimws"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":12,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":13,"author":{"gitId":"daniellimws"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":14,"author":{"gitId":"daniellimws"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":15,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":16,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"alstontham"},"content":" * Tests methods of the done command."},{"lineNumber":18,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":19,"author":{"gitId":"daniellimws"},"content":"class DoneCommandTest {"},{"lineNumber":20,"author":{"gitId":"daniellimws"},"content":"    private TaskList taskList;"},{"lineNumber":21,"author":{"gitId":"daniellimws"},"content":"    private TaskList taskListWithDone;"},{"lineNumber":22,"author":{"gitId":"alstontham"},"content":"    private AthenaUi athenaUi;"},{"lineNumber":23,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":24,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"daniellimws"},"content":"     * Creates a task list for testing."},{"lineNumber":26,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"daniellimws"},"content":"     * @return TaskList for testing."},{"lineNumber":28,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"daniellimws"},"content":"    private TaskList getTaskList() throws CommandException {"},{"lineNumber":30,"author":{"gitId":"daniellimws"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":31,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(0, \"Assignment 1\", \"1600\", \"2\", \"01-01-2021\", \"12-12-2020\","},{"lineNumber":32,"author":{"gitId":"Kafcis"},"content":"                Importance.HIGH, \"Tough assignment\", false);"},{"lineNumber":33,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(1, \"Assignment 2\", \"1600\", \"2\", \"01-01-2021\", \"13-12-2020\","},{"lineNumber":34,"author":{"gitId":"Kafcis"},"content":"                Importance.MEDIUM, \"Tough assignment\", false);"},{"lineNumber":35,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(2, \"Assignment 3\", \"1600\", \"2\", \"01-01-2021\", \"14-12-2020\","},{"lineNumber":36,"author":{"gitId":"Kafcis"},"content":"                Importance.MEDIUM, \"Tough assignment\", false);"},{"lineNumber":37,"author":{"gitId":"daniellimws"},"content":"        return taskList;"},{"lineNumber":38,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":40,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"amanda-chua"},"content":"     * Creates a task list that is same as getTaskList() but task number 1 is done."},{"lineNumber":42,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"amanda-chua"},"content":"     * @return TaskList for testing with a done task number 1."},{"lineNumber":44,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"daniellimws"},"content":"    private TaskList getTaskListWithDone() throws CommandException {"},{"lineNumber":46,"author":{"gitId":"daniellimws"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":47,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(0, \"Assignment 1\", \"1600\", \"2\", \"01-01-2021\", \"12-12-2020\","},{"lineNumber":48,"author":{"gitId":"Kafcis"},"content":"                Importance.HIGH, \"Tough assignment\", false);"},{"lineNumber":49,"author":{"gitId":"wish2023"},"content":"        Task doneTask \u003d new Task(\"Assignment 2\", \"1600\", \"2\", \"01-01-2021\","},{"lineNumber":50,"author":{"gitId":"Kafcis"},"content":"                \"13-12-2020\", Importance.MEDIUM, \"Tough assignment\", 1, false);"},{"lineNumber":51,"author":{"gitId":"daniellimws"},"content":"        doneTask.setDone();"},{"lineNumber":52,"author":{"gitId":"daniellimws"},"content":"        taskList.addTask(doneTask);"},{"lineNumber":53,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(2, \"Assignment 3\", \"1600\", \"2\", \"01-01-2021\", \"14-12-2020\","},{"lineNumber":54,"author":{"gitId":"Kafcis"},"content":"                Importance.MEDIUM, \"Tough assignment\", false);"},{"lineNumber":55,"author":{"gitId":"daniellimws"},"content":"        return taskList;"},{"lineNumber":56,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":58,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"daniellimws"},"content":"     * Creates the components needed for testing."},{"lineNumber":60,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"daniellimws"},"content":"    @BeforeEach"},{"lineNumber":62,"author":{"gitId":"daniellimws"},"content":"    public void setup() throws CommandException {"},{"lineNumber":63,"author":{"gitId":"alstontham"},"content":"        athenaUi \u003d new AthenaUi();"},{"lineNumber":64,"author":{"gitId":"daniellimws"},"content":"        taskList \u003d getTaskList();"},{"lineNumber":65,"author":{"gitId":"daniellimws"},"content":"        taskListWithDone \u003d getTaskListWithDone();"},{"lineNumber":66,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":68,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"daniellimws"},"content":"     * Tests that a task is marked as done if a valid task number is given."},{"lineNumber":70,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"alstontham"},"content":"     * @throws DoneInvalidIndexException Exception thrown when the given task number is not in the list"},{"lineNumber":72,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"daniellimws"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"wish2023"},"content":"    public void execute_validNumber_taskIsDone()"},{"lineNumber":75,"author":{"gitId":"wish2023"},"content":"            throws DoneInvalidIndexException, TaskIsDoneException {"},{"lineNumber":76,"author":{"gitId":"amanda-chua"},"content":"        assertDoneSuccessful(1, taskList, taskListWithDone);"},{"lineNumber":77,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":79,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"alstontham"},"content":"     * Tests that a DoneInvalidIndexException is thrown when an task number not in the list is given."},{"lineNumber":81,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"daniellimws"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"daniellimws"},"content":"    public void execute_invalidNumber_taskListIsUnchanged() {"},{"lineNumber":84,"author":{"gitId":"daniellimws"},"content":"        assertDoneFailsDueToInvalidNumber(-1, taskList);"},{"lineNumber":85,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":87,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"daniellimws"},"content":"     * Creates a new done command."},{"lineNumber":89,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"daniellimws"},"content":"     * @param taskNumber Task number of the task that we want to mark as done"},{"lineNumber":91,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"daniellimws"},"content":"    private DoneCommand createDoneCommand(int taskNumber) {"},{"lineNumber":93,"author":{"gitId":"daniellimws"},"content":"        DoneCommand command \u003d new DoneCommand(taskNumber);"},{"lineNumber":94,"author":{"gitId":"daniellimws"},"content":"        return command;"},{"lineNumber":95,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":97,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"daniellimws"},"content":"     * Executes the command, and checks that the execution was what we expect."},{"lineNumber":99,"author":{"gitId":"alstontham"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"alstontham"},"content":"     * @throws DoneInvalidIndexException Exception thrown when the given task number is not in the list"},{"lineNumber":101,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"wish2023"},"content":"    private void assertCommandBehaviour(DoneCommand doneCommand, TaskList expectedTaskList, TaskList actualTaskList)"},{"lineNumber":103,"author":{"gitId":"wish2023"},"content":"            throws DoneInvalidIndexException, TaskIsDoneException {"},{"lineNumber":104,"author":{"gitId":"alstontham"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":105,"author":{"gitId":"alstontham"},"content":"        doneCommand.execute(taskList, athenaUi);"},{"lineNumber":106,"author":{"gitId":"daniellimws"},"content":"        assertEquals(expectedTaskList, actualTaskList);"},{"lineNumber":107,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":109,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"daniellimws"},"content":"     * Asserts that nothing changes when the task with the given number does not exist in the given task list."},{"lineNumber":111,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":112,"author":{"gitId":"alstontham"},"content":"     * @param taskNumber Task number to mark as done, but it should be an invalid number"},{"lineNumber":113,"author":{"gitId":"alstontham"},"content":"     * @param taskList   TaskList to modify"},{"lineNumber":114,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"daniellimws"},"content":"    private void assertDoneFailsDueToInvalidNumber(int taskNumber, TaskList taskList) {"},{"lineNumber":116,"author":{"gitId":"daniellimws"},"content":"        DoneCommand command \u003d createDoneCommand(taskNumber);"},{"lineNumber":117,"author":{"gitId":"alstontham"},"content":"        assertThrows(DoneInvalidIndexException.class, () -\u003e {"},{"lineNumber":118,"author":{"gitId":"alstontham"},"content":"            command.execute(taskList, athenaUi);"},{"lineNumber":119,"author":{"gitId":"daniellimws"},"content":"        });"},{"lineNumber":120,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":122,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"daniellimws"},"content":"     * Asserts the task with the specified number can be successfully marked as done."},{"lineNumber":124,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":125,"author":{"gitId":"alstontham"},"content":"     * @param taskNumber          Task number of the task to mark as done"},{"lineNumber":126,"author":{"gitId":"alstontham"},"content":"     * @param taskList            TaskList to modify"},{"lineNumber":127,"author":{"gitId":"alstontham"},"content":"     * @param taskListWithoutTask Reference taskList to compare with after marking the task as done"},{"lineNumber":128,"author":{"gitId":"alstontham"},"content":"     * @throws DoneInvalidIndexException Exception thrown when the given task number is not in the list"},{"lineNumber":129,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"daniellimws"},"content":"    private void assertDoneSuccessful(int taskNumber, TaskList taskList, TaskList taskListWithoutTask)"},{"lineNumber":131,"author":{"gitId":"wish2023"},"content":"            throws DoneInvalidIndexException, TaskIsDoneException {"},{"lineNumber":132,"author":{"gitId":"daniellimws"},"content":"        TaskList expectedTaskList \u003d taskListWithoutTask;"},{"lineNumber":133,"author":{"gitId":"daniellimws"},"content":"        TaskList actualTaskList \u003d taskList;"},{"lineNumber":134,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":135,"author":{"gitId":"daniellimws"},"content":"        DoneCommand command \u003d createDoneCommand(taskNumber);"},{"lineNumber":136,"author":{"gitId":"daniellimws"},"content":"        assertCommandBehaviour(command, expectedTaskList, actualTaskList);"},{"lineNumber":137,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"daniellimws"},"content":"}"}],"authorContributionMap":{"alstontham":20,"Kafcis":7,"amanda-chua":4,"daniellimws":96,"wish2023":11}},{"path":"src/test/java/athena/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"amanda-chua"},"content":"package athena.commands;"},{"lineNumber":2,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.Importance;"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"import athena.TaskList;"},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":6,"author":{"gitId":"alstontham"},"content":"import athena.ui.AthenaUi;"},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.TaskNotFoundException;"},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"daniellimws"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":10,"author":{"gitId":"Kafcis"},"content":""},{"lineNumber":11,"author":{"gitId":"daniellimws"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":12,"author":{"gitId":"daniellimws"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":13,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":14,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"alstontham"},"content":" * Tests methods of the edit command."},{"lineNumber":16,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":17,"author":{"gitId":"daniellimws"},"content":"class EditCommandTest {"},{"lineNumber":18,"author":{"gitId":"daniellimws"},"content":"    private TaskList taskList;"},{"lineNumber":19,"author":{"gitId":"daniellimws"},"content":"    private TaskList editedTaskList;"},{"lineNumber":20,"author":{"gitId":"alstontham"},"content":"    private AthenaUi athenaUi;"},{"lineNumber":21,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":22,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"daniellimws"},"content":"     * Creates a task list for testing."},{"lineNumber":24,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"daniellimws"},"content":"     * @return TaskList for testing."},{"lineNumber":26,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"daniellimws"},"content":"    public static TaskList getTaskList() throws CommandException {"},{"lineNumber":28,"author":{"gitId":"daniellimws"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":29,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(0, \"Assignment 1\", \"1600\", \"2\", \"01-01-2021\", \"12-12-2020\","},{"lineNumber":30,"author":{"gitId":"Kafcis"},"content":"                Importance.HIGH, \"Tough assignment\", false);"},{"lineNumber":31,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(1, \"Assignment 2\", \"1600\", \"2\", \"01-01-2021\", \"13-12-2020\","},{"lineNumber":32,"author":{"gitId":"Kafcis"},"content":"                Importance.MEDIUM, \"Tough assignment\", false);"},{"lineNumber":33,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(2, \"Assignment 3\", \"1600\", \"2\", \"01-01-2021\", \"14-12-2020\","},{"lineNumber":34,"author":{"gitId":"Kafcis"},"content":"                Importance.MEDIUM, \"Tough assignment\", false);"},{"lineNumber":35,"author":{"gitId":"daniellimws"},"content":"        return taskList;"},{"lineNumber":36,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":38,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"daniellimws"},"content":"     * Creates a task list that is same as getTaskList() but task number 2 is edited."},{"lineNumber":40,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"daniellimws"},"content":"     * @return TaskList for testing with an edited task number 2."},{"lineNumber":42,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"daniellimws"},"content":"    public static TaskList getEditedTaskList() throws CommandException {"},{"lineNumber":44,"author":{"gitId":"daniellimws"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":45,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(0, \"Assignment 1\", \"1600\", \"2\", \"01-01-2021\", \"12-12-2020\","},{"lineNumber":46,"author":{"gitId":"Kafcis"},"content":"                Importance.HIGH, \"Tough assignment\", false);"},{"lineNumber":47,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(1,\"Homework 2\", \"0800\", \"4\", \"02-01-2021\", \"10-12-2020\","},{"lineNumber":48,"author":{"gitId":"Kafcis"},"content":"                Importance.HIGH, \"Very easy homework\", false);"},{"lineNumber":49,"author":{"gitId":"wish2023"},"content":"        taskList.addTask(2,\"Assignment 3\", \"1600\", \"2\", \"01-01-2021\", \"14-12-2020\","},{"lineNumber":50,"author":{"gitId":"Kafcis"},"content":"                Importance.MEDIUM, \"Tough assignment\", false);"},{"lineNumber":51,"author":{"gitId":"daniellimws"},"content":"        return taskList;"},{"lineNumber":52,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":54,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"daniellimws"},"content":"     * Creates the components needed for testing."},{"lineNumber":56,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"daniellimws"},"content":"    @BeforeEach"},{"lineNumber":58,"author":{"gitId":"daniellimws"},"content":"    public void setup() throws CommandException {"},{"lineNumber":59,"author":{"gitId":"alstontham"},"content":"        athenaUi \u003d new AthenaUi();"},{"lineNumber":60,"author":{"gitId":"daniellimws"},"content":"        taskList \u003d getTaskList();"},{"lineNumber":61,"author":{"gitId":"daniellimws"},"content":"        editedTaskList \u003d getEditedTaskList();"},{"lineNumber":62,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":64,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"daniellimws"},"content":"     * Tests that the details of a task is edited if a valid task number is given."},{"lineNumber":66,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"alstontham"},"content":"     * @throws TaskNotFoundException Exception thrown when the given task number is not in the list"},{"lineNumber":68,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"daniellimws"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"daniellimws"},"content":"    public void execute_validNumber_taskIsEdited() throws CommandException {"},{"lineNumber":71,"author":{"gitId":"amanda-chua"},"content":"        assertEditingSuccessful(1, taskList, editedTaskList);"},{"lineNumber":72,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":74,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"daniellimws"},"content":"     * Tests that a TaskNotFoundException is thrown when an task number not in the list is given."},{"lineNumber":76,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"daniellimws"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"daniellimws"},"content":"    public void execute_invalidNumber_taskListIsUnchanged() {"},{"lineNumber":79,"author":{"gitId":"daniellimws"},"content":"        assertEditingFailsDueToInvalidNumber(-1, taskList);"},{"lineNumber":80,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":82,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"daniellimws"},"content":"     * Creates a new edit command."},{"lineNumber":84,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"daniellimws"},"content":"     * @param taskNumber Task number of the task that we want to edit"},{"lineNumber":86,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"daniellimws"},"content":"    private EditCommand createEditCommand(int taskNumber) {"},{"lineNumber":88,"author":{"gitId":"wish2023"},"content":"        EditCommand command \u003d new EditCommand(taskNumber, \"Homework 2\", \"0800\", \"4\", \"02-01-2021\", \"10-12-2020\","},{"lineNumber":89,"author":{"gitId":"daniellimws"},"content":"                Importance.HIGH, \"Very easy homework\");"},{"lineNumber":90,"author":{"gitId":"daniellimws"},"content":"        return command;"},{"lineNumber":91,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":93,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"daniellimws"},"content":"     * Executes the command, and checks that the execution was what we expect."},{"lineNumber":95,"author":{"gitId":"alstontham"},"content":"     *"},{"lineNumber":96,"author":{"gitId":"alstontham"},"content":"     * @throws TaskNotFoundException Exception thrown when the given task number is not in the list"},{"lineNumber":97,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"daniellimws"},"content":"    private void assertCommandBehaviour(EditCommand editCommand, TaskList expectedTaskList,"},{"lineNumber":99,"author":{"gitId":"daniellimws"},"content":"                                        TaskList actualTaskList) throws CommandException {"},{"lineNumber":100,"author":{"gitId":"alstontham"},"content":"        AthenaUi athenaUi \u003d new AthenaUi();"},{"lineNumber":101,"author":{"gitId":"alstontham"},"content":"        editCommand.execute(taskList, athenaUi);"},{"lineNumber":102,"author":{"gitId":"daniellimws"},"content":"        assertEquals(expectedTaskList, actualTaskList);"},{"lineNumber":103,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":105,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"daniellimws"},"content":"     * Asserts that nothing changes when the task with the given number does not exist in the given task list."},{"lineNumber":107,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":108,"author":{"gitId":"alstontham"},"content":"     * @param taskNumber Task number to edit, but it should be an invalid number"},{"lineNumber":109,"author":{"gitId":"alstontham"},"content":"     * @param taskList   TaskList to edit"},{"lineNumber":110,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"daniellimws"},"content":"    private void assertEditingFailsDueToInvalidNumber(int taskNumber, TaskList taskList) {"},{"lineNumber":112,"author":{"gitId":"daniellimws"},"content":"        EditCommand command \u003d createEditCommand(taskNumber);"},{"lineNumber":113,"author":{"gitId":"daniellimws"},"content":"        assertThrows(TaskNotFoundException.class, () -\u003e {"},{"lineNumber":114,"author":{"gitId":"alstontham"},"content":"            command.execute(taskList, athenaUi);"},{"lineNumber":115,"author":{"gitId":"daniellimws"},"content":"        });"},{"lineNumber":116,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":118,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"daniellimws"},"content":"     * Asserts the task with the specified number can be successfully edited."},{"lineNumber":120,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":121,"author":{"gitId":"alstontham"},"content":"     * @param taskNumber     Task number of the task to edit"},{"lineNumber":122,"author":{"gitId":"alstontham"},"content":"     * @param taskList       TaskList to edit"},{"lineNumber":123,"author":{"gitId":"alstontham"},"content":"     * @param editedTaskList Reference taskList to compare with after deleting the task"},{"lineNumber":124,"author":{"gitId":"alstontham"},"content":"     * @throws TaskNotFoundException Exception thrown when the given task number is not in the list"},{"lineNumber":125,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"daniellimws"},"content":"    private void assertEditingSuccessful(int taskNumber, TaskList taskList, TaskList editedTaskList)"},{"lineNumber":127,"author":{"gitId":"daniellimws"},"content":"            throws CommandException {"},{"lineNumber":128,"author":{"gitId":"daniellimws"},"content":"        TaskList expectedTaskList \u003d editedTaskList;"},{"lineNumber":129,"author":{"gitId":"daniellimws"},"content":"        TaskList actualTaskList \u003d taskList;"},{"lineNumber":130,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":131,"author":{"gitId":"daniellimws"},"content":"        EditCommand command \u003d createEditCommand(taskNumber);"},{"lineNumber":132,"author":{"gitId":"daniellimws"},"content":"        assertCommandBehaviour(command, expectedTaskList, actualTaskList);"},{"lineNumber":133,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"daniellimws"},"content":"}"}],"authorContributionMap":{"alstontham":18,"Kafcis":7,"amanda-chua":2,"daniellimws":100,"wish2023":7}},{"path":"src/test/java/athena/task/TaskTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wish2023"},"content":"package athena.task;"},{"lineNumber":2,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":3,"author":{"gitId":"wish2023"},"content":"import athena.Importance;"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":5,"author":{"gitId":"wish2023"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":6,"author":{"gitId":"wish2023"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":8,"author":{"gitId":"wish2023"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"wish2023"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":11,"author":{"gitId":"wish2023"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":12,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":13,"author":{"gitId":"wish2023"},"content":"class TaskTest {"},{"lineNumber":14,"author":{"gitId":"wish2023"},"content":"    private ArrayList\u003cLocalDate\u003e expectedDates;"},{"lineNumber":15,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":16,"author":{"gitId":"wish2023"},"content":"    @BeforeEach"},{"lineNumber":17,"author":{"gitId":"wish2023"},"content":"    public void setUp() {"},{"lineNumber":18,"author":{"gitId":"wish2023"},"content":"        setupExpectedDates();"},{"lineNumber":19,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":21,"author":{"gitId":"wish2023"},"content":"    private void setupExpectedDates() {"},{"lineNumber":22,"author":{"gitId":"wish2023"},"content":"        expectedDates \u003d new ArrayList\u003c\u003e();"},{"lineNumber":23,"author":{"gitId":"wish2023"},"content":"        LocalDate startDate \u003d LocalDate.now();"},{"lineNumber":24,"author":{"gitId":"wish2023"},"content":"        for (int i \u003d 0; i \u003c 10; i++) {"},{"lineNumber":25,"author":{"gitId":"wish2023"},"content":"            expectedDates.add(startDate.plusWeeks(i));"},{"lineNumber":26,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":29,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"wish2023"},"content":"     * Ensure repeating dates have been set correctly."},{"lineNumber":31,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"wish2023"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"daniellimws"},"content":"    void testSetRecurrence_thisDayOfWeek_returnsTrue() throws CommandException {"},{"lineNumber":34,"author":{"gitId":"wish2023"},"content":"        String dayOfWeek \u003d LocalDate.now().getDayOfWeek().toString();"},{"lineNumber":35,"author":{"gitId":"wish2023"},"content":"        Task task \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","},{"lineNumber":36,"author":{"gitId":"wish2023"},"content":"                dayOfWeek, Importance.MEDIUM, \"testNotes\", 0, false);"},{"lineNumber":37,"author":{"gitId":"wish2023"},"content":"        assertEquals(task.getDates(), expectedDates);"},{"lineNumber":38,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":40,"author":{"gitId":"wish2023"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"wish2023"},"content":"     * Ensure repeating dates have not been set incorrectly."},{"lineNumber":42,"author":{"gitId":"wish2023"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"wish2023"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"daniellimws"},"content":"    void testSetRecurrence_thisDayOfWeek_returnsFalse() throws CommandException {"},{"lineNumber":45,"author":{"gitId":"wish2023"},"content":"        String dayOfWeek \u003d LocalDate.now().plusDays(1).getDayOfWeek().toString();"},{"lineNumber":46,"author":{"gitId":"wish2023"},"content":"        Task task \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","},{"lineNumber":47,"author":{"gitId":"wish2023"},"content":"                dayOfWeek, Importance.MEDIUM, \"testNotes\", 0, false);"},{"lineNumber":48,"author":{"gitId":"wish2023"},"content":"        assertEquals(task.getDates().equals(expectedDates), false);"},{"lineNumber":49,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":51,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":52,"author":{"gitId":"wish2023"},"content":"}"}],"authorContributionMap":{"daniellimws":3,"wish2023":49}},{"path":"src/test/java/athena/task/taskfilter/ForecastFilterTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.task.taskfilter;"},{"lineNumber":2,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":3,"author":{"gitId":"wish2023"},"content":"import athena.Forecast;"},{"lineNumber":4,"author":{"gitId":"wish2023"},"content":"import athena.Importance;"},{"lineNumber":5,"author":{"gitId":"wish2023"},"content":"import athena.common.utils.DateUtils;"},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":7,"author":{"gitId":"wish2023"},"content":"import athena.task.Task;"},{"lineNumber":8,"author":{"gitId":"wish2023"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":10,"author":{"gitId":"daniellimws"},"content":"import java.time.LocalDate;"},{"lineNumber":11,"author":{"gitId":"wish2023"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":12,"author":{"gitId":"daniellimws"},"content":"import java.time.temporal.TemporalField;"},{"lineNumber":13,"author":{"gitId":"daniellimws"},"content":"import java.time.temporal.WeekFields;"},{"lineNumber":14,"author":{"gitId":"daniellimws"},"content":"import java.util.Locale;"},{"lineNumber":15,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":16,"author":{"gitId":"daniellimws"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":17,"author":{"gitId":"daniellimws"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":18,"author":{"gitId":"daniellimws"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":19,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":20,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"alstontham"},"content":" * Tests methods of forecast filter."},{"lineNumber":22,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":23,"author":{"gitId":"wish2023"},"content":"class ForecastFilterTest {"},{"lineNumber":24,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":25,"author":{"gitId":"wish2023"},"content":"    LocalDate todayDate \u003d LocalDate.now();"},{"lineNumber":26,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":27,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"alstontham"},"content":"     * Checks if task is included after applying the all forecast filter."},{"lineNumber":29,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"wish2023"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"daniellimws"},"content":"    void testIsTaskIncluded_filterAll_returnsTrue() throws CommandException {"},{"lineNumber":32,"author":{"gitId":"wish2023"},"content":"        ForecastFilter forecastFilter \u003d new ForecastFilter(Forecast.ALL);"},{"lineNumber":33,"author":{"gitId":"wish2023"},"content":"        Task inputTask \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","},{"lineNumber":34,"author":{"gitId":"Kafcis"},"content":"                \"20-12-2020\", Importance.MEDIUM, \"testNotes\", 0, false);"},{"lineNumber":35,"author":{"gitId":"wish2023"},"content":"        boolean isTaskIncluded \u003d forecastFilter.isTaskIncluded(inputTask);"},{"lineNumber":36,"author":{"gitId":"wish2023"},"content":"        assertEquals(isTaskIncluded, true);"},{"lineNumber":37,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":39,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"daniellimws"},"content":"     * Checks if task in this week is included after applying the week forecast filter."},{"lineNumber":41,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"wish2023"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"daniellimws"},"content":"    void testIsTaskIncluded_filterByWeek_returnsTrue() throws CommandException {"},{"lineNumber":44,"author":{"gitId":"daniellimws"},"content":"        LocalDate testDate \u003d getFirstDayOfWeek();"},{"lineNumber":45,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":46,"author":{"gitId":"daniellimws"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"},{"lineNumber":47,"author":{"gitId":"wish2023"},"content":"        ForecastFilter forecastFilter \u003d new ForecastFilter(Forecast.WEEK);"},{"lineNumber":48,"author":{"gitId":"daniellimws"},"content":"        for (int i \u003d 0; i \u003c 7; i++) {"},{"lineNumber":49,"author":{"gitId":"wish2023"},"content":"            if (testDate.compareTo(LocalDate.now()) \u003e\u003d 0) {"},{"lineNumber":50,"author":{"gitId":"daniellimws"},"content":"                Task testTask \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","},{"lineNumber":51,"author":{"gitId":"daniellimws"},"content":"                        testDate.format(formatter), Importance.LOW, \"testNotes\", 0, false);"},{"lineNumber":52,"author":{"gitId":"daniellimws"},"content":"                boolean isTaskIncluded \u003d forecastFilter.isTaskIncluded(testTask);"},{"lineNumber":53,"author":{"gitId":"daniellimws"},"content":"                assertTrue(isTaskIncluded);"},{"lineNumber":54,"author":{"gitId":"wish2023"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"daniellimws"},"content":"            testDate \u003d testDate.plusDays(1);"},{"lineNumber":56,"author":{"gitId":"daniellimws"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":59,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"daniellimws"},"content":"     * Checks if a task not in this week is excluded from the week forecast filter."},{"lineNumber":61,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"wish2023"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"daniellimws"},"content":"    void testIsTaskIncluded_filterByWeek_returnsFalse() throws CommandException {"},{"lineNumber":64,"author":{"gitId":"daniellimws"},"content":"        LocalDate nextWeekDate \u003d LocalDate.now().plusWeeks(1);"},{"lineNumber":65,"author":{"gitId":"daniellimws"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"},{"lineNumber":66,"author":{"gitId":"daniellimws"},"content":"        String testDateString \u003d nextWeekDate.format(formatter);"},{"lineNumber":67,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":68,"author":{"gitId":"wish2023"},"content":"        ForecastFilter forecastFilter \u003d new ForecastFilter(Forecast.WEEK);"},{"lineNumber":69,"author":{"gitId":"daniellimws"},"content":"        Task testTask \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","},{"lineNumber":70,"author":{"gitId":"daniellimws"},"content":"                testDateString, Importance.LOW, \"testNotes\", 0, false);"},{"lineNumber":71,"author":{"gitId":"daniellimws"},"content":"        boolean isTaskIncluded \u003d forecastFilter.isTaskIncluded(testTask);"},{"lineNumber":72,"author":{"gitId":"daniellimws"},"content":"        assertFalse(isTaskIncluded);"},{"lineNumber":73,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":75,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"daniellimws"},"content":"     * Checks if task for today is included after applying the today forecast filter."},{"lineNumber":77,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"wish2023"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"daniellimws"},"content":"    void testIsTaskIncluded_filterByToday_returnsTrue() throws CommandException {"},{"lineNumber":80,"author":{"gitId":"Kafcis"},"content":"        ForecastFilter forecastFilter \u003d new ForecastFilter(Forecast.DAY);"},{"lineNumber":81,"author":{"gitId":"wish2023"},"content":"        String todayDateString \u003d DateUtils.formatDate(LocalDate.now());"},{"lineNumber":82,"author":{"gitId":"wish2023"},"content":"        Task inputTask \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","},{"lineNumber":83,"author":{"gitId":"Kafcis"},"content":"                todayDateString, Importance.LOW, \"testNotes\", 0, false); // Tested on 13-10-2020"},{"lineNumber":84,"author":{"gitId":"wish2023"},"content":"        boolean isTaskIncluded \u003d forecastFilter.isTaskIncluded(inputTask);"},{"lineNumber":85,"author":{"gitId":"wish2023"},"content":"        assertEquals(isTaskIncluded, true);"},{"lineNumber":86,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":88,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"alstontham"},"content":"     * Checks if task is not included after applying the today forecast filter."},{"lineNumber":90,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"wish2023"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"daniellimws"},"content":"    void testIsTaskIncluded_day_returnsFalse() throws CommandException {"},{"lineNumber":93,"author":{"gitId":"Kafcis"},"content":"        ForecastFilter forecastFilter \u003d new ForecastFilter(Forecast.DAY);"},{"lineNumber":94,"author":{"gitId":"wish2023"},"content":"        LocalDate date \u003d LocalDate.now().plusDays(1);"},{"lineNumber":95,"author":{"gitId":"wish2023"},"content":"        String dateInString \u003d DateUtils.formatDate(date);"},{"lineNumber":96,"author":{"gitId":"wish2023"},"content":"        Task inputTask \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","},{"lineNumber":97,"author":{"gitId":"wish2023"},"content":"                dateInString, Importance.LOW, \"testNotes\", 0, false); // Tested on 13-10-2020"},{"lineNumber":98,"author":{"gitId":"wish2023"},"content":"        boolean isTaskIncluded \u003d forecastFilter.isTaskIncluded(inputTask);"},{"lineNumber":99,"author":{"gitId":"wish2023"},"content":"        assertEquals(isTaskIncluded, false);"},{"lineNumber":100,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":102,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"daniellimws"},"content":"     * Utility method to get the first day of this week."},{"lineNumber":104,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":105,"author":{"gitId":"daniellimws"},"content":"     * @return The first day of this week."},{"lineNumber":106,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"daniellimws"},"content":"    private LocalDate getFirstDayOfWeek() {"},{"lineNumber":108,"author":{"gitId":"daniellimws"},"content":"        LocalDate now \u003d LocalDate.now();"},{"lineNumber":109,"author":{"gitId":"daniellimws"},"content":"        TemporalField field \u003d WeekFields.of(Locale.getDefault()).dayOfWeek();"},{"lineNumber":110,"author":{"gitId":"daniellimws"},"content":"        return now.with(field, 1);"},{"lineNumber":111,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"wish2023"},"content":"}"}],"authorContributionMap":{"alstontham":15,"Kafcis":4,"daniellimws":47,"wish2023":46}},{"path":"src/test/java/athena/task/taskfilter/ImportanceFilterTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.task.taskfilter;"},{"lineNumber":2,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.Importance;"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"import athena.task.Task;"},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":9,"author":{"gitId":"daniellimws"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":10,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":11,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":12,"author":{"gitId":"daniellimws"},"content":"class ImportanceFilterTest {"},{"lineNumber":13,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":14,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"daniellimws"},"content":"     * Tests that the task should be included when Importance.ALL is chosen."},{"lineNumber":16,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"daniellimws"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"daniellimws"},"content":"    void isTaskIncluded_all_returnsTrue() throws CommandException {"},{"lineNumber":19,"author":{"gitId":"daniellimws"},"content":"        ImportanceFilter importanceFilter \u003d new ImportanceFilter(Importance.ALL);"},{"lineNumber":20,"author":{"gitId":"daniellimws"},"content":"        Task task \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","},{"lineNumber":21,"author":{"gitId":"Kafcis"},"content":"                \"20-12-2020\", Importance.MEDIUM, \"testNotes\", 0, false);"},{"lineNumber":22,"author":{"gitId":"daniellimws"},"content":"        boolean isTaskIncluded \u003d importanceFilter.isTaskIncluded(task);"},{"lineNumber":23,"author":{"gitId":"daniellimws"},"content":"        assertTrue(isTaskIncluded);"},{"lineNumber":24,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":26,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"daniellimws"},"content":"     * Tests that the task should be included when an Importance that is same as the task\u0027s is chosen."},{"lineNumber":28,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"daniellimws"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"daniellimws"},"content":"    void isTaskIncluded_sameImportance_returnsTrue() throws CommandException {"},{"lineNumber":31,"author":{"gitId":"daniellimws"},"content":"        ImportanceFilter importanceFilter \u003d new ImportanceFilter(Importance.HIGH);"},{"lineNumber":32,"author":{"gitId":"daniellimws"},"content":"        Task task \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","},{"lineNumber":33,"author":{"gitId":"Kafcis"},"content":"                \"20-12-2020\", Importance.HIGH, \"testNotes\", 0, false);"},{"lineNumber":34,"author":{"gitId":"daniellimws"},"content":"        boolean isTaskIncluded \u003d importanceFilter.isTaskIncluded(task);"},{"lineNumber":35,"author":{"gitId":"daniellimws"},"content":"        assertTrue(isTaskIncluded);"},{"lineNumber":36,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":38,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"daniellimws"},"content":"     * Tests that the task should not be included when an Importance that is different from the task\u0027s is chosen."},{"lineNumber":40,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"daniellimws"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"daniellimws"},"content":"    void isTaskIncluded_differentImportance_returnsFalse() throws CommandException {"},{"lineNumber":43,"author":{"gitId":"daniellimws"},"content":"        ImportanceFilter importanceFilter \u003d new ImportanceFilter(Importance.HIGH);"},{"lineNumber":44,"author":{"gitId":"daniellimws"},"content":"        Task task \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","},{"lineNumber":45,"author":{"gitId":"Kafcis"},"content":"                \"20-12-2020\", Importance.LOW, \"testNotes\", 0, false);"},{"lineNumber":46,"author":{"gitId":"daniellimws"},"content":"        boolean isTaskIncluded \u003d importanceFilter.isTaskIncluded(task);"},{"lineNumber":47,"author":{"gitId":"daniellimws"},"content":"        assertFalse(isTaskIncluded);"},{"lineNumber":48,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"daniellimws"},"content":"}"}],"authorContributionMap":{"Kafcis":3,"daniellimws":46}},{"path":"src/test/java/athena/tasklist/TaskListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"alstontham"},"content":"package athena.tasklist;"},{"lineNumber":2,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":3,"author":{"gitId":"wish2023"},"content":"import athena.Forecast;"},{"lineNumber":4,"author":{"gitId":"alstontham"},"content":"import athena.Importance;"},{"lineNumber":5,"author":{"gitId":"alstontham"},"content":"import athena.TaskList;"},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":"import athena.common.utils.DateUtils;"},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.TaskNotFoundException;"},{"lineNumber":9,"author":{"gitId":"alstontham"},"content":"import athena.task.Task;"},{"lineNumber":10,"author":{"gitId":"wish2023"},"content":"import athena.task.taskfilter.ForecastFilter;"},{"lineNumber":11,"author":{"gitId":"wish2023"},"content":"import athena.task.taskfilter.ImportanceFilter;"},{"lineNumber":12,"author":{"gitId":"alstontham"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":13,"author":{"gitId":"alstontham"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":15,"author":{"gitId":"daniellimws"},"content":"import java.time.LocalDate;"},{"lineNumber":16,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":17,"author":{"gitId":"alstontham"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":18,"author":{"gitId":"daniellimws"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":19,"author":{"gitId":"daniellimws"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":20,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":21,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"alstontham"},"content":" * Tests methods of TaskList."},{"lineNumber":23,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":24,"author":{"gitId":"alstontham"},"content":"class TaskListTest {"},{"lineNumber":25,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":26,"author":{"gitId":"daniellimws"},"content":"    private TaskList testTaskList;"},{"lineNumber":27,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":28,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"alstontham"},"content":"     * Creates a new task list before every test."},{"lineNumber":30,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"alstontham"},"content":"    @BeforeEach"},{"lineNumber":32,"author":{"gitId":"daniellimws"},"content":"    public void setUp() throws CommandException {"},{"lineNumber":33,"author":{"gitId":"daniellimws"},"content":"        setupTestTaskList();"},{"lineNumber":34,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":36,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"daniellimws"},"content":"     * Tests that the max number is updated when adding a task with a larger task number through a Task object."},{"lineNumber":38,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"daniellimws"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"daniellimws"},"content":"    void addTask_givenTaskWithLargerTaskNumber_correctMaxNumber() throws CommandException {"},{"lineNumber":41,"author":{"gitId":"daniellimws"},"content":"        int testMaxNumber \u003d 5;"},{"lineNumber":42,"author":{"gitId":"daniellimws"},"content":"        testTaskList.addTask(new Task(\"tres\", \"1100\","},{"lineNumber":43,"author":{"gitId":"wish2023"},"content":"                \"2\", \"16-09-2020\", \"13-11-2021\", Importance.LOW,"},{"lineNumber":44,"author":{"gitId":"daniellimws"},"content":"                \"Refer to slides\", testMaxNumber, false));"},{"lineNumber":45,"author":{"gitId":"daniellimws"},"content":"        assertEquals(testTaskList.getMaxNumber(), testMaxNumber);"},{"lineNumber":46,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":48,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"daniellimws"},"content":"     * Tests that the max number is updated when adding a task with a larger task number through providing the"},{"lineNumber":50,"author":{"gitId":"daniellimws"},"content":"     * parameters."},{"lineNumber":51,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"daniellimws"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"daniellimws"},"content":"    void addTask_givenLargerTaskNumber_correctMaxNumber() throws CommandException {"},{"lineNumber":54,"author":{"gitId":"daniellimws"},"content":"        String todayDateString \u003d LocalDate.now().toString();"},{"lineNumber":55,"author":{"gitId":"daniellimws"},"content":"        int testMaxNumber \u003d 100;"},{"lineNumber":56,"author":{"gitId":"wish2023"},"content":"        testTaskList.addTask(testMaxNumber, \"big number\", \"0900\","},{"lineNumber":57,"author":{"gitId":"wish2023"},"content":"                \"2\", \"16-09-2020\", \"13-11-2021\", Importance.HIGH,"},{"lineNumber":58,"author":{"gitId":"daniellimws"},"content":"                \"Refer to slides\", false);"},{"lineNumber":59,"author":{"gitId":"daniellimws"},"content":"        assertEquals(testTaskList.getMaxNumber(), testMaxNumber);"},{"lineNumber":60,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":62,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"daniellimws"},"content":"     * Tests that the max number is incremented when adding a task without providing a task number."},{"lineNumber":64,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"daniellimws"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"daniellimws"},"content":"    void addTask_noGivenTaskNumber_maxNumberIncremented() throws CommandException {"},{"lineNumber":67,"author":{"gitId":"wish2023"},"content":"        String todayDateString \u003d DateUtils.formatDate(LocalDate.now());"},{"lineNumber":68,"author":{"gitId":"daniellimws"},"content":"        testTaskList.addTask(\"big number\", \"1400\","},{"lineNumber":69,"author":{"gitId":"daniellimws"},"content":"                \"2\", todayDateString, todayDateString, Importance.HIGH,"},{"lineNumber":70,"author":{"gitId":"daniellimws"},"content":"                \"Refer to slides\", false);"},{"lineNumber":71,"author":{"gitId":"daniellimws"},"content":"        assertEquals(testTaskList.getMaxNumber(), 3);"},{"lineNumber":72,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":74,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"alstontham"},"content":"     * Asserts if the deleted task at a certain index is the same task that is added to the task list."},{"lineNumber":76,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"alstontham"},"content":"     * @throws TaskNotFoundException Exception thrown when the given task number is not in the list"},{"lineNumber":78,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"alstontham"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"daniellimws"},"content":"    void deleteTask_validTaskIndex_correctTaskDeleted() throws CommandException {"},{"lineNumber":81,"author":{"gitId":"alstontham"},"content":"        Task expectedTask \u003d new Task(\"Assignment1\", \"1100\","},{"lineNumber":82,"author":{"gitId":"wish2023"},"content":"                \"2\", \"16-09-2020\", \"13-10-2021\", Importance.HIGH,"},{"lineNumber":83,"author":{"gitId":"Kafcis"},"content":"                \"Refer to slides\", 12, false);"},{"lineNumber":84,"author":{"gitId":"daniellimws"},"content":"        testTaskList.addTask(expectedTask);"},{"lineNumber":85,"author":{"gitId":"daniellimws"},"content":"        Task actualTask \u003d testTaskList.deleteTask(12);"},{"lineNumber":86,"author":{"gitId":"alstontham"},"content":"        assertEquals(expectedTask, actualTask);"},{"lineNumber":87,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":89,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"alstontham"},"content":"     * Asserts if the edited task at a certain index is the same task that is expected."},{"lineNumber":91,"author":{"gitId":"Kafcis"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"alstontham"},"content":"     * @throws TaskNotFoundException Exception thrown when the given task number is not in the list"},{"lineNumber":93,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"alstontham"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"daniellimws"},"content":"    void editTask_givenAttributes_attributeChanged() throws CommandException {"},{"lineNumber":96,"author":{"gitId":"alstontham"},"content":"        int index \u003d 0;"},{"lineNumber":97,"author":{"gitId":"alstontham"},"content":"        Task task \u003d new Task(\"Assignment1\", \"1100\","},{"lineNumber":98,"author":{"gitId":"wish2023"},"content":"                \"2\", \"16-09-2020\", \"13-10-2021\", Importance.HIGH,"},{"lineNumber":99,"author":{"gitId":"Kafcis"},"content":"                \"Refer to slides\", index, false);"},{"lineNumber":100,"author":{"gitId":"daniellimws"},"content":"        testTaskList.addTask(task);"},{"lineNumber":101,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":102,"author":{"gitId":"alstontham"},"content":"        Task expectedTask \u003d new Task(\"Assignment2\", \"1200\","},{"lineNumber":103,"author":{"gitId":"wish2023"},"content":"                \"4\", \"16-11-2020\", \"13-10-2021\", Importance.LOW,"},{"lineNumber":104,"author":{"gitId":"Kafcis"},"content":"                \"I have changed\", index, false);"},{"lineNumber":105,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":106,"author":{"gitId":"daniellimws"},"content":"        testTaskList.editTask(index, \"Assignment2\", \"1200\","},{"lineNumber":107,"author":{"gitId":"wish2023"},"content":"                \"4\", \"16-11-2020\", \"13-10-2021\", Importance.LOW,"},{"lineNumber":108,"author":{"gitId":"alstontham"},"content":"                \"I have changed\");"},{"lineNumber":109,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":110,"author":{"gitId":"daniellimws"},"content":"        assertEquals(testTaskList.getTaskFromNumber(index), expectedTask);"},{"lineNumber":111,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"alstontham"},"content":""},{"lineNumber":113,"author":{"gitId":"alstontham"},"content":"    @Test"},{"lineNumber":114,"author":{"gitId":"daniellimws"},"content":"    void getFilteredList_highImportance_returnTasksWithHighImportance() throws CommandException {"},{"lineNumber":115,"author":{"gitId":"daniellimws"},"content":"        TaskList expectedTaskList \u003d getImportanceTestExpectedTasks(Importance.HIGH);"},{"lineNumber":116,"author":{"gitId":"wish2023"},"content":"        ImportanceFilter highFilter \u003d new ImportanceFilter(Importance.HIGH);"},{"lineNumber":117,"author":{"gitId":"daniellimws"},"content":"        assertEquals(testTaskList.getFilteredList(highFilter), expectedTaskList);"},{"lineNumber":118,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":120,"author":{"gitId":"wish2023"},"content":"    @Test"},{"lineNumber":121,"author":{"gitId":"daniellimws"},"content":"    void getFilteredList_mediumImportance_returnTasksWithMediumImportance() throws CommandException {"},{"lineNumber":122,"author":{"gitId":"daniellimws"},"content":"        TaskList expectedTaskList \u003d getImportanceTestExpectedTasks(Importance.MEDIUM);"},{"lineNumber":123,"author":{"gitId":"wish2023"},"content":"        ImportanceFilter mediumFilter \u003d new ImportanceFilter(Importance.MEDIUM);"},{"lineNumber":124,"author":{"gitId":"daniellimws"},"content":"        assertEquals(testTaskList.getFilteredList(mediumFilter), expectedTaskList);"},{"lineNumber":125,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":127,"author":{"gitId":"wish2023"},"content":"    @Test"},{"lineNumber":128,"author":{"gitId":"daniellimws"},"content":"    void getFilteredList_lowImportance_returnTasksWithLowImportance() throws CommandException {"},{"lineNumber":129,"author":{"gitId":"daniellimws"},"content":"        TaskList expectedTaskList \u003d getImportanceTestExpectedTasks(Importance.LOW);"},{"lineNumber":130,"author":{"gitId":"wish2023"},"content":"        ImportanceFilter lowFilter \u003d new ImportanceFilter(Importance.LOW);"},{"lineNumber":131,"author":{"gitId":"daniellimws"},"content":"        assertEquals(testTaskList.getFilteredList(lowFilter), expectedTaskList);"},{"lineNumber":132,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":134,"author":{"gitId":"wish2023"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"daniellimws"},"content":"    void getFilteredList_allForecast_returnAllTasks() throws CommandException {"},{"lineNumber":136,"author":{"gitId":"daniellimws"},"content":"        TaskList expectedTaskList \u003d getForecastTestExpectedTasks(Forecast.ALL);"},{"lineNumber":137,"author":{"gitId":"wish2023"},"content":"        ForecastFilter allFilter \u003d new ForecastFilter(Forecast.ALL);"},{"lineNumber":138,"author":{"gitId":"daniellimws"},"content":"        assertEquals(testTaskList.getFilteredList(allFilter), expectedTaskList);"},{"lineNumber":139,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":141,"author":{"gitId":"wish2023"},"content":"    @Test"},{"lineNumber":142,"author":{"gitId":"daniellimws"},"content":"    void getFilteredList_weekForecast_returnTasksForWeek() throws CommandException {"},{"lineNumber":143,"author":{"gitId":"daniellimws"},"content":"        TaskList expectedTaskList \u003d getForecastTestExpectedTasks(Forecast.WEEK);"},{"lineNumber":144,"author":{"gitId":"wish2023"},"content":"        ForecastFilter weekFilter \u003d new ForecastFilter(Forecast.WEEK);"},{"lineNumber":145,"author":{"gitId":"wish2023"},"content":"        TaskList actualTaskList \u003d testTaskList.getFilteredList(weekFilter);"},{"lineNumber":146,"author":{"gitId":"wish2023"},"content":"        assertEquals(actualTaskList, expectedTaskList);"},{"lineNumber":147,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":149,"author":{"gitId":"wish2023"},"content":"    @Test"},{"lineNumber":150,"author":{"gitId":"daniellimws"},"content":"    void getFilteredList_todayForecast_returnTasksForToday() throws CommandException {"},{"lineNumber":151,"author":{"gitId":"Kafcis"},"content":"        TaskList expectedTaskList \u003d getForecastTestExpectedTasks(Forecast.DAY);"},{"lineNumber":152,"author":{"gitId":"Kafcis"},"content":"        ForecastFilter todayFilter \u003d new ForecastFilter(Forecast.DAY);"},{"lineNumber":153,"author":{"gitId":"wish2023"},"content":"        TaskList actualTaskList \u003d testTaskList.getFilteredList(todayFilter);"},{"lineNumber":154,"author":{"gitId":"wish2023"},"content":"        assertEquals(actualTaskList, expectedTaskList);"},{"lineNumber":155,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":157,"author":{"gitId":"daniellimws"},"content":"    @Test"},{"lineNumber":158,"author":{"gitId":"daniellimws"},"content":"    void containsTaskWithNumber_containsTask_returnsTrue() {"},{"lineNumber":159,"author":{"gitId":"daniellimws"},"content":"        assertTrue(testTaskList.containsTaskWithNumber(0));"},{"lineNumber":160,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":162,"author":{"gitId":"daniellimws"},"content":"    @Test"},{"lineNumber":163,"author":{"gitId":"daniellimws"},"content":"    void containsTaskWithNumber_doesNotContainTask_returnsFalse() {"},{"lineNumber":164,"author":{"gitId":"daniellimws"},"content":"        assertFalse(testTaskList.containsTaskWithNumber(3));"},{"lineNumber":165,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":167,"author":{"gitId":"daniellimws"},"content":"    private TaskList getImportanceTestExpectedTasks(Importance importance) throws CommandException {"},{"lineNumber":168,"author":{"gitId":"daniellimws"},"content":"        String dateInWeek \u003d DateUtils.formatDate(getDateInWeek());"},{"lineNumber":169,"author":{"gitId":"daniellimws"},"content":"        String todayDateString \u003d DateUtils.formatDate(LocalDate.now());"},{"lineNumber":170,"author":{"gitId":"wish2023"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":171,"author":{"gitId":"daniellimws"},"content":"        Task task1 \u003d new Task(\"uno\", \"1100\","},{"lineNumber":172,"author":{"gitId":"daniellimws"},"content":"                \"2\", todayDateString, todayDateString, Importance.HIGH,"},{"lineNumber":173,"author":{"gitId":"Kafcis"},"content":"                \"Refer to slides\", 0, false);"},{"lineNumber":174,"author":{"gitId":"daniellimws"},"content":"        Task task2 \u003d new Task(\"dos\", \"1100\","},{"lineNumber":175,"author":{"gitId":"daniellimws"},"content":"                \"2\", \"16-09-2020\", dateInWeek, Importance.MEDIUM,"},{"lineNumber":176,"author":{"gitId":"Kafcis"},"content":"                \"Refer to slides\", 1, false);"},{"lineNumber":177,"author":{"gitId":"daniellimws"},"content":"        Task task3 \u003d new Task(\"tres\", \"1100\","},{"lineNumber":178,"author":{"gitId":"wish2023"},"content":"                \"2\", \"16-09-2020\", \"13-11-2021\", Importance.LOW,"},{"lineNumber":179,"author":{"gitId":"Kafcis"},"content":"                \"Refer to slides\", 2, false);"},{"lineNumber":180,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":181,"author":{"gitId":"wish2023"},"content":"        if (importance \u003d\u003d Importance.HIGH) {"},{"lineNumber":182,"author":{"gitId":"daniellimws"},"content":"            taskList.addTask(task1);"},{"lineNumber":183,"author":{"gitId":"wish2023"},"content":"        } else if (importance \u003d\u003d Importance.MEDIUM) {"},{"lineNumber":184,"author":{"gitId":"daniellimws"},"content":"            taskList.addTask(task2);"},{"lineNumber":185,"author":{"gitId":"wish2023"},"content":"        } else if (importance \u003d\u003d Importance.LOW) {"},{"lineNumber":186,"author":{"gitId":"daniellimws"},"content":"            taskList.addTask(task3);"},{"lineNumber":187,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"wish2023"},"content":"        return taskList;"},{"lineNumber":189,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":191,"author":{"gitId":"daniellimws"},"content":"    private TaskList getForecastTestExpectedTasks(Forecast forecast) throws CommandException {"},{"lineNumber":192,"author":{"gitId":"daniellimws"},"content":"        String dateInWeek \u003d DateUtils.formatDate(getDateInWeek());"},{"lineNumber":193,"author":{"gitId":"daniellimws"},"content":"        String todayDateString \u003d DateUtils.formatDate(LocalDate.now());"},{"lineNumber":194,"author":{"gitId":"wish2023"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":195,"author":{"gitId":"daniellimws"},"content":"        Task task1 \u003d new Task(\"uno\", \"1100\","},{"lineNumber":196,"author":{"gitId":"daniellimws"},"content":"                \"2\", todayDateString, todayDateString, Importance.HIGH,"},{"lineNumber":197,"author":{"gitId":"Kafcis"},"content":"                \"Refer to slides\", 0, false);"},{"lineNumber":198,"author":{"gitId":"daniellimws"},"content":"        Task task2 \u003d new Task(\"dos\", \"1100\","},{"lineNumber":199,"author":{"gitId":"daniellimws"},"content":"                \"2\", \"16-09-2020\", dateInWeek, Importance.MEDIUM,"},{"lineNumber":200,"author":{"gitId":"Kafcis"},"content":"                \"Refer to slides\", 1, false);"},{"lineNumber":201,"author":{"gitId":"daniellimws"},"content":"        Task task3 \u003d new Task(\"tres\", \"1100\","},{"lineNumber":202,"author":{"gitId":"wish2023"},"content":"                \"2\", \"16-09-2020\", \"13-11-2021\", Importance.LOW,"},{"lineNumber":203,"author":{"gitId":"Kafcis"},"content":"                \"Refer to slides\", 2, false);"},{"lineNumber":204,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":205,"author":{"gitId":"daniellimws"},"content":"        if (forecast \u003d\u003d Forecast.ALL) {"},{"lineNumber":206,"author":{"gitId":"daniellimws"},"content":"            taskList.addTask(task1);"},{"lineNumber":207,"author":{"gitId":"daniellimws"},"content":"            taskList.addTask(task2);"},{"lineNumber":208,"author":{"gitId":"daniellimws"},"content":"            taskList.addTask(task3);"},{"lineNumber":209,"author":{"gitId":"wish2023"},"content":"        } else if (forecast \u003d\u003d Forecast.WEEK) {"},{"lineNumber":210,"author":{"gitId":"daniellimws"},"content":"            taskList.addTask(task1);"},{"lineNumber":211,"author":{"gitId":"daniellimws"},"content":"            taskList.addTask(task2);"},{"lineNumber":212,"author":{"gitId":"Kafcis"},"content":"        } else if (forecast \u003d\u003d Forecast.DAY) {"},{"lineNumber":213,"author":{"gitId":"daniellimws"},"content":"            taskList.addTask(task1);"},{"lineNumber":214,"author":{"gitId":"wish2023"},"content":"        }"},{"lineNumber":215,"author":{"gitId":"wish2023"},"content":"        return taskList;"},{"lineNumber":216,"author":{"gitId":"wish2023"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":218,"author":{"gitId":"wish2023"},"content":""},{"lineNumber":219,"author":{"gitId":"daniellimws"},"content":"    private void setupTestTaskList() throws CommandException {"},{"lineNumber":220,"author":{"gitId":"daniellimws"},"content":"        String dateInWeek \u003d DateUtils.formatDate(getDateInWeek());"},{"lineNumber":221,"author":{"gitId":"daniellimws"},"content":"        String todayDateString \u003d DateUtils.formatDate(LocalDate.now());"},{"lineNumber":222,"author":{"gitId":"daniellimws"},"content":"        testTaskList \u003d new TaskList();"},{"lineNumber":223,"author":{"gitId":"wish2023"},"content":"        int index \u003d 0;"},{"lineNumber":224,"author":{"gitId":"daniellimws"},"content":"        testTaskList.addTask(new Task(\"uno\", \"1100\","},{"lineNumber":225,"author":{"gitId":"daniellimws"},"content":"                \"2\", todayDateString, todayDateString, Importance.HIGH,"},{"lineNumber":226,"author":{"gitId":"Kafcis"},"content":"                \"Refer to slides\", index++, false));"},{"lineNumber":227,"author":{"gitId":"daniellimws"},"content":"        testTaskList.addTask(new Task(\"dos\", \"1100\","},{"lineNumber":228,"author":{"gitId":"daniellimws"},"content":"                \"2\", \"16-09-2020\", dateInWeek, Importance.MEDIUM,"},{"lineNumber":229,"author":{"gitId":"Kafcis"},"content":"                \"Refer to slides\", index++, false));"},{"lineNumber":230,"author":{"gitId":"daniellimws"},"content":"        testTaskList.addTask(new Task(\"tres\", \"1100\","},{"lineNumber":231,"author":{"gitId":"wish2023"},"content":"                \"2\", \"16-09-2020\", \"13-11-2021\", Importance.LOW,"},{"lineNumber":232,"author":{"gitId":"Kafcis"},"content":"                \"Refer to slides\", index++, false));"},{"lineNumber":233,"author":{"gitId":"alstontham"},"content":"    }"},{"lineNumber":234,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":235,"author":{"gitId":"daniellimws"},"content":"    private LocalDate getDateInWeek() {"},{"lineNumber":236,"author":{"gitId":"daniellimws"},"content":"        LocalDate date \u003d DateUtils.getFirstDayOfWeek();"},{"lineNumber":237,"author":{"gitId":"wish2023"},"content":"        while (date.compareTo(LocalDate.now()) \u003c\u003d 0) {"},{"lineNumber":238,"author":{"gitId":"daniellimws"},"content":"            date \u003d date.plusDays(1);"},{"lineNumber":239,"author":{"gitId":"daniellimws"},"content":"        }"},{"lineNumber":240,"author":{"gitId":"daniellimws"},"content":"        return date;"},{"lineNumber":241,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":242,"author":{"gitId":"alstontham"},"content":"}"}],"authorContributionMap":{"alstontham":47,"Kafcis":17,"daniellimws":121,"wish2023":57}},{"path":"src/test/java/athena/timetable/TimetableDrawerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.timetable;"},{"lineNumber":2,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.Forecast;"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"import athena.Importance;"},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"import athena.TaskList;"},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":9,"author":{"gitId":"daniellimws"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitId":"daniellimws"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":11,"author":{"gitId":"daniellimws"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":13,"author":{"gitId":"daniellimws"},"content":"import static athena.common.utils.DateUtils.formatDate;"},{"lineNumber":14,"author":{"gitId":"daniellimws"},"content":"import static athena.timetable.TimetableTestsUtils.getThisWeekDates;"},{"lineNumber":15,"author":{"gitId":"daniellimws"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":16,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":17,"author":{"gitId":"daniellimws"},"content":"class TimetableDrawerTest {"},{"lineNumber":18,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":19,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"daniellimws"},"content":"     * Tests that the timetable from 8am to 12pm is drawn correctly."},{"lineNumber":21,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"daniellimws"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"daniellimws"},"content":"    void drawTimetable_start8End12_returnsCorrectlyDrawnTimetable() throws CommandException {"},{"lineNumber":24,"author":{"gitId":"daniellimws"},"content":"        TaskList taskList \u003d getOutputTestTaskList();"},{"lineNumber":25,"author":{"gitId":"daniellimws"},"content":"        ArrayList\u003cLocalDate\u003e dates \u003d getThisWeekDates();"},{"lineNumber":26,"author":{"gitId":"daniellimws"},"content":"        Timetable timetable \u003d new Timetable(taskList, Importance.ALL, Forecast.ALL);"},{"lineNumber":27,"author":{"gitId":"daniellimws"},"content":"        TimetableDrawer timetableDrawer \u003d new TimetableDrawer(timetable);"},{"lineNumber":28,"author":{"gitId":"daniellimws"},"content":"        String drawnTimetable \u003d timetableDrawer.drawTimetable(dates, 8, 12);"},{"lineNumber":29,"author":{"gitId":"daniellimws"},"content":"        String expectedDrawnTimetable \u003d"},{"lineNumber":30,"author":{"gitId":"daniellimws"},"content":"                \"+-------08---------09---------10---------11---------+\\n\""},{"lineNumber":31,"author":{"gitId":"daniellimws"},"content":"                        + \"|  DA0  |          |          |          |          |\\n\""},{"lineNumber":32,"author":{"gitId":"daniellimws"},"content":"                        + \"| DATE0 |          |          |          |          |\\n\""},{"lineNumber":33,"author":{"gitId":"daniellimws"},"content":"                        + \"+-------+----------+----------+----------+----------+\\n\""},{"lineNumber":34,"author":{"gitId":"daniellimws"},"content":"                        + \"|  DA1  | Assignment 1        |          |          |\\n\""},{"lineNumber":35,"author":{"gitId":"daniellimws"},"content":"                        + \"| DATE1 | [0]                 |          |          |\\n\""},{"lineNumber":36,"author":{"gitId":"daniellimws"},"content":"                        + \"+-------+----------+----------+----------+----------+\\n\""},{"lineNumber":37,"author":{"gitId":"daniellimws"},"content":"                        + \"|  DA2  |          | Tutorial 2          |          |\\n\""},{"lineNumber":38,"author":{"gitId":"daniellimws"},"content":"                        + \"| DATE2 |          | [1]                 |          |\\n\""},{"lineNumber":39,"author":{"gitId":"daniellimws"},"content":"                        + \"+-------+----------+----------+----------+----------+\\n\""},{"lineNumber":40,"author":{"gitId":"daniellimws"},"content":"                        + \"|  DA3  |          |          | OP 3                |\\n\""},{"lineNumber":41,"author":{"gitId":"daniellimws"},"content":"                        + \"| DATE3 |          |          | [2]                 |\\n\""},{"lineNumber":42,"author":{"gitId":"daniellimws"},"content":"                        + \"+-------+----------+----------+----------+----------+\\n\""},{"lineNumber":43,"author":{"gitId":"daniellimws"},"content":"                        + \"|  DA4  |          |          |          | TP 4     |\\n\""},{"lineNumber":44,"author":{"gitId":"daniellimws"},"content":"                        + \"| DATE4 |          |          |          | [3]      |\\n\""},{"lineNumber":45,"author":{"gitId":"daniellimws"},"content":"                        + \"+-------+----------+----------+----------+----------+\\n\""},{"lineNumber":46,"author":{"gitId":"daniellimws"},"content":"                        + \"|  DA5  |          |          |          |          |\\n\""},{"lineNumber":47,"author":{"gitId":"daniellimws"},"content":"                        + \"| DATE5 |          |          |          |          |\\n\""},{"lineNumber":48,"author":{"gitId":"daniellimws"},"content":"                        + \"+-------+----------+----------+----------+----------+\\n\""},{"lineNumber":49,"author":{"gitId":"daniellimws"},"content":"                        + \"|  DA6  |          |          |          |          |\\n\""},{"lineNumber":50,"author":{"gitId":"daniellimws"},"content":"                        + \"| DATE6 |          |          |          |          |\\n\""},{"lineNumber":51,"author":{"gitId":"daniellimws"},"content":"                        + \"+-------+----------+----------+----------+----------+\\n\";"},{"lineNumber":52,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":53,"author":{"gitId":"daniellimws"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM\");"},{"lineNumber":54,"author":{"gitId":"daniellimws"},"content":"        for (int i \u003d 0; i \u003c 7; i++) {"},{"lineNumber":55,"author":{"gitId":"daniellimws"},"content":"            LocalDate date \u003d dates.get(i);"},{"lineNumber":56,"author":{"gitId":"daniellimws"},"content":"            expectedDrawnTimetable \u003d expectedDrawnTimetable.replace(\"DATE\" + i, date.format(formatter));"},{"lineNumber":57,"author":{"gitId":"daniellimws"},"content":"            expectedDrawnTimetable \u003d expectedDrawnTimetable.replace(\"DA\" + i, date.getDayOfWeek().name()"},{"lineNumber":58,"author":{"gitId":"daniellimws"},"content":"                    .substring(0, 3));"},{"lineNumber":59,"author":{"gitId":"daniellimws"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":61,"author":{"gitId":"daniellimws"},"content":"        assertEquals(drawnTimetable, expectedDrawnTimetable);"},{"lineNumber":62,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":64,"author":{"gitId":"daniellimws"},"content":"    private TaskList getOutputTestTaskList() throws CommandException {"},{"lineNumber":65,"author":{"gitId":"daniellimws"},"content":"        ArrayList\u003cLocalDate\u003e dates \u003d getThisWeekDates();"},{"lineNumber":66,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":67,"author":{"gitId":"daniellimws"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":68,"author":{"gitId":"daniellimws"},"content":"        taskList.addTask(\"Assignment 1\", \"0800\", \"2\", \"01-01-2021\", formatDate(dates.get(1)),"},{"lineNumber":69,"author":{"gitId":"daniellimws"},"content":"                Importance.HIGH, \"Tough assignment\", false);"},{"lineNumber":70,"author":{"gitId":"daniellimws"},"content":"        taskList.addTask(\"Tutorial 2\", \"0900\", \"2\", \"01-01-2021\", formatDate(dates.get(2)),"},{"lineNumber":71,"author":{"gitId":"daniellimws"},"content":"                Importance.HIGH, \"Tough assignment\", false);"},{"lineNumber":72,"author":{"gitId":"daniellimws"},"content":"        taskList.addTask(\"OP 3\", \"1000\", \"2\", \"01-01-2021\", formatDate(dates.get(3)),"},{"lineNumber":73,"author":{"gitId":"daniellimws"},"content":"                Importance.HIGH, \"Tough assignment\", false);"},{"lineNumber":74,"author":{"gitId":"daniellimws"},"content":"        taskList.addTask(\"TP 4\", \"1100\", \"2\", \"01-01-2021\", formatDate(dates.get(4)),"},{"lineNumber":75,"author":{"gitId":"daniellimws"},"content":"                Importance.HIGH, \"Tough assignment\", false);"},{"lineNumber":76,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":77,"author":{"gitId":"daniellimws"},"content":"        return taskList;"},{"lineNumber":78,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"daniellimws"},"content":"}"}],"authorContributionMap":{"daniellimws":79}},{"path":"src/test/java/athena/timetable/TimetableTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.timetable;"},{"lineNumber":2,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import athena.Forecast;"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"import athena.Importance;"},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"import athena.TaskList;"},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":"import athena.exceptions.command.CommandException;"},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":"import athena.task.Task;"},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":9,"author":{"gitId":"daniellimws"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":11,"author":{"gitId":"daniellimws"},"content":"import java.time.LocalDate;"},{"lineNumber":12,"author":{"gitId":"daniellimws"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":14,"author":{"gitId":"daniellimws"},"content":"import static athena.common.utils.DateUtils.formatDate;"},{"lineNumber":15,"author":{"gitId":"daniellimws"},"content":"import static athena.timetable.TimetableTestsUtils.getThisWeekDates;"},{"lineNumber":16,"author":{"gitId":"daniellimws"},"content":"import static athena.timetable.TimetableTestsUtils.getUpcomingDates;"},{"lineNumber":17,"author":{"gitId":"daniellimws"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":18,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":19,"author":{"gitId":"alstontham"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"alstontham"},"content":" * Test methods of Timetable."},{"lineNumber":21,"author":{"gitId":"alstontham"},"content":" */"},{"lineNumber":22,"author":{"gitId":"daniellimws"},"content":"class TimetableTest {"},{"lineNumber":23,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":24,"author":{"gitId":"daniellimws"},"content":"    TaskList taskList;"},{"lineNumber":25,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":26,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"daniellimws"},"content":"     * Checks if the timetable returns today\u0027s task when forecast is DAY."},{"lineNumber":28,"author":{"gitId":"daniellimws"},"content":"     * Integration test between TaskList, TaskFilter and Timetable."},{"lineNumber":29,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"daniellimws"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"daniellimws"},"content":"    void getTimetable_dayFilter_returnsTodayTasks() throws CommandException {"},{"lineNumber":32,"author":{"gitId":"daniellimws"},"content":"        final ArrayList\u003cTimetableDay\u003e days \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitId":"daniellimws"},"content":"        ArrayList\u003cLocalDate\u003e dates \u003d getThisWeekDates();"},{"lineNumber":34,"author":{"gitId":"daniellimws"},"content":"        TimetableDay day;"},{"lineNumber":35,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":36,"author":{"gitId":"daniellimws"},"content":"        day \u003d new TimetableDay(dates.get(0));"},{"lineNumber":37,"author":{"gitId":"daniellimws"},"content":"        day.addTask(new Task(\"Assignment 1\", \"1600\", \"2\", \"01-01-2021\","},{"lineNumber":38,"author":{"gitId":"daniellimws"},"content":"                formatDate(dates.get(0)), Importance.HIGH, \"Tough assignment\", 0, false));"},{"lineNumber":39,"author":{"gitId":"daniellimws"},"content":"        days.add(day);"},{"lineNumber":40,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":41,"author":{"gitId":"daniellimws"},"content":"        Timetable timetable \u003d new Timetable(taskList, Importance.ALL, Forecast.DAY);"},{"lineNumber":42,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":43,"author":{"gitId":"daniellimws"},"content":"        assertEquals(timetable.getTimetableDays(), days);"},{"lineNumber":44,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":46,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"daniellimws"},"content":"     * Checks if the timetable returns all tasks within a week when there is no filter."},{"lineNumber":48,"author":{"gitId":"daniellimws"},"content":"     * Integration test between TaskList, TaskFilter and Timetable."},{"lineNumber":49,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"daniellimws"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"daniellimws"},"content":"    void getTimetable_noFilter_returnsWeekTasks() throws CommandException {"},{"lineNumber":52,"author":{"gitId":"daniellimws"},"content":"        final ArrayList\u003cTimetableDay\u003e days \u003d new ArrayList\u003c\u003e();"},{"lineNumber":53,"author":{"gitId":"daniellimws"},"content":"        ArrayList\u003cLocalDate\u003e dates \u003d getThisWeekDates();"},{"lineNumber":54,"author":{"gitId":"daniellimws"},"content":"        TimetableDay day;"},{"lineNumber":55,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":56,"author":{"gitId":"daniellimws"},"content":"        day \u003d new TimetableDay(dates.get(0));"},{"lineNumber":57,"author":{"gitId":"wish2023"},"content":"        day.addTask(new Task(\"Assignment 1\", \"1600\", \"2\", \"01-01-2021\","},{"lineNumber":58,"author":{"gitId":"daniellimws"},"content":"                formatDate(dates.get(0)), Importance.HIGH, \"Tough assignment\", 0, false));"},{"lineNumber":59,"author":{"gitId":"daniellimws"},"content":"        days.add(day);"},{"lineNumber":60,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":61,"author":{"gitId":"daniellimws"},"content":"        day \u003d new TimetableDay(dates.get(1));"},{"lineNumber":62,"author":{"gitId":"wish2023"},"content":"        day.addTask(new Task(\"Assignment 2\", \"1600\", \"2\", \"01-01-2021\","},{"lineNumber":63,"author":{"gitId":"daniellimws"},"content":"                formatDate(dates.get(1)), Importance.MEDIUM, \"Tough assignment\", 1, false));"},{"lineNumber":64,"author":{"gitId":"daniellimws"},"content":"        days.add(day);"},{"lineNumber":65,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":66,"author":{"gitId":"daniellimws"},"content":"        day \u003d new TimetableDay(dates.get(2));"},{"lineNumber":67,"author":{"gitId":"wish2023"},"content":"        day.addTask(new Task(\"Assignment 3\", \"1000\", \"2\", \"01-01-2021\","},{"lineNumber":68,"author":{"gitId":"daniellimws"},"content":"                formatDate(dates.get(2)), Importance.LOW, \"Tough assignment\", 2, false));"},{"lineNumber":69,"author":{"gitId":"wish2023"},"content":"        day.addTask(new Task(\"Assignment 4\", \"1300\", \"2\", \"01-01-2021\","},{"lineNumber":70,"author":{"gitId":"daniellimws"},"content":"                formatDate(dates.get(2)), Importance.MEDIUM, \"Tough assignment\", 3, false));"},{"lineNumber":71,"author":{"gitId":"wish2023"},"content":"        day.addTask(new Task(\"Assignment 5\", \"1600\", \"2\", \"01-01-2021\","},{"lineNumber":72,"author":{"gitId":"daniellimws"},"content":"                formatDate(dates.get(2)), Importance.HIGH, \"Tough assignment\", 4, false));"},{"lineNumber":73,"author":{"gitId":"daniellimws"},"content":"        days.add(day);"},{"lineNumber":74,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":75,"author":{"gitId":"daniellimws"},"content":"        day \u003d new TimetableDay(dates.get(3));"},{"lineNumber":76,"author":{"gitId":"wish2023"},"content":"        day.addTask(new Task(\"Assignment 6\", \"1600\", \"2\", \"01-01-2021\","},{"lineNumber":77,"author":{"gitId":"daniellimws"},"content":"                formatDate(dates.get(3)), Importance.MEDIUM, \"Tough assignment\", 5, false));"},{"lineNumber":78,"author":{"gitId":"wish2023"},"content":"        day.addTask(new Task(\"Assignment 7\", \"1900\", \"2\", \"01-01-2021\","},{"lineNumber":79,"author":{"gitId":"daniellimws"},"content":"                formatDate(dates.get(3)), Importance.HIGH, \"Tough assignment\", 6, false));"},{"lineNumber":80,"author":{"gitId":"wish2023"},"content":"        day.addTask(new Task(\"Assignment 8\", \"2100\", \"2\", \"01-01-2021\","},{"lineNumber":81,"author":{"gitId":"daniellimws"},"content":"                formatDate(dates.get(3)), Importance.MEDIUM, \"Tough assignment\", 7, false));"},{"lineNumber":82,"author":{"gitId":"daniellimws"},"content":"        days.add(day);"},{"lineNumber":83,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":84,"author":{"gitId":"daniellimws"},"content":"        day \u003d new TimetableDay(dates.get(4));"},{"lineNumber":85,"author":{"gitId":"wish2023"},"content":"        day.addTask(new Task(\"Assignment 9\", \"1600\", \"2\", \"01-01-2021\","},{"lineNumber":86,"author":{"gitId":"daniellimws"},"content":"                formatDate(dates.get(4)), Importance.LOW, \"Tough assignment\", 8, false));"},{"lineNumber":87,"author":{"gitId":"wish2023"},"content":"        day.addTask(new Task(\"Assignment 10\", \"1300\", \"2\", \"01-01-2021\","},{"lineNumber":88,"author":{"gitId":"daniellimws"},"content":"                formatDate(dates.get(4)), Importance.MEDIUM, \"Tough assignment\", 9, false));"},{"lineNumber":89,"author":{"gitId":"daniellimws"},"content":"        days.add(day);"},{"lineNumber":90,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":91,"author":{"gitId":"daniellimws"},"content":"        Timetable timetable \u003d new Timetable(taskList);"},{"lineNumber":92,"author":{"gitId":"daniellimws"},"content":"        assertEquals(timetable.getTimetableDays(), days);"},{"lineNumber":93,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":95,"author":{"gitId":"alstontham"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"alstontham"},"content":"     * Checks if the timetable returns only high importance tasks with the high importance filter."},{"lineNumber":97,"author":{"gitId":"daniellimws"},"content":"     * Integration test between TaskList, TaskFilter and Timetable."},{"lineNumber":98,"author":{"gitId":"alstontham"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"daniellimws"},"content":"    @Test"},{"lineNumber":100,"author":{"gitId":"daniellimws"},"content":"    void getTimetable_highImportanceFilter_returnsHighImportanceTasks() throws CommandException {"},{"lineNumber":101,"author":{"gitId":"daniellimws"},"content":"        final ArrayList\u003cTimetableDay\u003e days \u003d new ArrayList\u003c\u003e();"},{"lineNumber":102,"author":{"gitId":"daniellimws"},"content":"        ArrayList\u003cLocalDate\u003e dates \u003d getUpcomingDates(14);"},{"lineNumber":103,"author":{"gitId":"daniellimws"},"content":"        TimetableDay day;"},{"lineNumber":104,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":105,"author":{"gitId":"daniellimws"},"content":"        day \u003d new TimetableDay(dates.get(0));"},{"lineNumber":106,"author":{"gitId":"wish2023"},"content":"        day.addTask(new Task(\"Assignment 1\", \"1600\", \"2\", \"01-01-2021\","},{"lineNumber":107,"author":{"gitId":"daniellimws"},"content":"                formatDate(dates.get(0)), Importance.HIGH, \"Tough assignment\", 0, false));"},{"lineNumber":108,"author":{"gitId":"daniellimws"},"content":"        days.add(day);"},{"lineNumber":109,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":110,"author":{"gitId":"daniellimws"},"content":"        day \u003d new TimetableDay(dates.get(2));"},{"lineNumber":111,"author":{"gitId":"wish2023"},"content":"        day.addTask(new Task(\"Assignment 5\", \"1600\", \"2\", \"01-01-2021\","},{"lineNumber":112,"author":{"gitId":"daniellimws"},"content":"                formatDate(dates.get(2)), Importance.HIGH, \"Tough assignment\", 4, false));"},{"lineNumber":113,"author":{"gitId":"daniellimws"},"content":"        days.add(day);"},{"lineNumber":114,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":115,"author":{"gitId":"daniellimws"},"content":"        day \u003d new TimetableDay(dates.get(3));"},{"lineNumber":116,"author":{"gitId":"wish2023"},"content":"        day.addTask(new Task(\"Assignment 7\", \"1900\", \"2\", \"01-01-2021\","},{"lineNumber":117,"author":{"gitId":"daniellimws"},"content":"                formatDate(dates.get(3)), Importance.HIGH, \"Tough assignment\", 6, false));"},{"lineNumber":118,"author":{"gitId":"daniellimws"},"content":"        days.add(day);"},{"lineNumber":119,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":120,"author":{"gitId":"daniellimws"},"content":"        day \u003d new TimetableDay(dates.get(9));"},{"lineNumber":121,"author":{"gitId":"daniellimws"},"content":"        day.addTask(new Task(\"Assignment 11\", \"1300\", \"2\", \"01-01-2021\","},{"lineNumber":122,"author":{"gitId":"daniellimws"},"content":"                formatDate(dates.get(9)), Importance.HIGH, \"Tough assignment\", 10, false));"},{"lineNumber":123,"author":{"gitId":"daniellimws"},"content":"        days.add(day);"},{"lineNumber":124,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":125,"author":{"gitId":"daniellimws"},"content":"        Timetable timetable \u003d new Timetable(taskList, Importance.HIGH, Forecast.ALL);"},{"lineNumber":126,"author":{"gitId":"daniellimws"},"content":"        assertEquals(timetable.getTimetableDays(), days);"},{"lineNumber":127,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":129,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"daniellimws"},"content":"     * Checks if the timetable returns only low importance tasks in the week, with the LOW importance and"},{"lineNumber":131,"author":{"gitId":"daniellimws"},"content":"     * WEEK forecast filters."},{"lineNumber":132,"author":{"gitId":"daniellimws"},"content":"     * Integration test between TaskList, TaskFilter and Timetable."},{"lineNumber":133,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"daniellimws"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"daniellimws"},"content":"    void getTimetable_lowImportanceWeekForecast_returnsLowImportanceTasksInWeek() throws CommandException {"},{"lineNumber":136,"author":{"gitId":"daniellimws"},"content":"        final ArrayList\u003cTimetableDay\u003e days \u003d new ArrayList\u003c\u003e();"},{"lineNumber":137,"author":{"gitId":"daniellimws"},"content":"        ArrayList\u003cLocalDate\u003e dates \u003d getUpcomingDates(14);"},{"lineNumber":138,"author":{"gitId":"daniellimws"},"content":"        TimetableDay day;"},{"lineNumber":139,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":140,"author":{"gitId":"daniellimws"},"content":"        day \u003d new TimetableDay(dates.get(2));"},{"lineNumber":141,"author":{"gitId":"daniellimws"},"content":"        day.addTask(new Task(\"Assignment 3\", \"1000\", \"2\", \"01-01-2021\","},{"lineNumber":142,"author":{"gitId":"daniellimws"},"content":"                formatDate(dates.get(2)), Importance.LOW, \"Tough assignment\", 2, false));"},{"lineNumber":143,"author":{"gitId":"daniellimws"},"content":"        days.add(day);"},{"lineNumber":144,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":145,"author":{"gitId":"daniellimws"},"content":"        day \u003d new TimetableDay(dates.get(4));"},{"lineNumber":146,"author":{"gitId":"daniellimws"},"content":"        day.addTask(new Task(\"Assignment 9\", \"1600\", \"2\", \"01-01-2021\","},{"lineNumber":147,"author":{"gitId":"daniellimws"},"content":"                formatDate(dates.get(4)), Importance.LOW, \"Tough assignment\", 8, false));"},{"lineNumber":148,"author":{"gitId":"daniellimws"},"content":"        days.add(day);"},{"lineNumber":149,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":150,"author":{"gitId":"daniellimws"},"content":"        Timetable timetable \u003d new Timetable(taskList, Importance.LOW, Forecast.WEEK);"},{"lineNumber":151,"author":{"gitId":"daniellimws"},"content":"        assertEquals(timetable.getTimetableDays(), days);"},{"lineNumber":152,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":154,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"daniellimws"},"content":"     * Gets a task list filled with tasks for the tests."},{"lineNumber":156,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"daniellimws"},"content":"    @BeforeEach"},{"lineNumber":158,"author":{"gitId":"daniellimws"},"content":"    void setupTaskList() throws CommandException {"},{"lineNumber":159,"author":{"gitId":"daniellimws"},"content":"        ArrayList\u003cLocalDate\u003e dates \u003d getUpcomingDates(14);"},{"lineNumber":160,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":161,"author":{"gitId":"daniellimws"},"content":"        taskList \u003d new TaskList();"},{"lineNumber":162,"author":{"gitId":"daniellimws"},"content":"        taskList.addTask(0, \"Assignment 1\", \"1600\", \"2\", \"01-01-2021\", formatDate(dates.get(0)),"},{"lineNumber":163,"author":{"gitId":"daniellimws"},"content":"                Importance.HIGH, \"Tough assignment\", false);"},{"lineNumber":164,"author":{"gitId":"daniellimws"},"content":"        taskList.addTask(1, \"Assignment 2\", \"1600\", \"2\", \"01-01-2021\", formatDate(dates.get(1)),"},{"lineNumber":165,"author":{"gitId":"daniellimws"},"content":"                Importance.MEDIUM, \"Tough assignment\", false);"},{"lineNumber":166,"author":{"gitId":"daniellimws"},"content":"        taskList.addTask(2, \"Assignment 3\", \"1000\", \"2\", \"01-01-2021\", formatDate(dates.get(2)),"},{"lineNumber":167,"author":{"gitId":"daniellimws"},"content":"                Importance.LOW, \"Tough assignment\", false);"},{"lineNumber":168,"author":{"gitId":"daniellimws"},"content":"        taskList.addTask(3, \"Assignment 4\", \"1300\", \"2\", \"01-01-2021\", formatDate(dates.get(2)),"},{"lineNumber":169,"author":{"gitId":"daniellimws"},"content":"                Importance.MEDIUM, \"Tough assignment\", false);"},{"lineNumber":170,"author":{"gitId":"daniellimws"},"content":"        taskList.addTask(4, \"Assignment 5\", \"1600\", \"2\", \"01-01-2021\", formatDate(dates.get(2)),"},{"lineNumber":171,"author":{"gitId":"daniellimws"},"content":"                Importance.HIGH, \"Tough assignment\", false);"},{"lineNumber":172,"author":{"gitId":"daniellimws"},"content":"        taskList.addTask(5, \"Assignment 6\", \"1600\", \"2\", \"01-01-2021\", formatDate(dates.get(3)),"},{"lineNumber":173,"author":{"gitId":"daniellimws"},"content":"                Importance.MEDIUM, \"Tough assignment\", false);"},{"lineNumber":174,"author":{"gitId":"daniellimws"},"content":"        taskList.addTask(6, \"Assignment 7\", \"1900\", \"2\", \"01-01-2021\", formatDate(dates.get(3)),"},{"lineNumber":175,"author":{"gitId":"daniellimws"},"content":"                Importance.HIGH, \"Tough assignment\", false);"},{"lineNumber":176,"author":{"gitId":"daniellimws"},"content":"        taskList.addTask(7, \"Assignment 8\", \"2100\", \"2\", \"01-01-2021\", formatDate(dates.get(3)),"},{"lineNumber":177,"author":{"gitId":"daniellimws"},"content":"                Importance.MEDIUM, \"Tough assignment\", false);"},{"lineNumber":178,"author":{"gitId":"daniellimws"},"content":"        taskList.addTask(8, \"Assignment 9\", \"1600\", \"2\", \"01-01-2021\", formatDate(dates.get(4)),"},{"lineNumber":179,"author":{"gitId":"daniellimws"},"content":"                Importance.LOW, \"Tough assignment\", false);"},{"lineNumber":180,"author":{"gitId":"daniellimws"},"content":"        taskList.addTask(9, \"Assignment 10\", \"1300\", \"2\", \"01-01-2021\", formatDate(dates.get(4)),"},{"lineNumber":181,"author":{"gitId":"daniellimws"},"content":"                Importance.MEDIUM, \"Tough assignment\", false);"},{"lineNumber":182,"author":{"gitId":"daniellimws"},"content":"        taskList.addTask(10, \"Assignment 11\", \"1300\", \"2\", \"01-01-2021\", formatDate(dates.get(9)),"},{"lineNumber":183,"author":{"gitId":"daniellimws"},"content":"                Importance.HIGH, \"Tough assignment\", false);"},{"lineNumber":184,"author":{"gitId":"daniellimws"},"content":"        taskList.addTask(11, \"Assignment 12\", \"1300\", \"2\", \"01-01-2021\", formatDate(dates.get(10)),"},{"lineNumber":185,"author":{"gitId":"daniellimws"},"content":"                Importance.MEDIUM, \"Tough assignment\", false);"},{"lineNumber":186,"author":{"gitId":"daniellimws"},"content":"        taskList.addTask(12, \"Assignment 13\", \"1300\", \"2\", \"01-01-2021\", formatDate(dates.get(11)),"},{"lineNumber":187,"author":{"gitId":"daniellimws"},"content":"                Importance.LOW, \"Tough assignment\", false);"},{"lineNumber":188,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"daniellimws"},"content":"}"}],"authorContributionMap":{"alstontham":8,"daniellimws":168,"wish2023":13}},{"path":"src/test/java/athena/timetable/TimetableTestsUtils.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"package athena.timetable;"},{"lineNumber":2,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":"public class TimetableTestsUtils {"},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":"     * Generates a list of LocalDates starting from today and ending 6 days later (total 7 days)."},{"lineNumber":9,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"daniellimws"},"content":"     * @return List of dates for one week starting today."},{"lineNumber":11,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"daniellimws"},"content":"    static ArrayList\u003cLocalDate\u003e getThisWeekDates() {"},{"lineNumber":13,"author":{"gitId":"daniellimws"},"content":"        return getUpcomingDates(7);"},{"lineNumber":14,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"daniellimws"},"content":""},{"lineNumber":16,"author":{"gitId":"daniellimws"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"daniellimws"},"content":"     * Gets the upcoming dates starting from today in a list."},{"lineNumber":18,"author":{"gitId":"daniellimws"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"daniellimws"},"content":"     * @param days Number of days to get."},{"lineNumber":20,"author":{"gitId":"daniellimws"},"content":"     * @return List of upcoming dates."},{"lineNumber":21,"author":{"gitId":"daniellimws"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"daniellimws"},"content":"    static ArrayList\u003cLocalDate\u003e getUpcomingDates(int days) {"},{"lineNumber":23,"author":{"gitId":"daniellimws"},"content":"        ArrayList\u003cLocalDate\u003e dates \u003d new ArrayList\u003c\u003e();"},{"lineNumber":24,"author":{"gitId":"daniellimws"},"content":"        LocalDate date \u003d LocalDate.now();"},{"lineNumber":25,"author":{"gitId":"daniellimws"},"content":"        for (int i \u003d 0; i \u003c days; i++) {"},{"lineNumber":26,"author":{"gitId":"daniellimws"},"content":"            dates.add(date);"},{"lineNumber":27,"author":{"gitId":"daniellimws"},"content":"            date \u003d date.plusDays(1);"},{"lineNumber":28,"author":{"gitId":"daniellimws"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"daniellimws"},"content":"        return dates;"},{"lineNumber":30,"author":{"gitId":"daniellimws"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"daniellimws"},"content":"}"}],"authorContributionMap":{"daniellimws":31}},{"path":"text-ui-test/input.txt","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"daniellimws"},"content":"help"},{"lineNumber":2,"author":{"gitId":"daniellimws"},"content":"add n/Assignment1 t/1100 D/16-09-2020 d/2 r/today i/high a/Refer to lecture notes"},{"lineNumber":3,"author":{"gitId":"daniellimws"},"content":"list"},{"lineNumber":4,"author":{"gitId":"daniellimws"},"content":"list i/high"},{"lineNumber":5,"author":{"gitId":"daniellimws"},"content":"list i/medium"},{"lineNumber":6,"author":{"gitId":"daniellimws"},"content":"list f/week"},{"lineNumber":7,"author":{"gitId":"daniellimws"},"content":"list i/medium f/today"},{"lineNumber":8,"author":{"gitId":"daniellimws"},"content":"edit 1 n/Homework 1"},{"lineNumber":9,"author":{"gitId":"daniellimws"},"content":"list"},{"lineNumber":10,"author":{"gitId":"daniellimws"},"content":"done -1"},{"lineNumber":11,"author":{"gitId":"daniellimws"},"content":"done 4"},{"lineNumber":12,"author":{"gitId":"daniellimws"},"content":"done 1"},{"lineNumber":13,"author":{"gitId":"daniellimws"},"content":"list"},{"lineNumber":14,"author":{"gitId":"daniellimws"},"content":"delete -1"},{"lineNumber":15,"author":{"gitId":"daniellimws"},"content":"delete 1"},{"lineNumber":16,"author":{"gitId":"daniellimws"},"content":"delete 10"},{"lineNumber":17,"author":{"gitId":"daniellimws"},"content":"list f/all"},{"lineNumber":18,"author":{"gitId":"daniellimws"},"content":"exit"}],"authorContributionMap":{"daniellimws":18}},{"path":"text-ui-test/runtest.bat","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@echo off"},{"lineNumber":2,"author":{"gitId":"-"},"content":"setlocal enableextensions"},{"lineNumber":3,"author":{"gitId":"-"},"content":"pushd %~dp0"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"cd .."},{"lineNumber":6,"author":{"gitId":"-"},"content":"call gradlew clean shadowJar"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"cd build\\libs"},{"lineNumber":9,"author":{"gitId":"-"},"content":"for /f \"tokens\u003d*\" %%a in ("},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \u0027dir /b *.jar\u0027"},{"lineNumber":11,"author":{"gitId":"-"},"content":") do ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    set jarloc\u003d%%a"},{"lineNumber":13,"author":{"gitId":"-"},"content":")"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"alstontham"},"content":"java -jar %jarloc% \u003c ..\\..\\text-athenaUi-test\\input.txt \u003e ..\\..\\text-athenaUi-test\\ACTUAL.TXT"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"alstontham"},"content":"cd ..\\..\\text-athenaUi-test"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!"}],"authorContributionMap":{"alstontham":2,"-":17}}]
