[
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wish2023"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Daniel | [Github](https://github.com/daniellimws) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wish2023"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Vishesh | [Github](https://github.com/wish2023) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wish2023"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Amanda | [Github](https://github.com/amanda-chua) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wish2023"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Alston | [Github](https://github.com/alstontham) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wish2023"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Marcus | [Github](https://github.com/Kafcis) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "alstontham": 1,
      "-": 4,
      "wish2023": 5
    }
  },
  {
    "path": "src/main/java/athena/Athena.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "package athena;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.exceptions.AddException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "public class Athena {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public Athena() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        storage \u003d new Storage(\"data.csv\", ui);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        Athena athena \u003d new Athena();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        athena.runProgram();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void runProgram() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        String inputString;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        Command userCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        taskList \u003d storage.loadTaskListData();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        Scanner input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                inputString \u003d input.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                userCommand \u003d parser.parse(inputString, taskList, ui);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                userCommand.execute(taskList, ui);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                isExit \u003d userCommand.getIsExit();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            } catch (AddException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                e.getErrorMessage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            continue;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 38,
      "Kafcis": 3,
      "amanda-chua": 2,
      "daniellimws": 4,
      "wish2023": 1
    }
  },
  {
    "path": "src/main/java/athena/Forecast.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wish2023"
        },
        "content": "package athena;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wish2023"
        },
        "content": "public enum Forecast {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    TODAY, WEEK, ALL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wish2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wish2023": 5
    }
  },
  {
    "path": "src/main/java/athena/Importance.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wish2023"
        },
        "content": "package athena;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wish2023"
        },
        "content": "public enum Importance {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    HIGH, MEDIUM, LOW, ALL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wish2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wish2023": 5
    }
  },
  {
    "path": "src/main/java/athena/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "package athena;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import athena.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.commands.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import athena.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import athena.commands.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import athena.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import athena.commands.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import athena.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import athena.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " * Handles parsing of user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static final String COMMAND_WORD_DELIMITER \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static final String NAME_DELIMITER \u003d \"n/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static final String TIME_DELIMITER \u003d \"t/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static final String DURATION_DELIMITER \u003d \"d/\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static final String DEADLINE_DELIMITER \u003d \"D/\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static final String RECURRENCE_DELIMITER \u003d \"r/\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static final String IMPORTANCE_DELIMITER \u003d \"i/\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static final String ADDITIONAL_NOTES_DELIMITER \u003d \"a/\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static final String FORECAST_DELIMITER \u003d \"f/\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Get parameters description."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskInformation String representing task information"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param delimiter       String representing parameter delimiter"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param paramPosition   Integer representing position of parameter"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param defaultValue    String representing default value"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @return Description of parameter"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public static String getParameterDesc(String taskInformation, String delimiter, int paramPosition,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                                          String defaultValue) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String param;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        if (paramPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            param \u003d defaultValue;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            String[] retrieveParamInfo \u003d taskInformation.split(delimiter, 2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            String retrievedParamInfo \u003d retrieveParamInfo[1];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            int paramNextSlash \u003d retrievedParamInfo.indexOf(\"/\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            if (paramNextSlash \u003d\u003d -1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                param \u003d retrievedParamInfo;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                param \u003d retrievedParamInfo.substring(0, (paramNextSlash - 2));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return param;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Parses user input when command is add."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskInfo      String representing task information"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param namePos       Integer representing position of name parameter"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param timePos       Integer representing position of time parameter"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param durationPos   Integer representing position of duration parameter"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param deadlinePos   Integer representing position of deadline parameter"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param recurrencePos Integer representing position of recurrence parameter"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param importancePos Integer representing position of importance parameter"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param addNotesPos   Integer representing position of additional notes parameter"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @return command object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static Command parseAddCommand(String taskInfo, int namePos, int timePos, int durationPos, int deadlinePos,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                                          int recurrencePos, int importancePos, int addNotesPos) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String nullDefault \u003d \"\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String name \u003d getParameterDesc(taskInfo, NAME_DELIMITER, namePos, nullDefault);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String time \u003d getParameterDesc(taskInfo, TIME_DELIMITER, timePos, nullDefault);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String durationDefault \u003d \"1 hour\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String duration \u003d getParameterDesc(taskInfo, DURATION_DELIMITER, durationPos, durationDefault);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String deadlineDefault \u003d \"No deadline\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String deadline \u003d getParameterDesc(taskInfo, DEADLINE_DELIMITER, deadlinePos, deadlineDefault);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        String recurrenceDefault \u003d \"today\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String recurrence \u003d getParameterDesc(taskInfo, RECURRENCE_DELIMITER, recurrencePos, recurrenceDefault);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String importanceDefault \u003d \"medium\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String importance \u003d getParameterDesc(taskInfo, IMPORTANCE_DELIMITER, importancePos, importanceDefault);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String notesDefault \u003d \"No notes\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String notes \u003d getParameterDesc(taskInfo, ADDITIONAL_NOTES_DELIMITER, addNotesPos, notesDefault);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        Command command \u003d new AddCommand(name, time, duration, deadline, recurrence, importance, notes);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Parses user input when command is edit."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskInfo      String representing task information"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param namePos       Integer representing position of name parameter"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param timePos       Integer representing position of time parameter"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param durationPos   Integer representing position of duration parameter"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param deadlinePos   Integer representing position of deadline parameter"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param recurrencePos Integer representing position of recurrence parameter"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param importancePos Integer representing position of importance parameter"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param addNotesPos   Integer representing position of additional notes parameter"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @return command object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static Command parseEditCommand(String taskInfo, int namePos, int timePos, int durationPos, int deadlinePos,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                                           int recurrencePos, int importancePos,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                                           int addNotesPos, TaskList taskList) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        int index \u003d getIndex(taskInfo);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        String name \u003d getParameterDesc(taskInfo, NAME_DELIMITER, namePos,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                taskList.at(index).getName());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        String time \u003d getParameterDesc(taskInfo, TIME_DELIMITER, timePos,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                taskList.at(index).getStartTime());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        String duration \u003d getParameterDesc(taskInfo, DURATION_DELIMITER, durationPos,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                taskList.at(index).getDuration());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        String deadline \u003d getParameterDesc(taskInfo, DEADLINE_DELIMITER, deadlinePos,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                taskList.at(index).getDeadline());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        String recurrence \u003d getParameterDesc(taskInfo, RECURRENCE_DELIMITER, recurrencePos,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                taskList.at(index).getRecurrence());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        String importance \u003d getParameterDesc(taskInfo, IMPORTANCE_DELIMITER, importancePos,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                taskList.at(index).getImportance().toString()).toUpperCase();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        String notes \u003d getParameterDesc(taskInfo, ADDITIONAL_NOTES_DELIMITER, addNotesPos,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                taskList.at(index).getNotes());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        Command command \u003d new EditCommand(index, name, time, duration, deadline, recurrence,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                Importance.valueOf(importance.toUpperCase()), notes);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Parses task information to get index of task."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskInfo String representing task information"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @return index of task"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    private static int getIndex(String taskInfo) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        int indexNextSlash \u003d taskInfo.indexOf(\"/\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        int index \u003d Integer.parseInt(taskInfo.substring(0, (indexNextSlash - 2)));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Parses user input when command is list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskInfo      String representing task information"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param importancePos Integer representing position of importance parameter"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param forecastPos   Integer representing position of forecast parameter"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @return command object"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static Command parseListCommand(String taskInfo, int importancePos, int forecastPos) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        String importanceDefault \u003d \"ALL\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        String forecastDefault \u003d \"TODAY\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        String importance \u003d getParameterDesc(taskInfo, IMPORTANCE_DELIMITER, importancePos, importanceDefault);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        String forecast \u003d getParameterDesc(taskInfo, FORECAST_DELIMITER, forecastPos, forecastDefault);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Command command \u003d new ListCommand(Importance.valueOf(importance.toUpperCase()),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                Forecast.valueOf(forecast.toUpperCase()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Parses user input and recognises what type of command"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * and parameters the user typed."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param input String representing user input"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskList TaskList"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param ui Ui"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @return new Command object based on what the user input is"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public static Command parse(String input, TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String[] commandAndDetails \u003d input.split(COMMAND_WORD_DELIMITER, 2);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String commandType \u003d commandAndDetails[0];"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String taskInfo \u003d \"\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        if (commandAndDetails.length \u003e 1) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            taskInfo \u003d commandAndDetails[1];"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        int namePos \u003d taskInfo.indexOf(NAME_DELIMITER);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        int timePos \u003d taskInfo.indexOf(TIME_DELIMITER);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        int durationPos \u003d taskInfo.indexOf(DURATION_DELIMITER);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        int deadlinePos \u003d taskInfo.indexOf(DEADLINE_DELIMITER);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        int recurrencePos \u003d taskInfo.indexOf(RECURRENCE_DELIMITER);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        int importancePos \u003d taskInfo.indexOf(IMPORTANCE_DELIMITER);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        int addNotesPos \u003d taskInfo.indexOf(ADDITIONAL_NOTES_DELIMITER);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        int forecastPos \u003d taskInfo.indexOf(FORECAST_DELIMITER);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        case \"add\": {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return parseAddCommand(taskInfo, namePos, timePos, durationPos, deadlinePos,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                    recurrencePos, importancePos, addNotesPos);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        case \"edit\": {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                return parseEditCommand(taskInfo, namePos, timePos, durationPos, deadlinePos,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                        recurrencePos, importancePos, addNotesPos, taskList);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                ui.printTaskNotFound(getIndex(taskInfo));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        case \"list\": {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            return parseListCommand(taskInfo, importancePos, forecastPos);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        case \"done\": {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(taskInfo);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return new DoneCommand(taskIndex);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        case \"delete\": {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(taskInfo);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return new DeleteCommand(taskIndex);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        case \"exit\": {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kafcis": 9,
      "alstontham": 2,
      "amanda-chua": 170,
      "daniellimws": 3,
      "wish2023": 40
    }
  },
  {
    "path": "src/main/java/athena/Recurrence.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wish2023"
        },
        "content": "package athena;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wish2023"
        },
        "content": "public enum Recurrence {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    TODAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wish2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wish2023": 5
    }
  },
  {
    "path": "src/main/java/athena/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "package athena;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    private int size;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    public Storage(String filepath, Ui ui) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        this.filePath \u003d filepath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    public void saveTaskListData(TaskList tasks) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            FileWriter csvWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            for (Task task : tasks.getTasks()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                csvWriter.append(task.getName() + \",\" + task.getStartTime() + \",\" + task.getDuration() + \",\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                        + task.getDeadline() + \",\" + task.getRecurrence() + \",\" + task.getImportance() + \",\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                        + task.getNotes() + \",\" + task.getIndex() + \"\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            csvWriter.close();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    public TaskList loadTaskListData() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        File csvFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        TaskList output \u003d new TaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        int maxIndex \u003d -1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        if (csvFile.isFile()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            String row;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            BufferedReader csvReader \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                csvReader \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                while ((row \u003d csvReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                    String[] data \u003d row.split(\",\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                    output.addTask(data[0], data[1], data[2], data[3], data[4],"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                            Importance.valueOf(data[5].toUpperCase()), data[6], Integer.parseInt(data[7]));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                    maxIndex \u003d Integer.parseInt(data[7]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                csvReader.close();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                ui.printInvalidTask();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        output.setMaxIndex(maxIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kafcis": 66,
      "alstontham": 3,
      "daniellimws": 4
    }
  },
  {
    "path": "src/main/java/athena/TaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wish2023"
        },
        "content": "package athena;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.taskfilter.TaskFilter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wish2023"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public static final String NO_FILTER \u003d \"\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    private int maxIndex \u003d -1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        tasks.addAll(taskList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    private Task createTask(String name, String startTime,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                            String duration, String deadline, String recurrence, Importance importance, String notes,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                            int index) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task task \u003d new Task(name, startTime, duration,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                deadline, recurrence, importance, notes, index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * Returns size of the task list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @return Size of the task list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public int getTaskListSize() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * Marks specified task as done."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * Lets the user know specified task has been marked as done."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param taskNumber Position of task in task list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @return Task marked as done"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public Task markTaskAsDone(int taskNumber) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        tasks.get(taskNumber).setDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return tasks.get(taskNumber);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param task Task to be added."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param name       Name of task"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param startTime  Start time of task"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param duration   Duration of task"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param deadline   Deadline of task"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param recurrence Recurrence of task"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param importance Importance of task"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param notes      Additional notes of task"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param index      Index of the task"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    public void addTask(String name, String startTime, String duration,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                        String deadline, String recurrence, Importance importance, String notes, int index) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        Task task \u003d createTask(name, startTime, duration, deadline, recurrence, importance, notes, index);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param name       Name of task"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param startTime  Start time of task"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param duration   Duration of task"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param deadline   Deadline of task"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param recurrence Recurrence of task"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param importance Importance of task"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param notes      Additional notes of task"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public void addTask(String name, String startTime, String duration,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                        String deadline, String recurrence, Importance importance, String notes) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        maxIndex++;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        addTask(name, startTime, duration, deadline, recurrence, importance, notes, maxIndex);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * Returns the task description at the specified position in task list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param index Position of task in the task list"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @return Task description"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public String getDescription(int index) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return tasks.get(index).toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * Deletes the task at the specified position in the task list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param taskNumber Position of task in task list"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @return Task deleted"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    public Task deleteTask(int taskNumber) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        Task taskToDelete \u003d null;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        int counter \u003d -1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            if (t.getIndex() \u003d\u003d taskNumber) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                taskToDelete \u003d tasks.get(taskNumber);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                index \u003d counter;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return taskToDelete;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * Edits a task in the task list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param taskNumber Index of task"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param name       Name of task"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param startTime  Start time of task"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param duration   Duration of task"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param deadline   Deadline of task"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param recurrence Recurrence of task"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param importance Importance of task"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param notes      Additional notes of task"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public void editTask(int taskNumber, String name, String startTime, String duration,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                         String deadline, String recurrence, Importance importance, String notes) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        tasks.get(taskNumber).edit(name, startTime, duration,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                deadline, recurrence, importance, notes);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Returns a filtered task list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param taskFilter The filter that decides which tasks are printed"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @return Filtered task list"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public TaskList getFilteredList(TaskFilter taskFilter) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            if (taskFilter.isTaskIncluded(task)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                filteredTasks.add(task);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return new TaskList(filteredTasks);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    public int getMaxIndex() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        return maxIndex;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    public void setMaxIndex(int maxIndex) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        this.maxIndex \u003d maxIndex;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public Task at(int index) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wish2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kafcis": 31,
      "daniellimws": 42,
      "wish2023": 107
    }
  },
  {
    "path": "src/main/java/athena/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package athena;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.timetable.Timetable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * Represents all of the text that the user sees on the command line."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints the first message that the user sees upon launching the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(\"Hello! I\u0027m the Goddess of Wisdom and War, the mighty ATHENA!\\n\" + \"...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"Okay okay I\u0027m not a Goddess but I am your Automated Timetable Helper Encourager n\u0027 Assistant!\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"What can I do? Are you challenging me to a duel?\\n\" + \"...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"Oh you mean in terms of tasks? Just type \\\"help\\\" to witness my mighty repertoire!\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"So, what would you like to do today?\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints out a message verifying which task the user has added to their list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskName       The name of the task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskStartTime  When the task is scheduled to start"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskDuration   How long the task will last for"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskDeadline   When the task is due"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskRecurrence When will the task repeat"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskImportance What is the importance of the task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskNotes      Any additional notes the user has added to the task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printTaskAdded(String taskName, String taskStartTime, String taskDuration, String taskDeadline,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                               String taskRecurrence, String taskImportance, String taskNotes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(\"You\u0027ve successfully added \" + taskName + \" to your list!\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"It will start at \" + taskStartTime + \" and finish on \" + taskDeadline + \".\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"You should spend a total of \" + taskDuration + \" hours on it.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"It is set to happen \" + taskRecurrence + \" and has an importance of \" + taskImportance + \".\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"Additionally, you\u0027ve also added these additional notes!\\n\" + taskNotes + \".\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"Looks like another mission to complete! Let\u0027s do it!\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Lists out the the tasks that the user has added."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(\"Here\u0027s your list of monsters you\u0027ve been tasked to eliminate!\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            System.out.println((i + 1) + \". \" + taskList.get(i));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints out a message verifying that the task the user specified has been marked as done."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param task The task that the user marked as done."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printTaskDone(Task task) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(\"A job well done! I\u0027ve slayed the-- I mean, marked the task \" + task + \"as complete!\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints out a message verifying that the task the user specified has been edited, and shows the user the"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * new task details."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskIndex      The index of the task on the task list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskName       The name of the task"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskStartTime  When the task is scheduled to start"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskDuration   How long the task will last for"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskDeadline   When the task is due"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskRecurrence When will the task repeat"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskImportance What is the importance of the task"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskNotes      Any additional notes the user has added to the task"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printTaskEdited(int taskIndex, String taskName, String taskStartTime, String taskDuration,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                                String taskDeadline, String taskRecurrence, Importance taskImportance,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                                String taskNotes) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(\"You\u0027ve changed the details of task number \" + taskIndex + \": \" + taskName + \"?\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"Here are the new details of your task!\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"Start Time: \" + taskStartTime + \"\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"Duration: \" + taskDuration + \"\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"Due Date: \" + taskDeadline + \"\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"Recurrence: \" + taskRecurrence + \"\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"Importance: \" + taskImportance + \"\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"Additional Notes: \" + taskNotes + \"\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"The mistakes of the past have been vanquished!\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints out a message verifying that the task the user specified has been deleted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param task The task that the user has deleted."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    public void printTaskDeleted(Task task, String taskRestore) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(\"Are we pretending the task \" + task + \" never existed? Very well...\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        System.out.println(\"We both know the human propensity to make mistakes, if you want it back just type\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                + taskRestore + \"\\nYou can thank me later \\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints out a help menu of all available tasks that ATHENA is able to do."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printHelp() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(\"Not sure of what I\u0027m capable of doing? Well here\u0027s a list just for you!\\n\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"To add a task (parameters in square brackets are optional fields):\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"add n/NAME t/TIME [d/DURATION] [D/DEADLINE] [r/RECURRENCE] [i/IMPORTANCE] [a/ADDITIONAL-NOTES]\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"e.g. add n/Assignment1 t/1100 d/16/09 D/2 r/Monday i/high a/Refer to lecture notes\\n\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"To list your current tasks:\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"list f/FORECAST i/IMPORTANCE\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"e.g. list f/WEEK i/medium\\n\\n\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"To mark a task as done:\\n\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"done INDEX\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"e.g. done 2\\n\\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"To edit a task (parameters in square brackets are optional fields):\\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                + \"edit INDEX [n/NAME] [t/TIME] [d/DURATION] [D/DEADLINE] [r/RECURRENCE] [i/IMPORTANCE]\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                + \"[a/ADDITIONAL-NOTES]\\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"e.g. edit 2 n/Assignment1 t/1100 d/16/09 D/2 r/Monday i/high a/Refer to lecture notes\\n\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"To delete a task:\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"delete INDEX\\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"e.g. delete 2\\n\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"To say farewell to me, ATHENA:\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"exit\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"But why would you want to leave me anyways? Hmph.\\n\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    public void printInvalidTask() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        System.out.println(\"One of the tasks in the archives seems to be cursed, I have disposed of it!\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    public void printTaskNotFound(int taskNumber) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        System.out.println(\"The task with the label \" + taskNumber + \" cannot be found\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printAddException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(\"You haven\u0027t specified the name or the start time of the task! \""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"How can we go on a conquest if we don\u0027t know what to slay and what time to start?\\n\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints a message when the user chooses to exit the program."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printExitMessage() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(\"Going so soon? Well I\u0027ll be here the next time you need me. Farewell!\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Prints the timetable."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param timetable Timetable to be printed."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void printTimetable(Timetable timetable) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        System.out.println(timetable);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    //message that is printed out while awaiting the next command"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void nextCommandPrompt() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    //access from Parser"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void lastSaved() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void successMessage() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    //will have many of these, depending on how many types of errors we have"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void errorMessage() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 151,
      "Kafcis": 18,
      "daniellimws": 14
    }
  },
  {
    "path": "src/main/java/athena/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "package athena.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.Importance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.exceptions.AddException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " * Handles adding tasks to the Tasks list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private String taskStartTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private String taskDuration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private String taskDeadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private String taskRecurrence;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private Importance taskImportance;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private String taskNotes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public AddCommand(String name, String startTime, String duration, String deadline,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                      String recurrence, String importance, String notes) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskName \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        assert !taskName.equals(\"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskStartTime \u003d startTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        assert !taskStartTime.equals(\"\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskDuration \u003d duration;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskDeadline \u003d deadline;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskRecurrence \u003d recurrence;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskImportance \u003d Importance.valueOf(importance.toUpperCase());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskNotes \u003d notes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Adds a task to the Tasks list and"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * calls Ui to print out the task added."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskList Tasks List"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param ui       Ui"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void execute(TaskList taskList, Ui ui) throws AddException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        if (taskName.equals(\"\") || taskStartTime.equals(\"\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            throw new AddException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskList.addTask(taskName, taskStartTime, taskDuration, taskDeadline,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                taskRecurrence, taskImportance, taskNotes);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        ui.printTaskAdded(taskName, taskStartTime, taskDuration, taskDeadline,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                taskRecurrence, taskImportance.toString(), taskNotes);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        if (!(o instanceof AddCommand)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        AddCommand that \u003d (AddCommand) o;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return Objects.equals(taskName, that.taskName)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                \u0026\u0026 Objects.equals(taskStartTime, that.taskStartTime)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                \u0026\u0026 Objects.equals(taskDuration, that.taskDuration)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                \u0026\u0026 Objects.equals(taskDeadline, that.taskDeadline)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                \u0026\u0026 Objects.equals(taskRecurrence, that.taskRecurrence)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                \u0026\u0026 taskImportance \u003d\u003d that.taskImportance"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                \u0026\u0026 Objects.equals(taskNotes, that.taskNotes);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return Objects.hash(taskName, taskStartTime, taskDuration,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                taskDeadline, taskRecurrence, taskImportance, taskNotes);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 4,
      "amanda-chua": 69,
      "daniellimws": 4
    }
  },
  {
    "path": "src/main/java/athena/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "package athena.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.exceptions.AddException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " * Abstract Command class for Command objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * For Commands execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskList Tasks List"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param ui       Ui"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public abstract void execute(TaskList taskList, Ui ui) throws AddException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public boolean getIsExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 3,
      "amanda-chua": 25
    }
  },
  {
    "path": "src/main/java/athena/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "package athena.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " * Handles the delete command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private int deleteIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        deleteIndex \u003d index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Deletes a task from the Tasks list and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * calls Ui to print task deleted."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskList Tasks List"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param ui       Ui"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            Task deletedTask \u003d taskList.deleteTask(deleteIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            String taskRestore \u003d deletedTask.getTaskRestore();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            ui.printTaskDeleted(deletedTask, taskRestore);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            ui.printTaskNotFound(deleteIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        if (!(o instanceof DeleteCommand)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        DeleteCommand that \u003d (DeleteCommand) o;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return deleteIndex \u003d\u003d that.deleteIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return Objects.hash(deleteIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kafcis": 7,
      "amanda-chua": 45,
      "daniellimws": 1
    }
  },
  {
    "path": "src/main/java/athena/commands/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "package athena.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " * Handles the done command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private int doneIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        doneIndex \u003d index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Marks a task as done from the Tasks list and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * calls Ui to print task marked as done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskList Tasks List"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param ui       Ui"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            Task taskDone \u003d taskList.markTaskAsDone(doneIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            ui.printTaskDone(taskDone);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            ui.printTaskNotFound(doneIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        if (!(o instanceof DoneCommand)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        DoneCommand that \u003d (DoneCommand) o;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return doneIndex \u003d\u003d that.doneIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return Objects.hash(doneIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amanda-chua": 51,
      "daniellimws": 1
    }
  },
  {
    "path": "src/main/java/athena/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "package athena.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.Importance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private String taskStartTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private String taskDuration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private String taskDeadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private String taskRecurrence;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private Importance taskImportance;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private String taskNotes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public EditCommand(int index, String name, String startTime, String duration, String deadline,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                       String recurrence, Importance importance, String notes) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskIndex \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskName \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskStartTime \u003d startTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskDuration \u003d duration;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskDeadline \u003d deadline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskRecurrence \u003d recurrence;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskImportance \u003d importance;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskNotes \u003d notes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Edits a task from the Tasks list and"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * calls Ui to print task edited."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskList Tasks List"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param ui       Ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            taskList.editTask(taskIndex, taskName, taskStartTime, taskDuration, taskDeadline,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                    taskRecurrence, taskImportance, taskNotes);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            ui.printTaskEdited(taskIndex, taskName, taskStartTime, taskDuration, taskDeadline,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                    taskRecurrence, taskImportance, taskNotes);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            ui.printTaskNotFound(taskIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        if (!(o instanceof EditCommand)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        EditCommand that \u003d (EditCommand) o;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return taskIndex \u003d\u003d that.taskIndex"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                \u0026\u0026 Objects.equals(taskName, that.taskName)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                \u0026\u0026 Objects.equals(taskStartTime, that.taskStartTime)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                \u0026\u0026 Objects.equals(taskDuration, that.taskDuration)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                \u0026\u0026 Objects.equals(taskDeadline, that.taskDeadline)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                \u0026\u0026 Objects.equals(taskRecurrence, that.taskRecurrence)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                \u0026\u0026 taskImportance \u003d\u003d that.taskImportance"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                \u0026\u0026 Objects.equals(taskNotes, that.taskNotes);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return Objects.hash(taskIndex, taskName, taskStartTime, taskDuration,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                taskDeadline, taskRecurrence, taskImportance, taskNotes);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amanda-chua": 71,
      "daniellimws": 3
    }
  },
  {
    "path": "src/main/java/athena/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "package athena.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " * Handles the exit command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Calls Ui to print exit message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskList Tasks List"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param ui       Ui"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        ui.printExitMessage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amanda-chua": 26
    }
  },
  {
    "path": "src/main/java/athena/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "package athena.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " * Handles the help command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Calls Ui to print help output."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskList Tasks List"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param ui       Ui"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        ui.printHelp();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amanda-chua": 21
    }
  },
  {
    "path": "src/main/java/athena/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "package athena.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.Forecast;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.Importance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.task.taskfilter.ForecastFilter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.taskfilter.ImportanceFilter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.taskfilter.TaskFilter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.timetable.Timetable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " * Handles the list command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private Importance taskImportance;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    private Forecast taskForecast;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public ListCommand(Importance importance, Forecast forecast) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskImportance \u003d importance;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskForecast \u003d forecast;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Calls TaskList to filter the list based on importance and"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * calls Ui to print the list of tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskList Tasks List"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param ui Ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        ImportanceFilter importanceFilter \u003d new ImportanceFilter(taskImportance);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        ForecastFilter forecastFilter \u003d new ForecastFilter(taskForecast);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Timetable timetable \u003d new Timetable(taskList, importanceFilter, forecastFilter);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        ui.printTimetable(timetable);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        if (!(o instanceof ListCommand)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        ListCommand that \u003d (ListCommand) o;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return taskImportance \u003d\u003d that.taskImportance \u0026\u0026 taskForecast \u003d\u003d that.taskForecast;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return Objects.hash(taskImportance, taskForecast);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amanda-chua": 44,
      "daniellimws": 7,
      "wish2023": 7
    }
  },
  {
    "path": "src/main/java/athena/exceptions/AddException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package athena.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public class AddException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public AddException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void getErrorMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        ui.printAddException();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 14
    }
  },
  {
    "path": "src/main/java/athena/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "package athena.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.Importance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.Recurrence;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.commands.EditCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public static final String YES \u003d \"Y\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public static final String NO \u003d \"N\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private String duration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private String deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private String recurrence;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    private LocalDate recurrenceDate \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private boolean isDone \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private Importance importance;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private String notes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private String getStatus() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return (isDone ? YES : NO);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public Task(String name, String startTime, String duration, String deadline,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                String recurrence, Importance importance, String notes, int index) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.importance \u003d importance;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        if (recurrence.toUpperCase().equals(Recurrence.TODAY.toString())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            recurrenceDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            recurrenceDate \u003d LocalDate.parse(recurrence, formatter);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Edits the features of the task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param name       New task name"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param startTime  New task start time"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param duration   New task duration"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param deadline   New task deadline"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param recurrence New task recurrence"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param importance New task importance"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param notes      New task notes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void edit(String name, String startTime, String duration,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                     String deadline, String recurrence, Importance importance, String notes) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        if (!name.equals(null)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        if (!startTime.equals(null)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        if (!duration.equals(null)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            this.duration \u003d duration;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        if (!deadline.equals(null)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        if (!recurrence.equals(null)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            if (recurrence.toUpperCase().equals(Recurrence.TODAY.toString())) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                recurrenceDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                recurrenceDate \u003d LocalDate.parse(recurrence, formatter);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        if (!importance.equals(null)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            this.importance \u003d importance;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        if (!notes.equals(null)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            this.notes \u003d notes;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Return the importance of the task."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return Importance of task"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public Importance getImportance() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return importance;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return Description of task"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public String getStartTime() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public String getDuration() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public String getNotes() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return notes;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public String getRecurrence() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return recurrence;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void setIndex(int index) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public String getTaskRestore() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        String taskRestore \u003d \"add n/\" + this.getName() + \" t/\" + this.getStartTime() + \" d/\" + this.getDuration()"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                + \" D/\" + this.getDeadline() + \" r/\" + this.getRecurrence() + \" t/\" + this.getImportance()"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                + \" a/\" + this.getNotes();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return taskRestore;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return getStatus() + \" \" + name + \" at \" + startTime + \" finish by \" + deadline;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Checks if 2 tasks have the exact same properties."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param task Task to compare with."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return Whether the tasks have the exact same properties."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public boolean equals(Task task) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return this.name.equals(task.name)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \u0026\u0026 this.startTime.equals(task.startTime)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \u0026\u0026 this.duration.equals(task.duration)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \u0026\u0026 this.deadline.equals(task.deadline)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \u0026\u0026 this.recurrence.equals(task.recurrence)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \u0026\u0026 this.importance.equals(task.importance)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \u0026\u0026 this.notes.equals(task.notes)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \u0026\u0026 this.index \u003d\u003d task.index;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        if (!(o instanceof Task)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task that \u003d (Task) o;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return name.equals(that.name)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \u0026\u0026 Objects.equals(startTime, that.startTime)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \u0026\u0026 Objects.equals(duration, that.duration)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \u0026\u0026 Objects.equals(deadline, that.deadline)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \u0026\u0026 Objects.equals(recurrence, that.recurrence)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \u0026\u0026 importance \u003d\u003d that.importance"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \u0026\u0026 Objects.equals(notes, that.notes)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \u0026\u0026 index \u003d\u003d that.index;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return recurrenceDate;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimws": 160,
      "wish2023": 47
    }
  },
  {
    "path": "src/main/java/athena/task/taskfilter/ForecastFilter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wish2023"
        },
        "content": "package athena.task.taskfilter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.Forecast;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import java.time.temporal.TemporalField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import java.time.temporal.WeekFields;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wish2023"
        },
        "content": "public class ForecastFilter extends TaskFilter {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    private Forecast forecast;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    private LocalDate todayDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public ForecastFilter(Forecast forecast) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        this.forecast \u003d forecast;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * Checks whether to include a task based on its date."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param task Task to check."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @return Whether the task should be included."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public boolean isTaskIncluded(Task task) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        boolean isTaskIncluded;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        if (forecast \u003d\u003d Forecast.ALL) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            isTaskIncluded \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        } else if (forecast \u003d\u003d Forecast.WEEK) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            int currentWeekNumber \u003d getWeekNumber(todayDate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            LocalDate taskDate \u003d task.getDate();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            int taskWeekNumber \u003d getWeekNumber(taskDate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            isTaskIncluded \u003d (currentWeekNumber \u003d\u003d taskWeekNumber);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            LocalDate taskDate \u003d task.getDate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            isTaskIncluded \u003d taskDate.equals(todayDate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return isTaskIncluded;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    private static int getWeekNumber(LocalDate taskDate) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        TemporalField woy \u003d WeekFields.of(Locale.getDefault()).weekOfWeekBasedYear();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return taskDate.get(woy);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wish2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wish2023": 49
    }
  },
  {
    "path": "src/main/java/athena/task/taskfilter/ImportanceFilter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "package athena.task.taskfilter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.Importance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "public class ImportanceFilter extends TaskFilter {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private Importance importance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public ImportanceFilter(Importance importance) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.importance \u003d importance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Checks whether to include a task based on it\u0027s importance."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param task Task to check."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return Whether the task should be included."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public boolean isTaskIncluded(Task task) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        boolean isTaskIncluded;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        if (importance \u003d\u003d Importance.ALL) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            isTaskIncluded \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            isTaskIncluded \u003d (task.getImportance() \u003d\u003d importance);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return isTaskIncluded;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimws": 23,
      "wish2023": 7
    }
  },
  {
    "path": "src/main/java/athena/task/taskfilter/TaskFilter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "package athena.task.taskfilter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimws"
        },
        "content": " * Contains information about how to filter a task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimws"
        },
        "content": " * This is used by athena.timetable.Timetable to filter out"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimws"
        },
        "content": " * tasks based on the user\u0027s request."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimws"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "public abstract class TaskFilter {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Should be overridden by children classes to filter a task based on certain"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * criteria."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param task Task to check."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return Whether the task should be included."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public abstract boolean isTaskIncluded(Task task);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimws": 19
    }
  },
  {
    "path": "src/main/java/athena/timetable/Timetable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "package athena.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.task.taskfilter.ForecastFilter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.task.taskfilter.ImportanceFilter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimws"
        },
        "content": " * Takes a TaskList to generate a timetable for the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimws"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "public class Timetable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private ArrayList\u003cTimetableDay\u003e timetableDays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public Timetable(TaskList taskList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        populateTimetable();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public Timetable(TaskList taskList, ImportanceFilter importanceFilter, ForecastFilter forecastFilter) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        this.taskList \u003d taskList.getFilteredList(importanceFilter).getFilteredList(forecastFilter);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        populateTimetable();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Getter for timetableDays."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return timetableDays."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public ArrayList\u003cTimetableDay\u003e getTimetableDays() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return timetableDays;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Setter for timetableDays."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void setTimetableDays(ArrayList\u003cTimetableDay\u003e timetableDays) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.timetableDays \u003d timetableDays;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Populates the timetable, represented by a list of TimetableDays with the information from the task list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * For this version, we only populate the timetable with the tasks for this week (starting from Monday)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private void populateTimetable() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.timetableDays \u003d new ArrayList\u003cTimetableDay\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TreeMap\u003cLocalDate, TimetableDay\u003e timetableDayMap \u003d new TreeMap\u003cLocalDate, TimetableDay\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        for (Task task : taskList.getTasks()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            LocalDate date \u003d task.getDate();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            TimetableDay timetableDay;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            if (timetableDayMap.containsKey(date)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                timetableDay \u003d timetableDayMap.get(date);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                timetableDay \u003d new TimetableDay(date);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                timetableDayMap.put(date, timetableDay);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            timetableDay.addTask(task);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        for (LocalDate key : timetableDayMap.keySet()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            timetableDays.add(timetableDayMap.get(key));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Generates a string to show the user the timetable."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return A string representing the timetable."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        for (TimetableDay timetableDay : timetableDays) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            message +\u003d timetableDay;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            message +\u003d \"\\n\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimws": 84,
      "wish2023": 5
    }
  },
  {
    "path": "src/main/java/athena/timetable/TimetableDay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "package athena.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimws"
        },
        "content": " * Represents a day in the timetable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimws"
        },
        "content": " * Contains the date and the list of tasks, which is a subset of all the tasks"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimws"
        },
        "content": " * that the user registered into the program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimws"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "public class TimetableDay {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Initializes the object with the date and an empty task list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param date Date represented by this object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public TimetableDay(LocalDate date) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Getter for date."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return date."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Getter for taskList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return taskList."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public TaskList getTaskList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param task Task to be added."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Generates a string containing the date and list of tasks that is to"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * be printed to the user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return A string containing the date and list of tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        String message \u003d date.toString() + \":\\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        if (taskList.getTasks().isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            message +\u003d \"Got no tasks for this day\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            for (Task task : taskList.getTasks()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                message +\u003d String.format(\"- %s at %s finish by %s [%d]\\n\", task.getName(), task.getStartTime(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                        task.getDeadline(), task.getIndex());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimws": 73
    }
  },
  {
    "path": "src/test/java/athena/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "package athena;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.commands.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.commands.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.commands.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void parse_unknownCommandWord_returnsHelp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final String input \u003d \"unknown arguments\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        parseAndAssertCommandType(input, HelpCommand.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Tests for 0-argument commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void parse_helpCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final String input \u003d \"help\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        parseAndAssertCommandType(input, HelpCommand.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void parse_exitCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final String input \u003d \"exit\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        parseAndAssertCommandType(input, ExitCommand.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Tests for single index argument commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void parse_deleteCommandNumericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final int testNumber \u003d 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final String input \u003d \"delete 1\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final DeleteCommand parsedCommand \u003d parseAndAssertCommandType(input, DeleteCommand.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final DeleteCommand expectedCommand \u003d new DeleteCommand(testNumber);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        assertEquals(parsedCommand, expectedCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void parse_doneCommandNumericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final int testNumber \u003d 1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final String input \u003d \"done 1\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final DoneCommand parsedCommand \u003d parseAndAssertCommandType(input, DoneCommand.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final DoneCommand expectedCommand \u003d new DoneCommand(testNumber);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        assertEquals(parsedCommand, expectedCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Tests for multiple argument commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void parse_addCommandArg_ParsedCorrectly() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final String input \u003d \"add n/Assignment1 t/1100 D/16-09-2020 d/2 hours r/Monday i/high a/Refer to slides\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final AddCommand parsedCommand \u003d parseAndAssertCommandType(input, AddCommand.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final AddCommand expectedCommand \u003d new AddCommand(\"Assignment1\", \"1100\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                \"2 hours\", \"16-09-2020\", \"Monday\",\"high\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                \"Refer to slides\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        assertEquals(parsedCommand, expectedCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public void parse_editCommandAllArg_ParsedCorrectly() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        taskList.addTask(\"name\", \"st\", \"dur\", \"deadline\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \"12-10-2020\", Importance.LOW, \"dummyNote\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        final int testNumber \u003d 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        final String input \u003d \"edit 0 n/Assignment1 t/1100 D/16-09-2020 d/2 hours r/13-10-2020 i/high a/Refer to slides\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final EditCommand parsedCommand \u003d parseAndAssertCommandType(input, EditCommand.class);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final EditCommand expectedCommand \u003d new EditCommand(testNumber,\"Assignment1\", \"1100\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \"2 hours\", \"16-09-2020\", \"13-10-2020\", Importance.valueOf(\"high\".toUpperCase()),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                \"Refer to slides\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        assertEquals(parsedCommand, expectedCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public void parse_editCommandSomeArg_ParsedCorrectly() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        taskList.addTask(\"name\", \"st\", \"dur\", \"deadline\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \"12-10-2020\", Importance.LOW, \"dummyNote\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        final int testNumber \u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        final String input \u003d \"edit 0 n/I have changed a/I am not filling any other arguments\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        final EditCommand parsedCommand \u003d parseAndAssertCommandType(input, EditCommand.class);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        final EditCommand expectedCommand \u003d new EditCommand(testNumber,\"I have changed\", \"st\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \"dur\", \"deadline\", \"12-10-2020\", Importance.valueOf(\"low\".toUpperCase()),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \"I am not filling any other arguments\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        assertEquals(parsedCommand, expectedCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void parse_listCommandArg_ParsedCorrectly() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final String input \u003d \"list f/WEEK i/medium\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final ListCommand parsedCommand \u003d parseAndAssertCommandType(input, ListCommand.class);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final ListCommand expectedCommand \u003d new ListCommand(Importance.MEDIUM, Forecast.WEEK);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        assertEquals(parsedCommand, expectedCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Utility methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Parses input and asserts the class of the returned command object."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param input                to be parsed"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param expectedCommandClass expected class of returned command"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @return the parsed command object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private \u003cT extends Command\u003e T parseAndAssertCommandType(String input, Class\u003cT\u003e expectedCommandClass) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        final Command result \u003d parser.parse(input, taskList, ui);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        assertTrue(result.getClass().isAssignableFrom(expectedCommandClass));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return (T) result;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amanda-chua": 114,
      "wish2023": 27
    }
  },
  {
    "path": "src/test/java/athena/TestSetup.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "package athena;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "public class TestSetup {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public static TaskList getTestTaskList() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(\"Assignment 1\", \"4pm\", \"2 hrs\", \"6pm\", \"12-12-2020\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.HIGH, \"Tough assignment\", 1);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(\"Assignment 2\", \"4pm\", \"2 hrs\", \"6pm\", \"13-12-2020\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.MEDIUM, \"Tough assignment\", 1);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(\"Assignment 3\", \"4pm\", \"2 hrs\", \"6pm\", \"14-12-2020\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.LOW, \"Tough assignment\", 1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(\"Assignment 4\", \"4pm\", \"2 hrs\", \"6pm\", \"14-12-2020\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.MEDIUM, \"Tough assignment\", 1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(\"Assignment 5\", \"4pm\", \"2 hrs\", \"6pm\", \"14-12-2020\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.HIGH, \"Tough assignment\", 1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(\"Assignment 6\", \"4pm\", \"2 hrs\", \"6pm\", \"15-12-2020\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.MEDIUM, \"Tough assignment\", 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(\"Assignment 7\", \"4pm\", \"2 hrs\", \"6pm\", \"15-12-2020\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.HIGH, \"Tough assignment\", 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(\"Assignment 8\", \"4pm\", \"2 hrs\", \"6pm\", \"15-12-2020\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.MEDIUM, \"Tough assignment\", 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(\"Assignment 9\", \"4pm\", \"2 hrs\", \"6pm\", \"16-12-2020\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.LOW, \"Tough assignment\", 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(\"Assignment 10\", \"4pm\", \"2 hrs\", \"6pm\", \"16-12-2020\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.MEDIUM, \"Tough assignment\", 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimws": 30
    }
  },
  {
    "path": "src/test/java/athena/taskfilter/ForecastFilterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wish2023"
        },
        "content": "package athena.taskfilter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.Forecast;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.Importance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.task.taskfilter.ForecastFilter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wish2023"
        },
        "content": "class ForecastFilterTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    void testIsTaskIncluded_all_returnsTrue() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        ForecastFilter forecastFilter \u003d new ForecastFilter(Forecast.ALL);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task inputTask \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \"20-12-2020\", Importance.MEDIUM, \"testNotes\", 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        boolean isTaskIncluded \u003d forecastFilter.isTaskIncluded(inputTask);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        assertEquals(isTaskIncluded, true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    void testIsTaskIncluded_week_returnsTrue() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        ForecastFilter forecastFilter \u003d new ForecastFilter(Forecast.WEEK);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task inputTask \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \"16-10-2020\", Importance.LOW, \"testNotes\", 0); // Tested on 12-10-2020"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        boolean isTaskIncluded \u003d forecastFilter.isTaskIncluded(inputTask);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        assertEquals(isTaskIncluded, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    void testIsTaskIncluded_week_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        ForecastFilter forecastFilter \u003d new ForecastFilter(Forecast.WEEK);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task inputTask \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \"23-10-2020\", Importance.LOW, \"testNotes\", 0); // Tested on 12-10-2020"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        boolean isTaskIncluded \u003d forecastFilter.isTaskIncluded(inputTask);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        assertEquals(isTaskIncluded, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    void testIsTaskIncluded_day_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        ForecastFilter forecastFilter \u003d new ForecastFilter(Forecast.TODAY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task inputTask \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \"12-10-2020\", Importance.LOW, \"testNotes\", 0); // Tested on 12-10-2020"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        boolean isTaskIncluded \u003d forecastFilter.isTaskIncluded(inputTask);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        assertEquals(isTaskIncluded, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    void testIsTaskIncluded_day_returnsFalse() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        ForecastFilter forecastFilter \u003d new ForecastFilter(Forecast.TODAY);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task inputTask \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \"13-10-2020\", Importance.LOW, \"testNotes\", 0); // Tested on 12-10-2020"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        boolean isTaskIncluded \u003d forecastFilter.isTaskIncluded(inputTask);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        assertEquals(isTaskIncluded, false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wish2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wish2023": 58
    }
  },
  {
    "path": "src/test/java/athena/tasklist/TaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wish2023"
        },
        "content": "package athena.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.Importance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wish2023"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    // Check for normal deletion, and then check for a deletion with index out of range"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    // TODO ^^"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    void deleteTask() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    void editTask() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task task \u003d new Task(\"Assignment1\", \"1100\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \"2 hours\", \"16-09-2020\", \"13-10-2020\", Importance.valueOf(\"high\".toUpperCase()),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \"Refer to slides\", index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task expectedTask \u003d new Task(\"Assignment2\", \"1200\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \"4 hours\", \"16-11-2020\", \"13-10-2020\", Importance.valueOf(\"low\".toUpperCase()),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \"I have changed\", index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        taskList.editTask(index, \"Assignment2\", \"1200\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \"4 hours\", \"16-11-2020\", \"13-10-2020\", Importance.valueOf(\"low\".toUpperCase()),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \"I have changed\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        assertEquals(taskList.at(index), expectedTask);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    // Filter list using high, low, medium importance"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    // Filter list using today, week, all forecast"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    // TODO ^^"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    void getFilteredList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wish2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wish2023": 55
    }
  },
  {
    "path": "src/test/java/athena/timetable/TimetableTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "package athena.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.Forecast;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.Importance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.TestSetup;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.task.taskfilter.ForecastFilter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.taskfilter.ImportanceFilter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "class TimetableTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    void getTimetable_noFilter_returnsAllTasks() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        final ArrayList\u003cTimetableDay\u003e days \u003d new ArrayList\u003cTimetableDay\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        LocalDate date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TimetableDay day;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        date \u003d LocalDate.parse(\"12-12-2020\", formatter);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day \u003d new TimetableDay(date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day.addTask(new Task(\"Assignment 1\", \"4pm\", \"2 hrs\", \"6pm\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"12-12-2020\", Importance.HIGH, \"Tough assignment\", 1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        days.add(day);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        date \u003d LocalDate.parse(\"13-12-2020\", formatter);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day \u003d new TimetableDay(date);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day.addTask(new Task(\"Assignment 2\", \"4pm\", \"2 hrs\", \"6pm\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"13-12-2020\", Importance.MEDIUM, \"Tough assignment\", 1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        days.add(day);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        date \u003d LocalDate.parse(\"14-12-2020\", formatter);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day \u003d new TimetableDay(date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day.addTask(new Task(\"Assignment 3\", \"4pm\", \"2 hrs\", \"6pm\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"14-12-2020\", Importance.LOW, \"Tough assignment\", 1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day.addTask(new Task(\"Assignment 4\", \"4pm\", \"2 hrs\", \"6pm\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"14-12-2020\", Importance.MEDIUM, \"Tough assignment\", 1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day.addTask(new Task(\"Assignment 5\", \"4pm\", \"2 hrs\", \"6pm\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"14-12-2020\", Importance.HIGH, \"Tough assignment\", 1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        days.add(day);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        date \u003d LocalDate.parse(\"15-12-2020\", formatter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day \u003d new TimetableDay(date);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day.addTask(new Task(\"Assignment 6\", \"4pm\", \"2 hrs\", \"6pm\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"15-12-2020\", Importance.MEDIUM, \"Tough assignment\", 1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day.addTask(new Task(\"Assignment 7\", \"4pm\", \"2 hrs\", \"6pm\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"15-12-2020\", Importance.HIGH, \"Tough assignment\", 1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day.addTask(new Task(\"Assignment 8\", \"4pm\", \"2 hrs\", \"6pm\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"15-12-2020\", Importance.MEDIUM, \"Tough assignment\", 1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        days.add(day);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        date \u003d LocalDate.parse(\"16-12-2020\", formatter);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day \u003d new TimetableDay(date);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day.addTask(new Task(\"Assignment 9\", \"4pm\", \"2 hrs\", \"6pm\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"16-12-2020\", Importance.LOW, \"Tough assignment\", 1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day.addTask(new Task(\"Assignment 10\", \"4pm\", \"2 hrs\", \"6pm\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"16-12-2020\", Importance.MEDIUM, \"Tough assignment\", 1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        days.add(day);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TaskList taskList \u003d TestSetup.getTestTaskList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        Timetable timetable \u003d new Timetable(taskList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertTrue(areTimetablesSame(timetable, days));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    void getTimetable_highImportanceFilter_returnsHighImportanceTasks() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        final ArrayList\u003cTimetableDay\u003e days \u003d new ArrayList\u003cTimetableDay\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        LocalDate date;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TimetableDay day;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        date \u003d LocalDate.parse(\"12-12-2020\", formatter);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day \u003d new TimetableDay(date);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day.addTask(new Task(\"Assignment 1\", \"4pm\", \"2 hrs\", \"6pm\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"12-12-2020\", Importance.HIGH, \"Tough assignment\", 1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        days.add(day);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        date \u003d LocalDate.parse(\"14-12-2020\", formatter);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day \u003d new TimetableDay(date);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day.addTask(new Task(\"Assignment 5\", \"4pm\", \"2 hrs\", \"6pm\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"14-12-2020\", Importance.HIGH, \"Tough assignment\", 1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        days.add(day);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        date \u003d LocalDate.parse(\"15-12-2020\", formatter);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day \u003d new TimetableDay(date);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day.addTask(new Task(\"Assignment 7\", \"4pm\", \"2 hrs\", \"6pm\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"15-12-2020\", Importance.HIGH, \"Tough assignment\", 1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        days.add(day);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TaskList taskList \u003d TestSetup.getTestTaskList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Timetable timetable \u003d new Timetable(taskList, new ImportanceFilter(Importance.HIGH),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                new ForecastFilter(Forecast.ALL));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertTrue(areTimetablesSame(timetable, days));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private boolean areTimetablesSame(Timetable timetable, ArrayList\u003cTimetableDay\u003e days) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        ArrayList\u003cTimetableDay\u003e timetableDays \u003d timetable.getTimetableDays();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        if (timetableDays.size() !\u003d days.size()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        for (int i \u003d 0; i \u003c timetableDays.size(); ++i) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            ArrayList\u003cTask\u003e tasks1 \u003d timetableDays.get(i).getTaskList().getTasks();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            ArrayList\u003cTask\u003e tasks2 \u003d days.get(i).getTaskList().getTasks();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            if (tasks1.size() !\u003d tasks2.size()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            for (int j \u003d 0; j \u003c tasks1.size(); ++j) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                if (!tasks1.get(j).equals(tasks2.get(j))) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimws": 126,
      "wish2023": 4
    }
  }
]
