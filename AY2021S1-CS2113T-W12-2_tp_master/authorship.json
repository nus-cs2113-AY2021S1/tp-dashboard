[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    compile group: \u0027org.fusesource.jansi\u0027, name: \u0027jansi\u0027, version: \u00271.8\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    mainClassName \u003d \"athena.Athena\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    archiveBaseName \u003d \"athena\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 1,
      "-": 44,
      "daniellimws": 3
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wish2023"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Daniel | [Github](https://github.com/daniellimws) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wish2023"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Vishesh | [Github](https://github.com/wish2023) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wish2023"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Amanda | [Github](https://github.com/amanda-chua) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wish2023"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Alston | [Github](https://github.com/alstontham) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wish2023"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Marcus | [Github](https://github.com/Kafcis) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "alstontham": 1,
      "-": 4,
      "wish2023": 5
    }
  },
  {
    "path": "docs/DevOps.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "## Build automation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "Given below are how to use Gradle for some important project tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "  e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "* **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "  e.g. `./gradlew shadowJar`."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "* **`run`**: Builds and runs the application.\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "  **`runShadow`**: Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "  **`checkstyleTest`**: Runs the code style check for the test code base."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "* **`test`**: Runs all tests.\u003c"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "  * `./gradlew test` — Runs all tests"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "  * `./gradlew clean test` — Cleans the project and runs tests"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "## Continuous integration (CI)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "## Making a release"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "1. Generate a fat JAR file using Gradle (i.e., `gradlew shadow`)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "2. Tag the repo with the version number. e.g. `v2.0`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "3. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created."
      }
    ],
    "authorContributionMap": {
      "daniellimws": 39
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "## Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "### Prerequisites"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "1. Ensure you have `JDK 11` installed in your computer."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "2. Install IntelliJ IDEA."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "### Setting up the project in your computer"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "1. Fork this repository, and clone the fork to your computer."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "2. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "3. Set up the correct JDK version for Gradle  "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   1. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   2. Click `New…` and select the directory where you installed `JDK 11`."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   3. Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "4. IntelliJ IDEA by default has the Gradle plugin installed. If you have disabled it, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   If your project involves GUI programming, similarly ensure the JavaFX plugin has not been disabled."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "5. Click `Import Project`(or `Open or Import` in newer version of Intellij)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "6. Locate the `build.gradle` file and select it. Click `OK`. If asked, choose to `Open as Project` (not `Open as File`)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "7. Click `OK` to accept the default settings if prompted. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "8. Wait for the importing process to finish, and you are good to go!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "## **Design \u0026 implementation**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the ATHENA. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "**`Main`** has one class called [`Athena`](https://github.com/AY2021S1-CS2113T-W12-2/tp/blob/master/src/main/java/athena/Athena.java). It is responsible for,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* At app launch: Initializes the components and connects them up with each other."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* At app shut down: Shuts down the components."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "The rest of the App consists of these components."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* [**`Ui`**](#ui-component): The UI of ATHENA."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* [**`Logic`**](#logic-component): Parses user input and command executor."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* [**`TaskList`**](#tasklist-component): The list that stores the user\u0027s tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2113T-W12-2/tp/blob/master/src/main/java/athena/Ui.java)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "![Structure of the Logic Component]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2113T-W12-2/tp/blob/master/src/main/java/athena/Logic.java)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "1. `Logic` uses the `Parser` class to parse the user command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "1. The command execution can affect the `TaskList` (e.g. adding a task)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "1. The result of the command execution will also call the `Ui` to print the respective messages for each command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "### TaskList component"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wish2023"
        },
        "content": "![TaskListStructure](https://raw.githubusercontent.com/wish2023/tp/DG-tasklist/docs/structures/TaskListStructure.png)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "[`TaskList.java`](https://github.com/AY2021S1-CS2113T-W12-2/tp/blob/master/src/main/java/athena/TaskList.java)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wish2023"
        },
        "content": "1. The `TaskList` stores task data in `Task` type objects."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wish2023"
        },
        "content": "2. The `TaskList` is updated in `Athena`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wish2023"
        },
        "content": "3. A new `Task` object is created everytime the user uses the command `add`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "**API** : "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "[`Storage.java`](https://github.com/AY2021S1-CS2113T-W12-2/tp/blob/master/src/main/java/athena/Storage.java)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "## **Other Guides: Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "This section contains links to other relevant guides."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "* [Documentation guide](./Documentation.md)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "* [Testing guide](./Testing.md)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "* [DevOps guide](./DevOps.md)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "-----------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "### Time allocation to task in timetable"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "The time allocation mechanism is facilitated by `TimeAllocator`. It allocates time slots to `Task`s in a `TaskList` that are not assigned a fixed time slot by the user. It implements the following operations:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "* Work in progress hehe"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "Given below is an example usage scenario and how the allocation mechanism behaves at each step."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "**Step 1**. The user launches the application. The *data.csv* file located next to the application jar file contains 5 tasks. These tasks are loaded into the `TaskList`. 3 of them have a fixed time slot, while the other 2 are not assigned any time slot."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "**Step 2.** The user executes `list` to get an overview of the week. The user sees the 3 tasks with a fixed time slot in the printed timetable."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "**Step 3**. The user executes `allocate` to let the application allocate time slots to `Task`s without a fixed time slot."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "`TimeAllocator` iterates through the `TaskList`, and checks whether a `Task` has a fixed time slot or should be allocated by the application to an empty slot. Tasks that have a fixed slot are added to a `fixedTaskList`, while the rest are added to a `flexibleTaskList`. The `Task`s in the `flexibleTaskList` are sorted based on their `importance` and `deadline`. Finally, the `TimeAllocator` iterates through the `fixedTaskList` to find empty time slots in a day, which is then allocated to the `Task`s in the sorted `flexibleTaskList`."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "The following sequence diagram illustrates how the allocate operation works:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "*Work in progress*"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "**Step 4.** The user executes `list` to get an overview of the week. The user sees all 5 tasks in the printed timetable."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "### Data storage"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "The storage mechanism is facilitated by `Storage`. It reads and writes the `Task`s in a `TaskList` to `data.csv`, a csv file located next to the application jar file."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "* `Storage#saveTaskListData` - Writes the current tasks into the save file."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "* `Storage#loadTaskListData` - Loads the tasks in the save file into the application."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "These operations are called by the `LogicManager`."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "Given below is an example usage scenario and how the storage mechanism behaves at each step."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "**Step 1.** The user launches the application for the first time. The `TaskList` is initialized to be empty. At this time, there is no *data.csv* file present. So, when `Storage` calls `Storage#loadTaskListData`, this is detected and an empty *data.csv* file is created next to the jar file. Since there was no save file, the `TaskList` remains empty."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "**Step 2.** The user adds a task to the application, by executing `add n/Assignment1 t/1100 D/16-09-2020 d/2 r/Today i/high a/Refer to lecture notes`. The `TaskList` now contains 1 task (Assignment 1). After the command is executed, `LogicManager` calls `Storage#saveTaskListData` to automatically save the tasks in the `TaskList` into the save file."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "**Step 3.** The user closes the application. Nothing happens since the data in the `TaskList` is already saved."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "**Step 4.** The user launches the application again. The `TaskList` is initialized to be empty. `Storage#loadTaskListData` will read from `data.csv` and add the tasks inside the file into the empty `TaskList`. The `TaskList` now contains the task added earlier (Assignment 1) in **step 3**."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "**Step 5.** The user executes `list` to get an overview of the week. The user sees *Assignment 1* in the printed timetable."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "-----------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "## Appendix: Requirements"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "## Product scope"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* is a university student"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* has a need to manage a significant number of tasks"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* can type fast and prefers typing to mouse interactions"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* is comfortable using the command line interface"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "#### Value proposition"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* ATHENA helps students to automate the process of organising their schedule. After the user inputs pre-allocated time slots for work and relaxation, ATHENA figures out the best theoretical timetable based on the user’s needs."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* It can be updated anytime during the week."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* ATHENA helps to reduce the amount of time and effort that users need to spend planning their time by finding free spaces to slot tasks in, with the goal of reducing dead space in the user’s timetable. "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* The planner will also make sure the user has enough time to eat, exercise and sleep. The user can set up ATHENA to follow a fixed weekly routine, and only needs to update a task list. ATHENA will then plan the timetable based on the importance and deadlines of the tasks in the list, making sure that the user is able to finish everything on time."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "### User Stories"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "| Version | As a ...          | I want to ...                                  | So that I ...                                     |"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "| ------- | ----------------- | ---------------------------------------------- | ------------------------------------------------- |"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "| `v1.0`  | forgetful student | upload my tasks for the week                   | remember to do them                               |"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "| `v1.0`  | student           | mark my tasks as done                          | know that I have done them and can put them aside |"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "| `v1.0`  | student           | get reminded to do the tasks that are due soon | will be on time                                   |"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "| `v1.0`  | student           | edit the tasks I added                         | update accordingly to small changes               |"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "| `v1.0`  | student           | delete the tasks I added                       | remove tasks that are not needed to do anymore    |"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "| `v1.0`  | student           | set my task according to importance            | complete the more important tasks first           |"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "| `v1.0`  | student           | leave some notes for a task                    | remember about it                                 |"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "| `v2.0`  | student           | have a planner that tells me what time to rest | don’t exhaust myself                              |"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "| `v2.0`  | student           | see an overview of the week ahead              | make sure that I am staying on top of my tasks    |"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "| `v2.0`  | busy student      | know what tasks to work on next                | don’t need to spend time planning                 |"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` installed."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "2.  A user with above average typing speed for regular English text should be able to use the features of ATHENA faster using commands than using the mouse."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "### Instructions for manual testing"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "#### Launch and shutdown"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   2. Double-click the jar file Expected: Shows the command line interface with welcome message."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "2. Shutdown ATHENA"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   1. Test case: `exit`\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "      Expected: A farewell message by ATHENA will be shown.   "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "#### Adding a task"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "Adding a task to the list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "1. Test case: `add n/Assignment1 t/1100 D/16-09-2020 d/2 r/Today i/high a/Refer to lecture notes`\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   Expected: First task is added to the list. Details of the added task is shown."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "2. Test case: `add t/1100 D/16-09-2020`\u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   Expected: No task is added. Error details is shown."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "      "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "#### Deleting a task"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "Deleting a task while all tasks are shown."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "1. Prerequisites: List all tasks using the `list` command."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "2. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   Expected: Task with index 1 is deleted from the list. Details of the deleted task is shown."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "3. Test case: `delete -1`\u003cbr\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   Expected: No task is deleted. Error details is shown."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "4. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "#### Marking a task as done"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "Marking a task as done while all tasks are shown."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "1. Prerequisites: List all tasks using the `list` command."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "2. Test case: `done 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   Expected: Task with index 1 is marked as done in the list. Details of the task is shown."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "3. Test case: `done -1`\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   Expected: No task is marked as done. Error details is shown."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "4. Other incorrect delete commands to try: `done`, `done x` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "      "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "#### Viewing the full details of a task"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "Viewing a task details while all tasks are shown."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "1. Prerequisites: List all tasks using the `list` command."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "2. Test case: `view 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   Expected: Details of the task with index 1 in the list is shown."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "3. Test case: `view -1`\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   Expected: No task details is shown. Error details is shown."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "4. Other incorrect delete commands to try: `view`, `view x` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "#### Editing a task"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "Editing a task details while all tasks are shown."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "1. Prerequisites: List all tasks using the `list` command."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "2. Test case: `edit 1 n/new name`\u003cbr\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   Expected: Name of the task with index 1 in the list will be changed to `new name`."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "3. Test case: `edit -1`\u003cbr\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   Expected: No task will be edited. Error details is shown."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "4. Other incorrect delete commands to try: `edit`, `edit x` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "#### Listing all tasks"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "Listing all the tasks with or without filters."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "1. Test case: `list`\u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   Expected: All the tasks will be listed."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "2. Test case: `list i/HIGH f/TODAY`\u003cbr\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   Expected: All the tasks today with high importance will be shown."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "      "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "#### Help"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "Guide on the use of ATHENA."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "1. Test case: `help`\u003cbr\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   Expected: A guide on how to use ATHENA will be shown."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "#### Data storage"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "Storage of user data (e.g. tasks)."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "1. Dealing with corrupted data files"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "   1. Open data.csv located next to Athena.jar."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "   2. Test case (If the file is not empty): Add `,aaaa` at the end of the first line."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "      Expected: The task on that line is corrupted. When you launch Athena again, it will fail to start, while providing an error message to the user."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "   3. Test case (If the file is not empty): Remove a comma (`,`) from the file."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "      Expected: The task on that line is corrupted. When you launch Athena again, it will fail to start, while providing an error message to the user."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "   4. Test case: Add `aaaaa` at the end of the file."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "      Expected: An invalid task is added. When you launch Athena again, it will fail to start, while providing an error message to the user."
      }
    ],
    "authorContributionMap": {
      "amanda-chua": 169,
      "-": 31,
      "daniellimws": 91,
      "wish2023": 5
    }
  },
  {
    "path": "docs/Documentation.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "**Setting up and maintaining the project website:**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "* We use GitHub Pages to manage documentation."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "* The `docs/` folder is used for documentation."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "* To learn how set it up and maintain the project website, follow the [guide by GitHub on configuring a source for GitHub Pages](https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site#choosing-a-publishing-source)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "**Style guidance:**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "* Follow the [**_Google developer documentation style guide_**](https://developers.google.com/style)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "* Also relevant is the [_[se-edu/guides] **Markdown coding standard**_](https://se-education.org/guides/conventions/markdown.html)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "**Diagrams:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "* See the [_[se-edu/guides] **Using PlantUML**_](https://se-education.org/guides/tutorials/plantUml.html)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "**Converting a document to the PDF format:**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "* See the guide [_[se-edu/guides] **Saving web documents as PDF files**_](https://se-education.org/guides/tutorials/savingPdf.html)"
      }
    ],
    "authorContributionMap": {
      "daniellimws": 20
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "# ATHENA (Automated Timetable Helper Encourager n\u0027 Assistant)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "Our product aims to help students organize their schedule based on the amount of free time and work they have. It is updated minimally on a weekly basis."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "It helps to reduce the amount of time and effort that users need to spend planning their time by finding free spaces to slot tasks in, with the goal of reducing dead space in the user’s timetable. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "The planner will also make sure the user has enough time to eat, exercise and sleep. Since tasks are allowed to be added to the planner at any point in time, the todo list will also be self-sorting. It is meant to be used with a relatively static long term weekly routine that can be set on the application, with the self optimising homework task list reacting to changes throughout the year."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "amanda-chua": 7,
      "-": 6
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    test class, or a test, for example `parse_unknownCommandWord_returnsHelp` in `athena.ParserTest` and choose `Run ParserTest.parse_unknownCommandWord_returnsHelp`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "   e.g. `athena.task.TaskTest`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "   e.g. `athena.commands.AddCommandTest`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "   e.g. \u003cdon\u0027t have this for now\u003e"
      }
    ],
    "authorContributionMap": {
      "daniellimws": 26
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "ATHENA (Automated Timetable Helper Encourager n\u0027 Assistant) is a desktop daily life planner optimized for use via a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "2. Download the latest version of `ATHENA` from [here](https://github.com/AY2021S1-CS2113T-W12-2/tp/releases)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "Notes about the command format:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* Words in UPPER_CASE are the parameters to be supplied by the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "e.g. in `add n/NAME`, NAME is a parameter which can be used as: `add n/Assignment1`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* Parameters can be in any order."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "e.g. if the command specifies `n/NAME t/TIME`, `t/TIME n/NAME` is also acceptable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* Items in square brackets are optional. e.g `n/NAME  [d/DURATION]` can be used as `n/Task1 d/1` or as `n/Task1`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* For some commands, if no parameters are specified, the command will execute using the default values for each parameter."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* For dates, the program follows the DD-MM-YYYY format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* For time, the program follows the HHMM format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "### Adding a task: `add` or `a`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "Adds a task to the planner."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "Format: `add n/NAME t/TIME [d/DURATION] [D/DEADLINE] [r/RECURRENCE] [i/IMPORTANCE] [a/ADDITIONAL-NOTES]`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `NAME` is the name of the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `TIME` is the time to start doing this task (HHMM). For example, 1100."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `DURATION` is the expected time taken to complete task (in hours)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   Default: 1 hour."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `DEADLINE` is the date to do task by (DD-MM-YYYY). For example, 16-09-2020."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   Default: No deadline."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `RECURRENCE` is TODAY or a specific date (DD-MM-YYYY)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   Default: TODAY."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `IMPORTANCE` is one of HIGH, MEDIUM, LOW."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   Default: MEDIUM."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `ADDITIONAL-NOTES` is the additional notes of the task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   Default: No notes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `add n/Assignment1 t/1100 D/16-09-2020 d/2 r/Today i/high a/Refer to lecture notes`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `a n/Assignment1 t/1100 D/16-09-2020 d/2 r/Today i/high a/Refer to lecture notes`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "### Listing tasks: `list` or `l`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "Shows a list of all tasks in the planner. Each task will be printed with a number to be used as an identifier for other commands."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "Format: `list [f/FORECAST] [i/IMPORTANCE]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `FORECAST`: TODAY to show the tasks today, WEEK to show the tasks this week, ALL to show all tasks, or choose a specific date. "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "  Default: WEEK."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `IMPORTANCE`: One of HIGH, MEDIUM, LOW, ALL. "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "  Default: ALL."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "Shortcut format:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `l3` \u003d `list i/HIGH`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `l2` \u003d `list i/MEDIUM`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `l1` \u003d `list i/LOW`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `lw` \u003d `list f/WEEK`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `lt` \u003d `list f/TODAY`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `lm` \u003d `list f/MONTH`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "  "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `list f/WEEK i/medium`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `l2 f/WEEK`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `lm i/medium`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "### Mark task as done: `done` or `dn`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "Marks the specified task from the planner as done."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "Format: `done INDEX`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `INDEX` refers to the index number shown in the displayed task list. It must be a positive integer."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `done 103`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `dn 103` "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "### Edit task: `edit` or `e`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "Allows users to edit the specified task from the planner."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "Format: `edit INDEX [n/NAME] [t/TIME] [d/DURATION] [D/DEADLINE] [r/RECURRENCE] [i/IMPORTANCE] [a/ADDITIONAL-NOTES]`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `INDEX` refers to the index number shown in the displayed task list. It must be a positive integer."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `NAME` is the name of the task."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `TIME` is the time to start doing this task (HHMM). For example, 1100."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `DURATION` is the expected time taken to complete task (in hours)."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `DEADLINE` is the date to do task by (DD-MM-YYYY). For example, 16-09-2020."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `RECURRENCE` is one of TODAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `IMPORTANCE` is one of HIGH, MEDIUM, LOW."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `ADDITIONAL-NOTES` is the additional notes of the task."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "   "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `edit 103 n/Assignment1 t/1100 D/16-09-2020 d/2 r/today i/high a/Refer to lecture notes`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `e 103 n/Assignment1 t/1100 D/16-09-2020 d/2 r/today i/high a/Refer to lecture notes`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "### Delete task: `delete` or `dl`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "Deletes the specified task from the planner."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `INDEX` refers to the index number shown in the displayed task list. It must be a positive integer."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `delete 103`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `dl 103`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "### View task: `view` or `v`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "View the specified task details from the planner."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "Format: `view INDEX`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `INDEX` refers to the index number shown in the displayed task list. It must be a positive integer."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `view 103`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* `v 103`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "### Exit program: `exit` or `ex`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "Format: `exit` or `ex`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "ATHENA data is saved in the hard disk automatically after any command that changes the data. There is no need to save manually.  "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "**A**: You can copy the data.csv file created next to ATHENA.jar to the other computer and place it next to ATHENA.jar there."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* Help `help`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* Add task `add n/NAME t/TIME [d/DURATION] [D/DEADLINE] [r/RECURRENCE] [i/IMPORTANCE] [a/ADDITIONAL-NOTES]`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* List tasks `list [f/FORECAST] [i/IMPORTANCE]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* Mark task as done `done INDEX`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* Edit task `edit INDEX [n/NAME] [t/TIME] [d/DURATION] [D/DEADLINE] [r/RECURRENCE] [i/IMPORTANCE] [a/ADDITIONAL-NOTES]`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* Delete task `delete INDEX`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* View task `view INDEX`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "* Exit program `exit`"
      }
    ],
    "authorContributionMap": {
      "amanda-chua": 118,
      "-": 32,
      "daniellimws": 1
    }
  },
  {
    "path": "src/main/java/athena/Athena.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "package athena;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.logic.LogicManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * The main class of the ATHENA program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "public class Athena {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private LogicManager logicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Creates an ATHENA object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public Athena() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        logicManager \u003d new LogicManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        storage \u003d new Storage(\"data.csv\", ui);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        Athena athena \u003d new Athena();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        athena.runProgram();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Runs the main code of the ATHENA program."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void runProgram() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        String inputString;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        ui.printAthenaLogo();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        taskList \u003d storage.loadTaskListData();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        Scanner input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                inputString \u003d input.nextLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                isExit \u003d logicManager.execute(inputString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            } catch (CommandException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                e.printErrorMessage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            continue;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 41,
      "Kafcis": 4,
      "amanda-chua": 6,
      "daniellimws": 3
    }
  },
  {
    "path": "src/main/java/athena/Forecast.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package athena;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * Enums representing forecast filters the user can select."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public enum Forecast {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    TODAY, WEEK, ALL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 8
    }
  },
  {
    "path": "src/main/java/athena/Importance.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wish2023"
        },
        "content": "package athena;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * Enums representing importance levels that users can filter tasks by."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wish2023"
        },
        "content": "public enum Importance {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    HIGH, MEDIUM, LOW, ALL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wish2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 4,
      "wish2023": 4
    }
  },
  {
    "path": "src/main/java/athena/Recurrence.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package athena;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * Enum representing when tasks can occur again."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public enum Recurrence {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    TODAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 8
    }
  },
  {
    "path": "src/main/java/athena/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "package athena;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kafcis"
        },
        "content": " * Converts TaskLists to .csv files and back"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kafcis"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    private int size;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     * Initialises Storage object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     * @param filepath Location of the save file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     * @param ui       prints out error messages"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    public Storage(String filepath, Ui ui) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        this.filePath \u003d filepath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    private String replaceCommas(String info) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        return info.replace(\",\", \"]c}\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     * Takes a TaskList and converts it to a .csv file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     * @param tasks tasks to be saved as strings"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    public void saveTaskListData(TaskList tasks) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        String taskString \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        //TODO: add compatibility for more task attributes"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            FileWriter csvWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            for (Task task : tasks.getTasks()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                taskString \u003d replaceCommas(task.getName()) + \",\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                        + replaceCommas(task.getTimeInfo().getStartTimeString()) + \",\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                        + replaceCommas(task.getTimeInfo().getDurationString()) + \",\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                        + replaceCommas(task.getTimeInfo().getDeadline()) + \",\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                        + replaceCommas(task.getTimeInfo().getRecurrence()) + \",\" + task.getImportance() + \",\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                        + replaceCommas(task.getNotes()) + \",\" + task.getNumber();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                if (task.isFlexible()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                    taskString \u003d taskString + \",\" + \"true\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                    taskString \u003d taskString + \",\" + \"false\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                csvWriter.append(taskString + \"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            csvWriter.close();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     * Retrieves Tasklist from .csv file"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     * @return TaskList object equivalent of save file"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    //TODO: add compatibility for more task attributes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    public TaskList loadTaskListData() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        File csvFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        TaskList output \u003d new TaskList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        int maxNumber \u003d 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        if (csvFile.isFile()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            String row;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            BufferedReader csvReader \u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                csvReader \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                while ((row \u003d csvReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                    String[] data \u003d row.split(\",\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                    for (int i \u003d 0; i \u003c data.length; i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                        data[i] \u003d data[i].replaceAll(\"]c}\", \",\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                    output.addTask(Integer.parseInt(data[7]), data[0], data[1], data[2], data[3], data[4],"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                            Importance.valueOf(data[5].toUpperCase()), data[6], Boolean.parseBoolean(data[8]));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                    maxNumber \u003d Integer.parseInt(data[7]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                csvReader.close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                ui.printInvalidTask();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        output.setMaxNumber(maxNumber);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kafcis": 96,
      "daniellimws": 9,
      "wish2023": 3
    }
  },
  {
    "path": "src/main/java/athena/TaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wish2023"
        },
        "content": "package athena;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.task.taskfilter.ForecastFilter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.task.taskfilter.ImportanceFilter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.taskfilter.TaskFilter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * The list that stores the user\u0027s tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wish2023"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private int maxNumber \u003d -1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Creates a new TaskList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Creates a new TaskList using an existing ArrayList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param tasks ArrayList to convert to TaskList"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            maxNumber \u003d Math.max(maxNumber, task.getNumber());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Gets an ArrayList of the tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return The ArrayList of the tasks"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Creates a new task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param number     Task number"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param name       Task name"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param startTime  Start time of the task"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param duration   Duration of the task"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param deadline   Due date of the task"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param recurrence When the task occurs again"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param importance Importance of the task"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param notes      Additional notes"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return Task as Task object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private Task createTask(int number, String name, String startTime, String duration, String deadline,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                            String recurrence, Importance importance, String notes, Boolean isFlexible) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        Task task \u003d new Task(name, startTime, duration, deadline, recurrence, importance, notes, number, isFlexible);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * Returns size of the task list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return Size of the task list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public int getTaskListSize() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param task Task to be added."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        if (this.maxNumber \u003c task.getNumber()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            this.maxNumber \u003d task.getNumber();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param number     Number assigned to the task"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param name       Name of task"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param startTime  Start time of task"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param duration   Duration of task"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param deadline   Deadline of task"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param recurrence Recurrence of task"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param importance Importance of task"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param notes      Additional notes of task"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void addTask(int number, String name, String startTime, String duration,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                        String deadline, String recurrence, Importance importance, String notes, boolean isFlexible) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        if (this.maxNumber \u003c number) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            this.maxNumber \u003d number;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        Task task \u003d createTask(number, name, startTime, duration, deadline, recurrence, importance, notes, isFlexible);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param name       Name of task"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param startTime  Start time of task"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param duration   Duration of task"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param deadline   Deadline of task"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param recurrence Recurrence of task"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param importance Importance of task"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param notes      Additional notes of task"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public void addTask(String name, String startTime, String duration,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                        String deadline, String recurrence, Importance importance, String notes, Boolean isFlexible) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        maxNumber++;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        addTask(maxNumber, name, startTime, duration, deadline, recurrence, importance, notes, isFlexible);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Returns the task description of the task with the given number."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param taskNumber Task number."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return Task description."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws TaskNotFoundException Exception thrown when the program is unable to find a task at the index"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     *                               specified by the user"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public String getTaskDescription(int taskNumber) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        Task task \u003d getTaskFromNumber(taskNumber);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return task.getDetailsAsString();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * Deletes the task at the specified position in the task list."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param taskNumber Number assigned to the task to be deleted."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return Task that is deleted. Null if not found."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws TaskNotFoundException thrown when the program is unable to find a task at the index"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     *                               specified by the user"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public Task deleteTask(int taskNumber) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        Task task \u003d getTaskFromNumber(taskNumber);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        tasks.remove(task);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Edits a task in the task list with the given number, if present."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param taskNumber Task number"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param name       Name of task"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param startTime  Start time of task"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param duration   Duration of task"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param deadline   Deadline of task"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param recurrence Recurrence of task"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param importance Importance of task"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param notes      Additional notes of task"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws TaskNotFoundException thrown when the program is unable to find a task at the index"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     *                               specified by the user"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public void editTask(int taskNumber, String name, String startTime, String duration,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                         String deadline, String recurrence, Importance importance,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                         String notes) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        Task task \u003d getTaskFromNumber(taskNumber);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        task.edit(name, startTime, duration, deadline, recurrence, importance, notes);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Marks specified task as done."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param taskNumber Task number."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return Task marked as done."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws TaskNotFoundException thrown when the program is unable to find a task at the index"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     *                               specified by the user"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public Task markTaskAsDone(int taskNumber) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        Task task \u003d getTaskFromNumber(taskNumber);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        task.setDone();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Gets a task based on the number assigned to it."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param taskNumber number assigned to the task."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return The task with the given number. Null if not found."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws TaskNotFoundException thrown when the program is unable to find a task at the index"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     *                               specified by the user"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public Task getTaskFromNumber(int taskNumber) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            if (t.getNumber() \u003d\u003d taskNumber) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                return t;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        throw new TaskNotFoundException(taskNumber);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Returns a filtered task list."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param taskFilter The filter that decides which tasks are printed"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @return Filtered task list"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public TaskList getFilteredList(TaskFilter taskFilter) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            if (taskFilter.isTaskIncluded(task)) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                if (taskFilter instanceof ImportanceFilter) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                    filteredTasks.add(task);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                    assert taskFilter instanceof ForecastFilter;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                    Task filteredTask \u003d ((ForecastFilter) taskFilter).removeExcludedDates(task);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                    filteredTasks.add(filteredTask);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return new TaskList(filteredTasks);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public ArrayList\u003cTask\u003e makeDeepCopyTasks(ArrayList\u003cTask\u003e oldTasks) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        ArrayList\u003cTask\u003e tasksCopy \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        for (Task task : oldTasks) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            tasksCopy.add(task.getClone());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return tasksCopy;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Gets the max index."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return Max index"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public int getMaxNumber() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return maxNumber;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Sets the max index."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param maxIndex Max index"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void setMaxNumber(int maxIndex) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.maxNumber \u003d maxIndex;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Determines if two objects have the same attributes."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param o object"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return true if the two objects have the same attributes"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        if (!(o instanceof TaskList)) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        TaskList taskList \u003d (TaskList) o;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return maxNumber \u003d\u003d taskList.maxNumber \u0026\u0026 getTasks().equals(taskList.getTasks());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return Objects.hash(getTasks(), maxNumber);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "wish2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 54,
      "Kafcis": 20,
      "amanda-chua": 13,
      "daniellimws": 95,
      "wish2023": 95
    }
  },
  {
    "path": "src/main/java/athena/TimeAllocator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "package athena;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import athena.task.taskfilter.FlexibleTimeFilter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "public class TimeAllocator {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    ArrayList\u003cTask\u003e flexibleTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    ArrayList\u003cTask\u003e fixedTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    LocalDateTime currentTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    LocalDateTime nextTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    int duration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     * This is run manually by the user to generate a timetable that they like."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     * option to auto assign at every input, reassignment at the end is possible"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     * need to maintain the flexibility of the tasks to allow for multiple reruns"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     * @param tasks tasks in the current TaskList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    public TimeAllocator(TaskList tasks) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        this.flexibleTask \u003d tasks.getFilteredList(new FlexibleTimeFilter(true)).getTasks();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        this.fixedTask \u003d tasks.getFilteredList(new FlexibleTimeFilter(false)).getTasks();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "// Psuedocode for allocation runs might refactor into a command class"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "//    public void runAllocate() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "//        Collections.sort(fixedTask, earlier());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "//        Collections.sort(flexibleTask,priority());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "//        //priority sorts according to importance(high to low) then duration(high to low)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "//        //might need toposort"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "//        for (int i \u003d 0; i \u003c fixedTask.size() - 1; i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "//            currentTime \u003d fixedTask.get(i).getStartTime() + fixedTask.get(i).getDuration();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "//            nextTime \u003d fixedTask.get(i + 1).getStartTime();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "//            duration \u003d nextTime-currentTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "//            // select task with best fit into the time"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "//            // select important task then long tasks then check for space"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "//            // if there is no time left then continue"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "//            // if not then choose another task that can go in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "//            // ?? not sure if want to go through the entire list to get 0 time wastage"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "//            // failure cases will be unable to meet deadline"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "//            // set time for flexible tasks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "//            // repeat until all flexible tasks are assigned"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kafcis": 57
    }
  },
  {
    "path": "src/main/java/athena/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package athena;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.timetable.Timetable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import org.fusesource.jansi.AnsiConsole;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * Represents all of the text that the user sees on the command line."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private static final String ANSI_RESET \u003d \"\\u001B[0m\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printAthenaLogo() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(colourTextPurple(\"     ___   .__________.  __    __   _______ .__   __.      ___      \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"    /   \\\\  |          | |  |  |  | |   ____||  \\\\ |  |     /   \\\\     \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"   /  ^  \\\\ `---|  |---` |  |__|  | |  |__   |   \\\\|  |    /  ^  \\\\    \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"  /  /_\\\\  \\\\    |  |     |   __   | |   __|  |  . `  |   /  /_\\\\  \\\\   \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \" /  _____  \\\\   |  |     |  |  |  | |  |____ |  |\\\\   |  /  _____  \\\\  \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"/__/     \\\\__\\\\  |__|     |__|  |__| |_______||__| \\\\__| /__/     \\\\__\\\\ \\n\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints the first message that the user sees upon launching the application."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(colourTextPurple(\"Hello! I\u0027m the Goddess of Wisdom and War, the mighty ATHENA!\\n\" + \"...\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"Okay okay I\u0027m not a Goddess but I am your Automated Timetable Helper Encourager n\u0027 Assistant!\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"What can I do? Are you challenging me to a duel?\\n\" + \"...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"Oh you mean in terms of tasks? Just type \\\"help\\\" to witness my mighty repertoire!\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"So, what would you like to do today?\\n\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints out a message verifying which task the user has added to their list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskName       The name of the task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskStartTime  When the task is scheduled to start"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskDuration   How long the task will last for"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskDeadline   When the task is due"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskRecurrence When will the task repeat"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskImportance What is the importance of the task"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskNotes      Any additional notes the user has added to the task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printTaskAdded(String taskName, String taskStartTime, String taskDuration, String taskDeadline,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                               String taskRecurrence, String taskImportance, String taskNotes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(\"You\u0027ve successfully added \" + colourTextBlue(taskName) + \" to your list!\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"It will start at \" + colourTextBlue(taskStartTime) + \" and finish on \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + colourTextBlue(taskDeadline) + \".\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"You should spend a total of \" + colourTextBlue(taskDuration) + \" on it.\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"It is set to happen \" + colourTextBlue(taskRecurrence) + \" and has an importance of \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + colourTextBlue(taskImportance) + \".\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"Additionally, you\u0027ve also added these notes!\\n\" + colourTextBlue(taskNotes) + \".\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"Looks like another mission to complete! Let\u0027s do it!\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints out a message verifying that the task the user specified has been marked as done."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param task The task that the user marked as done"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printTaskDone(Task task) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        System.out.println(\"A job well done! I\u0027ve slayed the-- I mean, marked the task \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + colourTextBlue(task.getName()) + \" as complete!\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints out a message verifying that the task the user specified has been edited, and shows the user the"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * new task details."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskIndex      The index of the task on the task list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskName       The name of the task"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskStartTime  When the task is scheduled to start"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskDuration   How long the task will last for"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskDeadline   When the task is due"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskRecurrence When will the task repeat"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskImportance What is the importance of the task"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskNotes      Any additional notes the user has added to the task"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printTaskEdited(int taskIndex, String taskName, String taskStartTime, String taskDuration,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                                String taskDeadline, String taskRecurrence, Importance taskImportance,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                                String taskNotes) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(\"You\u0027ve changed the details of task number \" + colourTextBlue(Integer.toString(taskIndex))"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \": \" + colourTextBlue(taskName) + \"!\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"Here are the new details of your task!\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"Start Time: \" + colourTextBlue(taskStartTime) + \"\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"Duration: \" + colourTextBlue(taskDuration) + \"\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"Due Date: \" + colourTextBlue(taskDeadline) + \"\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"Recurrence: \" + colourTextBlue(taskRecurrence) + \"\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"Importance: \" + colourTextBlue(taskImportance.name()) + \"\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"Additional Notes: \" + colourTextBlue(taskNotes) + \"\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"The mistakes of the past have been vanquished!\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints out a message verifying that the task the user specified has been deleted."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param task The task that the user has deleted."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    public void printTaskDeleted(Task task, String taskRestore) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(\"Are we pretending the task \" + colourTextBlue(task.toString())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \" never existed? Very well...\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(\"We both know the human propensity to make mistakes, if you want it back just type:\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + colourTextBlue(taskRestore) + \"\\nYou can thank me later!\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Prints out the task details that the user specified to view."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskDetails The task that the user wants to view."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void printTaskDetails(String taskDetails) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        System.out.println(\"Here are the details of your task: \" + taskDetails);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints out a help menu of all available tasks that ATHENA is able to do."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printHelp() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(colourTextYellow(\"Not sure of what I\u0027m capable of doing? \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"Well here\u0027s a list just for you!\\n\\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"To add a task (parameters in square brackets are optional fields):\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"add n/NAME t/TIME [d/DURATION] [D/DEADLINE] [r/RECURRENCE] [i/IMPORTANCE] [a/ADDITIONAL-NOTES]\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"e.g. add n/Assignment1 t/1100 d/16/09 D/2 r/Monday i/high a/Refer to lecture notes\\n\\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"To list your current tasks:\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"list f/FORECAST i/IMPORTANCE\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"e.g. list f/WEEK i/medium\\n\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"To mark a task as done:\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"done INDEX\\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"e.g. done 2\\n\\n\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"To edit a task (parameters in square brackets are optional fields):\\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                + \"edit INDEX [n/NAME] [t/TIME] [d/DURATION] [D/DEADLINE] [r/RECURRENCE] [i/IMPORTANCE]\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                + \"[a/ADDITIONAL-NOTES]\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"e.g. edit 2 n/Assignment1 t/1100 d/16/09 D/2 r/Monday i/high a/Refer to lecture notes\\n\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"To delete a task:\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"delete INDEX\\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"e.g. delete 2\\n\\n\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"To say farewell to me, ATHENA:\\n\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"bye\\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"But why would you want to leave me anyways? Hmph.\\n\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints a message when there is an error with a task in the storage file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    public void printInvalidTask() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(colourTextRed(\"One of the tasks in the archives seems to be cursed, \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"I have disposed of it!\\n\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Prints a message stating the task is not found."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskNumber Task number given by the user"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    public void printTaskNotFound(int taskNumber) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(colourTextRed(\"The task with the label \")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + colourTextBlue(Integer.toString(taskNumber)) + colourTextRed(\" cannot be found\\n\"));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints a message telling user they did not specify either the name or start time of the task."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printAddMissingRequiredParametersException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(colourTextRed(\"You haven\u0027t specified the name or the start time of the task! \""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"How can we go on a conquest if we don\u0027t know what to slay and what time to start?\\n\"));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints a message telling user they did not provide a valid index for the delete command."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printDeleteInvalidIndexException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(colourTextRed(\"Hmm...not sure what you\u0027re trying to delete, \""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"but there is no task at that index.\\n\"));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints a message telling user they did not provide an index for the delete command."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printDeleteNoIndexException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(colourTextRed(\"So you\u0027re trying to delete a task...but which one exactly? \""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"You haven\u0027t specified.\\n\"));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints a message telling user they did not provide a valid index for the done command."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printDoneInvalidIndexException() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(colourTextRed(\"I\u0027m not sure if you\u0027re trying to smoke me or smoke yourself, \""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"but there is no task at that index. \""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"You should enter a task index that contains a task.\\n\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints a message telling user they did not provide an index for the done command."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printDoneNoIndexException() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(colourTextRed(\"I know you\u0027re really eager, but you need to specify \""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"a task to mark as done!\\n\"));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Prints a message telling user they did not provide a valid index for the view command."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void printViewInvalidIndexException() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        System.out.println(\"I\u0027m not sure if you\u0027re trying to smoke me or smoke yourself, but there is no task at that \""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                + \"index. You should enter a task index that contains a task.\\n\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Prints a message telling user they did not provide an index for the view command."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void printViewNoIndexException() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        System.out.println(\"I know you\u0027re really eager, but you need to specify a task to view!\\n\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints a message telling user they did not provide an index for the edit command."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printEditNoIndexException() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(colourTextRed(\"You need to specify the correct index of the task \""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"you want to edit!\\n\"));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints a message telling user they did not input a command that is recognized by the program."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printInvalidCommandException() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(colourTextRed(\"I know I\u0027m really smart but even I don\u0027t know what \""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"you\u0027re requesting. Maybe if you type \") + colourTextYellow(\"help\")"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + colourTextRed(\", you can see what the valid commands are.\\n\"));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints a message telling user their task list is empty."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printEmptyTaskListException() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(colourTextRed(\"You don\u0027t have any tasks in your list! You should probably add some in if \""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"you want to be productive.\\n\"));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints a message when the user chooses to exit the program."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printExitMessage() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        System.out.println(colourTextPurple(\"Going so soon? Well I\u0027ll be here the next time you need me. \""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                + \"Farewell!\\n\"));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Prints the timetable."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param timetable Timetable to be printed"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void printTimetable(Timetable timetable) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        System.out.println(timetable);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private String colourTextBlue(String inputString) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        String ansiBlue \u003d \"\\u001B[34m\";"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        return ansiBlue + inputString + ANSI_RESET;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private String colourTextRed(String inputString) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        String ansiRed \u003d \"\\u001B[31m\";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        return ansiRed + inputString + ANSI_RESET;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private String colourTextPurple(String inputString) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        String ansiGreen \u003d \"\\u001b[35m\";"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        return ansiGreen + inputString + ANSI_RESET;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private String colourTextYellow(String inputString) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        String ansiYellow \u003d \"\\u001b[33m\";"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        return ansiYellow + inputString + ANSI_RESET;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 233,
      "Kafcis": 13,
      "amanda-chua": 25,
      "daniellimws": 15
    }
  },
  {
    "path": "src/main/java/athena/exceptions/AddMissingRequiredParametersException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package athena.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * Handles exception for when the user does not fill in the name or the start time of the task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public class AddMissingRequiredParametersException extends CommandException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public AddMissingRequiredParametersException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints an error message telling user to fill in the name and start time of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        ui.printAddMissingRequiredParametersException();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 21
    }
  },
  {
    "path": "src/main/java/athena/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package athena.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * Abstract class for all the command exceptions that are thrown."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public abstract class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public CommandException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Abstract method for printing the error message to the user when an exception is thrown."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public abstract void printErrorMessage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 15
    }
  },
  {
    "path": "src/main/java/athena/exceptions/DeleteInvalidIndexException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package athena.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * Exception that is thrown when the user enters an index without a task when using the delete command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public class DeleteInvalidIndexException extends CommandException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public DeleteInvalidIndexException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints an error message telling user to enter a valid index number of a task to delete."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        ui.printDeleteInvalidIndexException();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 21
    }
  },
  {
    "path": "src/main/java/athena/exceptions/DeleteNoIndexException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package athena.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * Exception thrown when the user enters the delete command without specifying an index of a task to delete."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public class DeleteNoIndexException extends CommandException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public DeleteNoIndexException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints an error message telling user to enter an index number of a task to delete."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        ui.printDeleteNoIndexException();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 21
    }
  },
  {
    "path": "src/main/java/athena/exceptions/DoneInvalidIndexException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package athena.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * Exception that is thrown when the user enters an index without a task when using the done command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public class DoneInvalidIndexException extends CommandException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public DoneInvalidIndexException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints an error message telling user to enter a valid index number of a task to mark as done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        ui.printDoneInvalidIndexException();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 21
    }
  },
  {
    "path": "src/main/java/athena/exceptions/DoneNoIndexException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package athena.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * Exception thrown when the user enters the done command without specifying an index of a task to done."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public class DoneNoIndexException extends CommandException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public DoneNoIndexException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints an error message telling user to enter an index number of a task to mark as done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        ui.printDoneNoIndexException();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 21
    }
  },
  {
    "path": "src/main/java/athena/exceptions/EditNoIndexException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package athena.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * Exception thrown when the user enters the edit command without specifying the index of the task they want to edit."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public class EditNoIndexException extends CommandException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public EditNoIndexException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints an error message telling user to enter an index number of a task to mark as done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        ui.printEditNoIndexException();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 21
    }
  },
  {
    "path": "src/main/java/athena/exceptions/EmptyTaskListException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package athena.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * Exception thrown when the user wants to view their list of tasks but the task list is empty."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public class EmptyTaskListException extends CommandException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public EmptyTaskListException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints an error message when the user tries to list out their tasks, but does not have any tasks in the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        ui.printEmptyTaskListException();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 21
    }
  },
  {
    "path": "src/main/java/athena/exceptions/InvalidCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package athena.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * Exception thrown when the user enters a command not recognized by the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": "public class InvalidCommandException extends CommandException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public InvalidCommandException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints an error message telling user that they entered an invalid command and prompts them to type \"help\"."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        ui.printInvalidCommandException();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 21
    }
  },
  {
    "path": "src/main/java/athena/exceptions/TaskNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "package athena.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * Exception that is thrown when the program is unable to locate the task specified by the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "public class TaskNotFoundException extends CommandException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Initializes the task number."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskNumber number of the the task in the task list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public TaskNotFoundException(int taskNumber) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Prints an error message telling user that there is no task at the index they specified."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        ui.printTaskNotFound(taskNumber);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 10,
      "daniellimws": 18
    }
  },
  {
    "path": "src/main/java/athena/exceptions/ViewInvalidIndexException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "package athena.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " * Exception that is thrown when the user enters an index without a task when using the view command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "public class ViewInvalidIndexException extends CommandException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public ViewInvalidIndexException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Prints an error message telling user to enter a valid index number of a task to view."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        ui.printViewInvalidIndexException();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amanda-chua": 21
    }
  },
  {
    "path": "src/main/java/athena/exceptions/ViewNoIndexException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "package athena.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " * Exception thrown when the user enters the delete command without specifying an index of a task to view."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "public class ViewNoIndexException extends CommandException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public ViewNoIndexException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Prints an error message telling user to enter an index number of a task to view."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        ui.printViewNoIndexException();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amanda-chua": 21
    }
  },
  {
    "path": "src/main/java/athena/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "package athena.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " * API of the Logic component."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Executes the command and returns whether exit or not."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param inputString The command as entered by the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @return true if command is exit, false if not exit."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    boolean execute(String inputString) throws CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amanda-chua": 16
    }
  },
  {
    "path": "src/main/java/athena/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "package athena.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " * The main LogicManager of the ATHENA."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private static Parser parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private static TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public LogicManager() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        storage \u003d new Storage(\"data.csv\", ui);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public boolean execute(String inputString) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        Command userCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskList \u003d storage.loadTaskListData();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        userCommand \u003d parser.parse(inputString, taskList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        userCommand.execute(taskList, ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        storage.saveTaskListData(taskList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return userCommand.getIsExit();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amanda-chua": 34
    }
  },
  {
    "path": "src/main/java/athena/logic/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "package athena.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.Forecast;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.Importance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.exceptions.DeleteNoIndexException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.exceptions.DoneNoIndexException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.exceptions.EditNoIndexException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.exceptions.ViewNoIndexException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " * Handles parsing of user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static final String COMMAND_WORD_DELIMITER \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static final String NAME_DELIMITER \u003d \"n/\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static final String TIME_DELIMITER \u003d \"t/\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static final String DURATION_DELIMITER \u003d \"d/\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static final String DEADLINE_DELIMITER \u003d \"D/\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static final String RECURRENCE_DELIMITER \u003d \"r/\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static final String IMPORTANCE_DELIMITER \u003d \"i/\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static final String ADDITIONAL_NOTES_DELIMITER \u003d \"a/\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static final String FORECAST_DELIMITER \u003d \"f/\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Get parameters description."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskInformation String representing task information"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param delimiter       String representing parameter delimiter"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param paramPosition   Integer representing position of parameter"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param defaultValue    String representing default value"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @return Description of parameter"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public static String getParameterDesc(String taskInformation, String delimiter, int paramPosition,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                                          String defaultValue) throws InvalidCommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String param;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        if (paramPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            param \u003d defaultValue;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            String[] retrieveParamInfo \u003d taskInformation.split(delimiter, 2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            String retrievedParamInfo \u003d retrieveParamInfo[1];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            int paramNextSlash \u003d retrievedParamInfo.indexOf(\"/\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            if (paramNextSlash \u003d\u003d -1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                param \u003d retrievedParamInfo;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                    param \u003d retrievedParamInfo.substring(0, (paramNextSlash - 2));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                    throw new InvalidCommandException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return param;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Parses user input when command is add."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskInfo      String representing task information"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param namePos       Integer representing position of name parameter"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param timePos       Integer representing position of time parameter"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param durationPos   Integer representing position of duration parameter"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param deadlinePos   Integer representing position of deadline parameter"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param recurrencePos Integer representing position of recurrence parameter"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param importancePos Integer representing position of importance parameter"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param addNotesPos   Integer representing position of additional notes parameter"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @return command object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static Command parseAddCommand(String taskInfo, int namePos, int timePos, int durationPos, int deadlinePos,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                                          int recurrencePos, int importancePos, int addNotesPos)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            throws InvalidCommandException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String nullDefault \u003d \"\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String name \u003d getParameterDesc(taskInfo, NAME_DELIMITER, namePos, nullDefault);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        //TODO: allow for empty string, assign flexible attribute, true if string is null, false if filled"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String time \u003d getParameterDesc(taskInfo, TIME_DELIMITER, timePos, nullDefault);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        boolean isFlexible \u003d (time \u003d\u003d nullDefault);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String durationDefault \u003d \"1 hour\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String duration \u003d getParameterDesc(taskInfo, DURATION_DELIMITER, durationPos, durationDefault);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String deadlineDefault \u003d \"No deadline\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String deadline \u003d getParameterDesc(taskInfo, DEADLINE_DELIMITER, deadlinePos, deadlineDefault);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        String recurrenceDefault \u003d \"today\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String recurrence \u003d getParameterDesc(taskInfo, RECURRENCE_DELIMITER, recurrencePos, recurrenceDefault);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String importanceDefault \u003d \"medium\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String importance \u003d getParameterDesc(taskInfo, IMPORTANCE_DELIMITER, importancePos, importanceDefault);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String notesDefault \u003d \"No notes\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String notes \u003d getParameterDesc(taskInfo, ADDITIONAL_NOTES_DELIMITER, addNotesPos, notesDefault);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        Command command \u003d new AddCommand(name, time, duration, deadline, recurrence, importance, notes, isFlexible);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Parses user input when command is edit."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskInfo      String representing task information"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param namePos       Integer representing position of name parameter"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param timePos       Integer representing position of time parameter"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param durationPos   Integer representing position of duration parameter"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param deadlinePos   Integer representing position of deadline parameter"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param recurrencePos Integer representing position of recurrence parameter"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param importancePos Integer representing position of importance parameter"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param addNotesPos   Integer representing position of additional notes parameter"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @return command object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws TaskNotFoundException Exception thrown when the program is unable to find a task at the index"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     *                               specified by the user"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws EditNoIndexException  Exception thrown when the user does not specify an index of the task they"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     *                               want to edit"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static Command parseEditCommand(String taskInfo, int namePos, int timePos, int durationPos, int deadlinePos,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                                           int recurrencePos, int importancePos, int addNotesPos,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                                           TaskList taskList) throws TaskNotFoundException, EditNoIndexException,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            InvalidCommandException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        int number \u003d getNumber(taskInfo);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        String name \u003d getParameterDesc(taskInfo, NAME_DELIMITER, namePos,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                taskList.getTaskFromNumber(number).getName());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        String time \u003d getParameterDesc(taskInfo, TIME_DELIMITER, timePos,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                taskList.getTaskFromNumber(number).getTimeInfo().getStartTimeString());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        String duration \u003d getParameterDesc(taskInfo, DURATION_DELIMITER, durationPos,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                taskList.getTaskFromNumber(number).getTimeInfo().getDurationString());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        String deadline \u003d getParameterDesc(taskInfo, DEADLINE_DELIMITER, deadlinePos,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                taskList.getTaskFromNumber(number).getTimeInfo().getDeadline());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        String recurrence \u003d getParameterDesc(taskInfo, RECURRENCE_DELIMITER, recurrencePos,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                taskList.getTaskFromNumber(number).getTimeInfo().getRecurrence());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        String importance \u003d getParameterDesc(taskInfo, IMPORTANCE_DELIMITER, importancePos,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                taskList.getTaskFromNumber(number).getImportance().toString()).toUpperCase();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        String notes \u003d getParameterDesc(taskInfo, ADDITIONAL_NOTES_DELIMITER, addNotesPos,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                taskList.getTaskFromNumber(number).getNotes());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        Command command \u003d new EditCommand(number, name, time, duration, deadline, recurrence,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                Importance.valueOf(importance.toUpperCase()), notes);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Parses task information to get task number."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskInfo String representing task information"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return task number"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws EditNoIndexException Exception thrown when the user does not specify an index of the task they"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     *                              want to edit"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private static int getNumber(String taskInfo) throws EditNoIndexException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            int numberNextSlash \u003d taskInfo.indexOf(\"/\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            int number \u003d Integer.parseInt(taskInfo.substring(0, (numberNextSlash - 2)));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            return number;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        } catch (StringIndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            throw new EditNoIndexException();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Parses user input when command is list."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskInfo      String representing task information"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param importancePos Integer representing position of importance parameter"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param forecastPos   Integer representing position of forecast parameter"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @return command object"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public static Command parseListCommand(String taskInfo, int importancePos, int forecastPos)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            throws InvalidCommandException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        String importanceDefault \u003d \"ALL\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        String forecastDefault \u003d \"WEEK\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        String importance \u003d getParameterDesc(taskInfo, IMPORTANCE_DELIMITER, importancePos, importanceDefault);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        String forecast \u003d getParameterDesc(taskInfo, FORECAST_DELIMITER, forecastPos, forecastDefault);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        Command command \u003d new ListCommand(Importance.valueOf(importance.toUpperCase()),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                Forecast.valueOf(forecast.toUpperCase()));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Parses user input when command is done."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskInfo      String representing task information"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @return command object"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static Command parseDoneCommand(String taskInfo) throws CommandException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(taskInfo);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return new DoneCommand(taskIndex);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            throw new DoneNoIndexException();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Parses user input when command is delete."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskInfo      String representing task information"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @return command object"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static Command parseDeleteCommand(String taskInfo) throws CommandException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(taskInfo);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return new DeleteCommand(taskIndex);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            throw new DeleteNoIndexException();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Parses user input when command is view."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskInfo      String representing task information"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @return command object"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static Command parseViewCommand(String taskInfo) throws CommandException {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(taskInfo);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return new ViewCommand(taskIndex);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            throw new ViewNoIndexException();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Parses user input for shortcut commands."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param userInput String representing command and information of task"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @return actual input meaning string"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static String parseShortcutCommands(String userInput) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        HashMap\u003cString, String\u003e shortcutCommandsWithDetails \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        shortcutCommandsWithDetails.put(\"a\", \"add\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        shortcutCommandsWithDetails.put(\"e\", \"edit\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        shortcutCommandsWithDetails.put(\"l\", \"list\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        shortcutCommandsWithDetails.put(\"dn\", \"done\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        shortcutCommandsWithDetails.put(\"dl\", \"delete\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        shortcutCommandsWithDetails.put(\"v\", \"view\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        shortcutCommandsWithDetails.put(\"ex\", \"exit\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        shortcutCommandsWithDetails.put(\"l3\", \"list i/HIGH\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        shortcutCommandsWithDetails.put(\"l2\", \"list i/MEDIUM\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        shortcutCommandsWithDetails.put(\"l1\", \"list i/LOW\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        shortcutCommandsWithDetails.put(\"lw\", \"list f/WEEK\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        shortcutCommandsWithDetails.put(\"lt\", \"list f/TODAY\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        shortcutCommandsWithDetails.put(\"lm\", \"list f/MONTH\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String actualInputMeaning \u003d userInput;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        if (shortcutCommandsWithDetails.get(actualInputMeaning) !\u003d null) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            actualInputMeaning \u003d shortcutCommandsWithDetails.get(actualInputMeaning);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return actualInputMeaning;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Parses user input to split shortcut command and task information."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param userInput String representing task information"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @return task information string"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static String parseShortcutCommandAndDetails(String userInput) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String[] commandAndDetails \u003d userInput.split(COMMAND_WORD_DELIMITER, 2);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String shortcutInput \u003d parseShortcutCommands(commandAndDetails[0]);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String remainingTaskInfo \u003d \"\";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        if (commandAndDetails.length \u003e 1) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            remainingTaskInfo \u003d commandAndDetails[1];"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String fullInput \u003d shortcutInput + \" \" + remainingTaskInfo;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        fullInput \u003d fullInput.trim();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return fullInput;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Parses user input and recognises what type of command"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * and parameters the user typed."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param userInput    String representing user input"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskList Tasks list"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @return new Command object based on what the user input is"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws CommandException Exception thrown when there is an error when the user inputs a command"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static Command parse(String userInput, TaskList taskList) throws CommandException {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String fullInput \u003d parseShortcutCommandAndDetails(userInput);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String[] commandAndDetails \u003d fullInput.split(COMMAND_WORD_DELIMITER, 2);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String commandType \u003d commandAndDetails[0];"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String taskInfo \u003d \"\";"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        if (commandAndDetails.length \u003e 1) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            taskInfo \u003d commandAndDetails[1];"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        int namePos \u003d taskInfo.indexOf(NAME_DELIMITER);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        int timePos \u003d taskInfo.indexOf(TIME_DELIMITER);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        int durationPos \u003d taskInfo.indexOf(DURATION_DELIMITER);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        int deadlinePos \u003d taskInfo.indexOf(DEADLINE_DELIMITER);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        int recurrencePos \u003d taskInfo.indexOf(RECURRENCE_DELIMITER);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        int importancePos \u003d taskInfo.indexOf(IMPORTANCE_DELIMITER);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        int addNotesPos \u003d taskInfo.indexOf(ADDITIONAL_NOTES_DELIMITER);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        int forecastPos \u003d taskInfo.indexOf(FORECAST_DELIMITER);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        //TODO: add dep, to make 1 task dependent on another. \"dep TaskNumber1 Tasknumber2\""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        case \"add\": {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return parseAddCommand(taskInfo, namePos, timePos, durationPos, deadlinePos,"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                    recurrencePos, importancePos, addNotesPos);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        case \"edit\": {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return parseEditCommand(taskInfo, namePos, timePos, durationPos, deadlinePos,"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                    recurrencePos, importancePos, addNotesPos, taskList);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        case \"list\": {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            return parseListCommand(taskInfo, importancePos, forecastPos);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        case \"done\": {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return parseDoneCommand(taskInfo);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        case \"delete\": {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return parseDeleteCommand(taskInfo);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        case \"view\": {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return parseViewCommand(taskInfo);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        case \"exit\": {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        default: {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 42,
      "Kafcis": 5,
      "amanda-chua": 266,
      "daniellimws": 28,
      "wish2023": 2
    }
  },
  {
    "path": "src/main/java/athena/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "package athena.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.Importance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.exceptions.AddMissingRequiredParametersException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " * Handles adding tasks to the Tasks list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private String taskStartTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private String taskDuration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private String taskDeadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private String taskRecurrence;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private Importance taskImportance;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private String taskNotes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    private Boolean isTaskFlexible;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Initializes the object with the parameters."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param name       String representing name of task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param startTime  String representing start time of task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param duration   String representing duration of task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param deadline   String representing deadline of task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param recurrence String representing recurrence of task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param importance String representing importance of task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param notes      String representing additional notes of task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     * @param isFlexible  Boolean representing if task time is flexible"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public AddCommand(String name, String startTime, String duration, String deadline,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                      String recurrence, String importance, String notes, boolean isFlexible) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskName \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        assert !taskName.equals(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskStartTime \u003d startTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        assert !taskStartTime.equals(\"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskDuration \u003d duration;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskDeadline \u003d deadline;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskRecurrence \u003d recurrence;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskImportance \u003d Importance.valueOf(importance.toUpperCase());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskNotes \u003d notes;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        isTaskFlexible \u003d isFlexible;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Adds a task to the Tasks list and"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * calls Ui to print out the task added."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskList Tasks list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param ui       Ui"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws AddMissingRequiredParametersException Exception thrown when required parameters are not provided for"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     *                                               add command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void execute(TaskList taskList, Ui ui) throws AddMissingRequiredParametersException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        if (taskName.equals(\"\") || taskStartTime.equals(\"\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            throw new AddMissingRequiredParametersException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskList.addTask(taskName, taskStartTime, taskDuration, taskDeadline,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                taskRecurrence, taskImportance, taskNotes, isTaskFlexible);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        ui.printTaskAdded(taskName, taskStartTime, taskDuration, taskDeadline,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                taskRecurrence, taskImportance.toString(), taskNotes);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Determines if two objects have the same attributes."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param o object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return true if the two objects have the same attributes"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        if (!(o instanceof AddCommand)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        AddCommand that \u003d (AddCommand) o;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        return Objects.equals(taskName, that.taskName)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                \u0026\u0026 Objects.equals(taskStartTime, that.taskStartTime)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                \u0026\u0026 Objects.equals(taskDuration, that.taskDuration)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                \u0026\u0026 Objects.equals(taskDeadline, that.taskDeadline)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                \u0026\u0026 Objects.equals(taskRecurrence, that.taskRecurrence)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                \u0026\u0026 taskImportance \u003d\u003d that.taskImportance"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                \u0026\u0026 Objects.equals(taskNotes, that.taskNotes);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        return Objects.hash(taskName, taskStartTime, taskDuration,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                taskDeadline, taskRecurrence, taskImportance, taskNotes);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 38,
      "Kafcis": 7,
      "amanda-chua": 50,
      "daniellimws": 4
    }
  },
  {
    "path": "src/main/java/athena/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "package athena.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " * Abstract Command class for Command objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Set isExit to be false initially."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * For Commands execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskList Tasks list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param ui       Ui"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws CommandException Exception thrown when there is an error in user command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public abstract void execute(TaskList taskList, Ui ui) throws CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Check if the command is exit."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @return true if exit, false if not exit."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public boolean getIsExit() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 4,
      "amanda-chua": 33
    }
  },
  {
    "path": "src/main/java/athena/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "package athena.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " * Handles the delete command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private int deleteIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Initializes the object with the index of task to be deleted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param index Integer representing the index of task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        deleteIndex \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Deletes a task from the Tasks list and"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * calls Ui to print task deleted."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskList Tasks list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param ui       Ui"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws TaskNotFoundException Exception thrown when the user tries to enter the index of a task that"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     *                               does not exist"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void execute(TaskList taskList, Ui ui) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        Task deletedTask \u003d taskList.deleteTask(deleteIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        String taskRestore \u003d deletedTask.getTaskRestore();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        ui.printTaskDeleted(deletedTask, taskRestore);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Determines if two objects have the same attributes."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param o object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return true if the two objects have the same attributes"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        if (!(o instanceof DeleteCommand)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        DeleteCommand that \u003d (DeleteCommand) o;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        return deleteIndex \u003d\u003d that.deleteIndex;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        return Objects.hash(deleteIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 27,
      "Kafcis": 4,
      "amanda-chua": 27,
      "daniellimws": 3
    }
  },
  {
    "path": "src/main/java/athena/logic/commands/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "package athena.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " * Handles the done command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Initializes the object with the task number of task to be mark as done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskNumber Integer representing the task number of task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public DoneCommand(int taskNumber) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Marks a task as done from the Tasks list and"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * calls Ui to print task marked as done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskList Tasks list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param ui       Ui"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws TaskNotFoundException Exception thrown when the user tries to enter the index of a task that"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     *                               does not exist"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void execute(TaskList taskList, Ui ui) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        Task taskDone \u003d taskList.markTaskAsDone(taskNumber);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        ui.printTaskDone(taskDone);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Determines if two objects have the same attributes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param o object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return true if the two objects have the same attributes"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        if (!(o instanceof DoneCommand)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        DoneCommand that \u003d (DoneCommand) o;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return taskNumber \u003d\u003d that.taskNumber;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return Objects.hash(taskNumber);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 24,
      "amanda-chua": 27,
      "daniellimws": 9
    }
  },
  {
    "path": "src/main/java/athena/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "package athena.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.Importance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * Handles the edit command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private String taskStartTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private String taskDuration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private String taskDeadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private String taskRecurrence;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private Importance taskImportance;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private String taskNotes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Initializes the object with the parameters."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param number     Integer representing index of task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param name       String representing name of task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param startTime  String representing start time of task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param duration   String representing duration of task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param deadline   String representing deadline of task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param recurrence String representing recurrence of task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param importance String representing importance of task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param notes      String representing additional notes of task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public EditCommand(int number, String name, String startTime, String duration, String deadline,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                       String recurrence, Importance importance, String notes) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskNumber \u003d number;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskName \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskStartTime \u003d startTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskDuration \u003d duration;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskDeadline \u003d deadline;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskRecurrence \u003d recurrence;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskImportance \u003d importance;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskNotes \u003d notes;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Edits a task from the Tasks list and"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * calls Ui to print task edited."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskList Tasks list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param ui       Ui"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws TaskNotFoundException Exception thrown when the user tries to enter the index of a task that"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     *                               does not exist"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void execute(TaskList taskList, Ui ui) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.editTask(taskNumber, taskName, taskStartTime, taskDuration, taskDeadline,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                taskRecurrence, taskImportance, taskNotes);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        ui.printTaskEdited(taskNumber, taskName, taskStartTime, taskDuration, taskDeadline,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                taskRecurrence, taskImportance, taskNotes);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Determines if two objects have the same attributes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param o object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return true if the two objects have the same attributes"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        if (!(o instanceof EditCommand)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        EditCommand that \u003d (EditCommand) o;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return taskNumber \u003d\u003d that.taskNumber"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                \u0026\u0026 Objects.equals(taskName, that.taskName)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                \u0026\u0026 Objects.equals(taskStartTime, that.taskStartTime)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                \u0026\u0026 Objects.equals(taskDuration, that.taskDuration)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                \u0026\u0026 Objects.equals(taskDeadline, that.taskDeadline)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                \u0026\u0026 Objects.equals(taskRecurrence, that.taskRecurrence)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                \u0026\u0026 taskImportance \u003d\u003d that.taskImportance"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                \u0026\u0026 Objects.equals(taskNotes, that.taskNotes);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return Objects.hash(taskNumber, taskName, taskStartTime, taskDuration,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                taskDeadline, taskRecurrence, taskImportance, taskNotes);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 33,
      "amanda-chua": 47,
      "daniellimws": 12
    }
  },
  {
    "path": "src/main/java/athena/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "package athena.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " * Handles the exit command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Setting isExit to be true so program exits."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Calls Ui to print exit message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskList Tasks list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param ui       Ui"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        ui.printExitMessage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amanda-chua": 29
    }
  },
  {
    "path": "src/main/java/athena/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "package athena.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " * Handles the help command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Calls Ui to print help output."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskList Tasks list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param ui       Ui"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        ui.printHelp();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amanda-chua": 21
    }
  },
  {
    "path": "src/main/java/athena/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "package athena.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.Forecast;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.Importance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.exceptions.EmptyTaskListException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.task.taskfilter.ForecastFilter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.taskfilter.ImportanceFilter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.timetable.Timetable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " * Handles the list command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private Importance taskImportance;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private Forecast taskForecast;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Initializes the object with the parameters."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param importance Importance representing importance of task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param forecast   Forecast representing forecast of task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public ListCommand(Importance importance, Forecast forecast) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskImportance \u003d importance;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskForecast \u003d forecast;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Calls TaskList to filter the list based on importance and"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * calls Ui to print the list of tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskList Tasks list"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param ui       Ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws EmptyTaskListException Exception thrown when the task list is empty"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void execute(TaskList taskList, Ui ui) throws EmptyTaskListException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        if (taskList.getTasks().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            throw new EmptyTaskListException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        ImportanceFilter importanceFilter \u003d new ImportanceFilter(taskImportance);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        ForecastFilter forecastFilter \u003d new ForecastFilter(taskForecast);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        Timetable timetable \u003d new Timetable(taskList, importanceFilter, forecastFilter);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        ui.printTimetable(timetable);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Determines if two objects have the same attributes."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param o object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return true if the two objects have the same attributes"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        if (!(o instanceof ListCommand)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        ListCommand that \u003d (ListCommand) o;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        return taskImportance \u003d\u003d that.taskImportance \u0026\u0026 taskForecast \u003d\u003d that.taskForecast;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        return Objects.hash(taskImportance, taskForecast);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 36,
      "amanda-chua": 29,
      "daniellimws": 6
    }
  },
  {
    "path": "src/main/java/athena/logic/commands/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "package athena.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " * Handles the view command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Initializes the object with the task number of task to be viewed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskNumber Integer representing the task number of task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public ViewCommand(int taskNumber) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * View a task from the Tasks list and"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * calls Ui to print task details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param taskList Tasks list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param ui       Ui"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @throws TaskNotFoundException Exception thrown when the user tries to enter the index of a task that"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *                               does not exist"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void execute(TaskList taskList, Ui ui) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        String taskDescription \u003d taskList.getTaskDescription(taskNumber);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        ui.printTaskDetails(taskDescription);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Determines if two objects have the same attributes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @param o object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @return true if the two objects have the same attributes"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        if (!(o instanceof ViewCommand)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        ViewCommand that \u003d (ViewCommand) o;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return taskNumber \u003d\u003d that.taskNumber;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return Objects.hash(taskNumber);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amanda-chua": 60
    }
  },
  {
    "path": "src/main/java/athena/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "package athena.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.Importance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * Handles task objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public static final String YES \u003d \"Y\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public static final String NO \u003d \"N\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public static final int DATE_TIME_FORMAT \u003d 5;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public static final int FIRST_INDEX \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    private boolean isFlexible;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private boolean isDone \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private Importance importance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private String notes;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private int number;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    private Time timeInfo;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    //TODO: add dependencies between Tasks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Determines if the task is done."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return string representing if the task is done"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private String getStatus() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return (isDone ? YES : NO);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Constructor for the task class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     *  @param name       name of the task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param startTime  starting time of the task"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param duration   how long the task is scheduled to last for"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param deadline   when the task is due"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param recurrence when the task repeats"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param importance importance of the task"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param notes      additional notes for the task"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param number     task number"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     * @param isFlexible  time flexibility"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public Task(String name, String startTime, String duration, String deadline,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                String recurrence, Importance importance, String notes, int number, Boolean isFlexible) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        assert !this.name.equals(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.importance \u003d importance;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.number \u003d number;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        this.isFlexible \u003d isFlexible;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        this.timeInfo \u003d new Time(isFlexible, startTime, duration, deadline, recurrence);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public LocalDate getRecurrenceDate(String date) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public Task(String name, boolean isFlexible, boolean isDone, Importance importance,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                String notes, int number, Time timeInfo) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        this.isFlexible \u003d isFlexible;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        this.importance \u003d importance;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        this.number \u003d number;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        this.timeInfo \u003d timeInfo.getClone();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public Task getClone() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task copy \u003d new Task(name, isFlexible, isDone, importance, notes, number, timeInfo);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Edits the features of the task."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param name       New task name"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param startTime  New task start time"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param duration   New task duration"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param deadline   New task deadline"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param recurrence New task recurrence"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param importance New task importance"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param notes      New task notes"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void edit(String name, String startTime, String duration,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                     String deadline, String recurrence, Importance importance, String notes) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        assert !this.name.equals(\"\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        assert !startTime.equals(\"\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        assert !duration.equals(\"\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        assert !deadline.equals(\"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        this.timeInfo.edit(startTime, duration, deadline, recurrence);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.importance \u003d importance;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        assert this.importance !\u003d null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        if (!notes.equals(null)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            this.notes \u003d notes;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Return the importance of the task."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return Importance of task"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public Importance getImportance() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return importance;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return Description of task"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Returns if the task is done."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return Status of task completion"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Returns task notes."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return Task notes"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public String getNotes() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return notes;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Returns when the task repeats as a LocalDate object."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return When the task repeats as a LocalDate object"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public ArrayList\u003cLocalDate\u003e getDates() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return timeInfo.getRecurrenceDates();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * Deletes the specified date from recurrenceDates."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param date Date to delete"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public void removeDate(LocalDate date) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        timeInfo.removeDate(date);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Returns the task number."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return Task number"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public int getNumber() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return number;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Sets the task number."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param number Number that the user wants to set the task to."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void setNumber(int number) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.number \u003d number;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    public boolean isFlexible() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        return isFlexible;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    public void setFlexible(boolean isFlexible) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        this.isFlexible \u003d isFlexible;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Restores a task that the user has just deleted."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return String representing details of the task the user wants to restore"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    //TODO: rework this, hard to do if dependencies are added"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public String getTaskRestore() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        String taskRestore \u003d \"add n/\" + this.getName() + \" t/\" + timeInfo.getStartTime()"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                + \" d/\" + timeInfo.getDuration() + \" D/\" + this.timeInfo + \" r/\""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                + timeInfo.getRecurrence() + \" t/\" + this.getImportance()"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                + \" a/\" + this.getNotes();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return taskRestore;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    public Time getTimeInfo() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        return timeInfo;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public ArrayList\u003cLocalDate\u003e makeDeepCopyDates(ArrayList\u003cLocalDate\u003e oldDates) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        ArrayList\u003cLocalDate\u003e copy \u003d new ArrayList\u003cLocalDate\u003e();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        for (LocalDate date : oldDates) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            LocalDate dateCopy \u003d getRecurrenceDate(date.toString());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            copy.add(dateCopy);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Converts a task object to a string."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return task as a string"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return getStatus() + \" \" + name + \" at \" + timeInfo.getStartTime() + \" finish by \""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                + timeInfo.getDeadline();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Converts a task object to a string of details."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @return task as a string"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public String getDetailsAsString() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return \"\\n Done? \" + getStatus() + \"\\n Name: \" + name + \"\\n Start time: \" + timeInfo.getStartTime()"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                + \"\\n Deadline: \" + timeInfo.getDeadline() + \"\\n Duration: \" + timeInfo.getDuration()"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                + \"\\n Recurrence: \" + timeInfo.getRecurrence()"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                + \"\\n Importance: \" + importance + \"\\n Notes: \" + notes;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Compare this task with another object."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param o Object to compare with."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return Whether the object compared with is also a task and has the exact same properties."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        Task task \u003d (Task) o;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return isDone \u003d\u003d task.isDone"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \u0026\u0026 number \u003d\u003d task.number"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \u0026\u0026 Objects.equals(name, task.name)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \u0026\u0026 Objects.equals(timeInfo, task.timeInfo)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \u0026\u0026 importance \u003d\u003d task.importance"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \u0026\u0026 Objects.equals(notes, task.notes);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return Objects.hash(name, timeInfo, isDone, importance, notes, number);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kafcis": 31,
      "alstontham": 60,
      "amanda-chua": 8,
      "daniellimws": 114,
      "wish2023": 74
    }
  },
  {
    "path": "src/main/java/athena/task/Time.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "package athena.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wish2023"
        },
        "content": "/*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kafcis"
        },
        "content": " * Stores information related to time."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kafcis"
        },
        "content": " * examples include startTime, duration, deadline"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kafcis"
        },
        "content": " * Recurrence and recurrenceDate can also be stored here"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kafcis"
        },
        "content": " * setters and getter are needed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kafcis"
        },
        "content": " * new things to add ifFlexibleTime to let the TimeAllocate change the time values"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kafcis"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "public class Time implements Comparable\u003cTime\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    private static final int DATE_TIME_FORMAT \u003d 5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private boolean isFlexible;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private int duration;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    private String deadline;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    private String recurrence;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    private ArrayList\u003cLocalDate\u003e recurrenceDates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public Time(boolean isFlexible, LocalTime startTime, int duration, String deadline, String recurrence) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        this.isFlexible \u003d isFlexible;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        setRecurrence(recurrence);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    public Time(Boolean isFlexible, String startTime, String duration, String deadline, String recurrence) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        this.isFlexible \u003d isFlexible;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assert !startTime.equals(\"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.startTime \u003d LocalTime.parse(startTime, DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.duration \u003d Integer.parseInt(duration);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        setRecurrence(recurrence);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public Time getClone() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return new Time(isFlexible, startTime, duration, deadline, recurrence);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public void setRecurrence(String recurrence) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        switch (recurrence.toUpperCase()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        case \"TODAY\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            recurrenceDates.add(LocalDate.now());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        case \"MONDAY\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            LocalDate mondayDate \u003d getFirstDateMatchingDay(DayOfWeek.MONDAY);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            addDates(mondayDate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        case \"TUESDAY\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            LocalDate tuesdayDate \u003d getFirstDateMatchingDay(DayOfWeek.TUESDAY);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            addDates(tuesdayDate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        case \"WEDNESDAY\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            LocalDate wednesdayDate \u003d getFirstDateMatchingDay(DayOfWeek.WEDNESDAY);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            addDates(wednesdayDate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        case \"THURSDAY\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            LocalDate thursdayDate \u003d getFirstDateMatchingDay(DayOfWeek.THURSDAY);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            addDates(thursdayDate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        case \"FRIDAY\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            LocalDate fridayDate \u003d getFirstDateMatchingDay(DayOfWeek.FRIDAY);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            addDates(fridayDate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        case \"SATURDAY\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            LocalDate saturdayDate \u003d getFirstDateMatchingDay(DayOfWeek.SATURDAY);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            addDates(saturdayDate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        case \"SUNDAY\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            LocalDate sundayDate \u003d getFirstDateMatchingDay(DayOfWeek.SUNDAY);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            addDates(sundayDate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                setRecurrenceDate(recurrence);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                // TODO: Handle this properly"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                System.out.println(\"I don\u0027t understand the date you gave. So I set it to today.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                recurrenceDates.add(LocalDate.now());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    private void addDates(LocalDate startDate) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) { // Max number of weeks now is 10 to prevent infinite recurrence"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            recurrenceDates.add(startDate.plusWeeks(i));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    private LocalDate getFirstDateMatchingDay(DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        LocalDate startDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        for (int i \u003d 0; i \u003c 6; i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            if (startDate.getDayOfWeek().equals(dayOfWeek)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                startDate \u003d startDate.plusDays(1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    private void setRecurrenceDate(String recurrence) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        if (recurrence.length() \u003d\u003d \"dd-MM\".length()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            int year \u003d getYear(recurrence);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            this.recurrence \u003d recurrence + \"-\" + year;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            recurrenceDates.add(LocalDate.parse(recurrence + \"-\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                    + Integer.toString(year), formatter));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            recurrenceDates.add(LocalDate.parse(recurrence, formatter));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    private void resetRecurrence() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        recurrenceDates.clear();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    private int getMonth(String recurrence) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return Integer.parseInt(recurrence.substring(3,5));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    private int getDay(String recurrence) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return Integer.parseInt(recurrence.substring(0,2));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    private int getYear(String recurrence) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        int month \u003d getMonth(recurrence);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        int day \u003d getDay(recurrence);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        int year;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        if (currentDate.getMonthValue() \u003e month) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            year \u003d currentDate.getYear() + 1;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        } else if (currentDate.getMonthValue() \u003d\u003d month"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \u0026\u0026 currentDate.getDayOfMonth() \u003e day) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            System.out.println(\"Hello!\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            year \u003d currentDate.getYear() + 1;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            year \u003d currentDate.getYear();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public ArrayList\u003cLocalDate\u003e getRecurrenceDates() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return recurrenceDates;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * Returns start time of the task."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @return Start time of task"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Converts the start time to a string."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return Start time of task as a string."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public String getStartTimeString() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return startTime.format(timeFormatter);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public String getRecurrence() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return recurrence;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * Returns duration of the task."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @return Duration of task"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public int getDuration() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Converts the duration to a string."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return Duration of task as a string."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public String getDurationString() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return Integer.toString(duration);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * Returns due date of the task."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @return Due date of task"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    public Boolean getFlexible() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        return isFlexible;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    public int compareTo(Time o) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public void edit(String startTime, String duration, String deadline, String recurrence) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.startTime \u003d LocalTime.parse(startTime, DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.duration \u003d Integer.parseInt(duration);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        resetRecurrence();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        setRecurrence(recurrence);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        assert !this.recurrenceDates.equals(null);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public void removeDate(LocalDate date) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        recurrenceDates.remove(date);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * Compare this time with another object."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param o Object to compare with."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @return Whether the object compared with is also a time and has the exact same properties."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Time time \u003d (Time) o;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return isFlexible \u003d\u003d time.isFlexible"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \u0026\u0026 Objects.equals(startTime, time.startTime)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \u0026\u0026 Objects.equals(duration, time.duration)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \u0026\u0026 Objects.equals(deadline, time.deadline)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                \u0026\u0026 Objects.equals(recurrenceDates, time.recurrenceDates);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    //    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    //    public int compareTo(Time o) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    //        if(this.startTime\u003eo.startTime){"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    //            return 1;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    //        return 0;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kafcis": 58,
      "daniellimws": 39,
      "wish2023": 166
    }
  },
  {
    "path": "src/main/java/athena/task/taskfilter/FlexibleTimeFilter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "package athena.task.taskfilter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "public class FlexibleTimeFilter extends TaskFilter {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    private Boolean doesIncludeFlexibleTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public FlexibleTimeFilter(Boolean doesIncludeFlexibleTask) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        this.doesIncludeFlexibleTask \u003d doesIncludeFlexibleTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     * This is to check if the time for this task is flexible."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     * need to modify this later to access checkFlexible"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     * currently it only checks for an empty getDate of the task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     * @param task Task to check."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    public boolean isTaskIncluded(Task task) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return task.isFlexible() ^ doesIncludeFlexibleTask;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kafcis": 23,
      "wish2023": 4
    }
  },
  {
    "path": "src/main/java/athena/task/taskfilter/ForecastFilter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wish2023"
        },
        "content": "package athena.task.taskfilter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.Forecast;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import java.time.temporal.TemporalField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import java.time.temporal.WeekFields;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wish2023"
        },
        "content": "public class ForecastFilter extends TaskFilter {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    private Forecast forecast;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    private LocalDate todayDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public ForecastFilter(Forecast forecast) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        this.forecast \u003d forecast;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * Checks whether to include a task based on its date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @param task Task to check."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * @return Whether the task should be included."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public boolean isTaskIncluded(Task task) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        for (LocalDate date : task.getDates()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            if (isDateIncluded(date)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    private static int getWeekNumber(LocalDate taskDate) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        TemporalField woy \u003d WeekFields.of(Locale.getDefault()).weekOfWeekBasedYear();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return taskDate.get(woy);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    private boolean isDateIncluded(LocalDate taskDate) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        boolean isDateIncluded;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        if (forecast \u003d\u003d Forecast.ALL) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            isDateIncluded \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        } else if (forecast \u003d\u003d Forecast.WEEK) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            int currentWeekNumber \u003d getWeekNumber(todayDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            int taskWeekNumber \u003d getWeekNumber(taskDate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            isDateIncluded \u003d (currentWeekNumber \u003d\u003d taskWeekNumber);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            isDateIncluded \u003d taskDate.equals(todayDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return isDateIncluded;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public Task removeExcludedDates(Task task) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task taskCopy \u003d task.getClone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        ArrayList\u003cLocalDate\u003e datesToDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        for (LocalDate date : taskCopy.getDates()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            if (!isDateIncluded(date)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                datesToDelete.add(date);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        for (LocalDate date : datesToDelete) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            taskCopy.removeDate(date);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return taskCopy;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wish2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wish2023": 71
    }
  },
  {
    "path": "src/main/java/athena/task/taskfilter/ImportanceFilter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "package athena.task.taskfilter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.Importance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "public class ImportanceFilter extends TaskFilter {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private Importance importance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public ImportanceFilter(Importance importance) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.importance \u003d importance;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Checks whether to include a task based on it\u0027s importance."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param task Task to check."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return Whether the task should be included."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public boolean isTaskIncluded(Task task) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        boolean isTaskIncluded;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        if (importance \u003d\u003d Importance.ALL) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            isTaskIncluded \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            isTaskIncluded \u003d (task.getImportance() \u003d\u003d importance);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return isTaskIncluded;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimws": 23,
      "wish2023": 8
    }
  },
  {
    "path": "src/main/java/athena/task/taskfilter/TaskFilter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "package athena.task.taskfilter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimws"
        },
        "content": " * Contains information about how to filter a task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimws"
        },
        "content": " * This is used by athena.timetable.Timetable to filter out"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimws"
        },
        "content": " * tasks based on the user\u0027s request."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimws"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "public abstract class TaskFilter {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Should be overridden by children classes to filter a task based on certain"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * criteria."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param task Task to check."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return Whether the task should be included."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public abstract boolean isTaskIncluded(Task task);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimws": 19
    }
  },
  {
    "path": "src/main/java/athena/timetable/Timetable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "package athena.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.task.taskfilter.ForecastFilter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.task.taskfilter.ImportanceFilter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.time.temporal.TemporalField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.time.temporal.WeekFields;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimws"
        },
        "content": " * Takes a TaskList to generate a timetable for the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimws"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "public class Timetable {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public static final String DAY_BOX_HORIZONTAL_BORDER \u003d \"-------\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public static final String BOX_CORNER \u003d \"+\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public static final String TIME_HEADER_HORIZONTAL_BORDER \u003d \"---------\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public static final String TASK_BOX_HORIZONTAL_BORDER \u003d TIME_HEADER_HORIZONTAL_BORDER + \"-\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public static final String DATE_BOX \u003d \"| %02d/%02d |\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public static final String TASK_NUMBER_LABEL \u003d \"[%d]\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public static final String DAY_BOX \u003d \"|  %s  |\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public static final String EMPTY_TASK_BOX \u003d \"          |\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public static final String TASK_BOX \u003d \" %s|\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private ArrayList\u003cTimetableDay\u003e timetableDays;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private TreeMap\u003cLocalDate, TimetableDay\u003e timetableDayMap;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private int wakeUpHour;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private int sleepHour;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Creates a timetable object from a TaskList object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskList Task list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public Timetable(TaskList taskList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this(taskList, 8, 22);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Creates a timetable object from a TaskList object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param taskList   Task list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param sleepHour  Hour to sleep"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param wakeUpHour Hour to wake up"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public Timetable(TaskList taskList, int wakeUpHour, int sleepHour) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assert taskList !\u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        populateTimetable();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.wakeUpHour \u003d wakeUpHour;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.sleepHour \u003d sleepHour;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Creates a timetable object from a TaskList, ImportanceFilter and ForecastFilter object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskList         Task list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param importanceFilter Filters tasks of a certain importance"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param forecastFilter   Filters tasks based on forecast"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public Timetable(TaskList taskList, ImportanceFilter importanceFilter, ForecastFilter forecastFilter) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assert taskList !\u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        this.taskList \u003d taskList.getFilteredList(importanceFilter).getFilteredList(forecastFilter);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        populateTimetable();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public int getWakeUpHour() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return wakeUpHour;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void setWakeUpHour(int wakeUpHour) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.wakeUpHour \u003d wakeUpHour;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public int getSleepHour() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return sleepHour;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void setSleepHour(int sleepHour) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.sleepHour \u003d sleepHour;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Getter for timetableDays."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return timetableDays."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public ArrayList\u003cTimetableDay\u003e getTimetableDays() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return timetableDays;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Setter for timetableDays."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void setTimetableDays(ArrayList\u003cTimetableDay\u003e timetableDays) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.timetableDays \u003d timetableDays;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Populates the timetable, represented by a list of TimetableDays with the information from the task list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * For this version, we only populate the timetable with the tasks for this week (starting from Monday)."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private void populateTimetable() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.timetableDays \u003d new ArrayList\u003cTimetableDay\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        timetableDayMap \u003d new TreeMap\u003cLocalDate, TimetableDay\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        for (Task task : taskList.getTasks()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            ArrayList\u003cLocalDate\u003e dates \u003d task.getDates();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            for (LocalDate date : dates) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                assert date !\u003d null;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                TimetableDay timetableDay;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                if (timetableDayMap.containsKey(date)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                    timetableDay \u003d timetableDayMap.get(date);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                    timetableDay \u003d new TimetableDay(date);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                    timetableDayMap.put(date, timetableDay);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                timetableDay.addTask(task);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        for (LocalDate key : timetableDayMap.keySet()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            timetableDays.add(timetableDayMap.get(key));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Generates the timetable header containing hour marks."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * For example, +------08------09------10------11------+"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param startHour The starting hour in 24-hour representation."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param endHour   The ending hour in 24-hour representation."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return A string containing the timetable header with hour marks."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private String drawTimetableTimeHeader(int startHour, int endHour) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        String header \u003d \"\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        header +\u003d BOX_CORNER + DAY_BOX_HORIZONTAL_BORDER;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        for (int hour \u003d startHour; hour \u003c endHour; hour++) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            String paddedHourString \u003d String.format(\"%02d\", hour);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            header +\u003d paddedHourString + TIME_HEADER_HORIZONTAL_BORDER;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        header +\u003d BOX_CORNER + \"\\n\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return header;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Generates the bottom border for a day in the timetable."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param startHour The starting hour in 24-hour representation."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param endHour   The ending hour in 24-hour representation."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return A string that represents the bottom border for a day in the timetable."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private String drawBottomBorder(int startHour, int endHour) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        String row \u003d \"\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        row +\u003d BOX_CORNER + DAY_BOX_HORIZONTAL_BORDER + BOX_CORNER;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        for (int i \u003d startHour; i \u003c endHour; i++) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            row +\u003d TASK_BOX_HORIZONTAL_BORDER + BOX_CORNER;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        row +\u003d \"\\n\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return row;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Utility method to fit a string into a given length."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * If the string is shorter than desired, pad it with spaces."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * If the string is longer than desired, truncate it and replace the end with \"..\"."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param string The string to fit."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param maxLen The desired length."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return The string that is modified to fit into a given length."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private String shortenOrPadString(String string, int maxLen) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        if (string.length() \u003d\u003d maxLen) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            return string;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        } else if (string.length() \u003c maxLen) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            return String.format(\"%\" + -maxLen + \"s\", string);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return String.format(\"%s..\", string.substring(0, maxLen - 2));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Finds a task in a task list that starts at the given hour."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param taskList Task list to search through."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param hour     Starting time of the task."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return The task that starts at the given hour. Null if doesn\u0027t exist."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private Task findTaskAtHour(TaskList taskList, int hour) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        for (Task task : taskList.getTasks()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            int taskHour \u003d task.getTimeInfo().getStartTime().getHour();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            if (taskHour \u003d\u003d hour) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                return task;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Generates a row for a day in the timetable containing the task information desired."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param day            The TimetableDay object for this day."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param startHour      The starting hour in 24-hour representation."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param endHour        The ending hour in 24-hour representation."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param taskInfoWriter A Function that extracts the information desired from a task."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return A string containing the task information desired."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private String drawTimetableDayRow(TimetableDay day, int startHour, int endHour,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                                       Function\u003cTask, String\u003e taskInfoWriter) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        String row \u003d \"\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        for (int hour \u003d startHour; hour \u003c endHour; hour++) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            Task task \u003d findTaskAtHour(day.getTaskList(), hour);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            if (task \u003d\u003d null) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                row +\u003d EMPTY_TASK_BOX;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            int duration \u003d task.getTimeInfo().getDuration();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            // TODO: better handle tasks exceeding sleep time, currently it just cuts off at sleep time"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            duration \u003d Math.min(duration, endHour - hour);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            hour +\u003d duration - 1;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            int boxWidth \u003d duration * (TASK_BOX_HORIZONTAL_BORDER + BOX_CORNER).length() - 2;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            row +\u003d String.format(TASK_BOX, shortenOrPadString(taskInfoWriter.apply(task), boxWidth));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return row;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Generates the first row for a day in the timetable, which contains the name of the day and the task names."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param day       The TimetableDay object for this day."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param startHour The starting hour in 24-hour representation."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param endHour   The ending hour in 24-hour representation."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return A string containing name of the day and the task names."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private String drawTimetableDayFirstRow(TimetableDay day, int startHour, int endHour) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        String dayShortName \u003d day.getDate().getDayOfWeek().toString().substring(0, 3).toUpperCase();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        String row \u003d String.format(DAY_BOX, dayShortName);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        row +\u003d drawTimetableDayRow(day, startHour, endHour, new Function\u003cTask, String\u003e() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            public String apply(Task task) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                return task.getName();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        });"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        row +\u003d \"\\n\";"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return row;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Generates the second row for a day in the timetable, which contains the date of the day and the task numbers."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param day       The TimetableDay object for this day."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param startHour The starting hour in 24-hour representation."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param endHour   The ending hour in 24-hour representation."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return A string containing date of the day and the task numbers."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private String drawTimetableDaySecondRow(TimetableDay day, int startHour, int endHour) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        LocalDate date \u003d day.getDate();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        String row \u003d String.format(DATE_BOX, date.getDayOfMonth(), date.getMonthValue());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        row +\u003d drawTimetableDayRow(day, startHour, endHour, new Function\u003cTask, String\u003e() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            public String apply(Task task) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                return String.format(TASK_NUMBER_LABEL, task.getNumber());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        });"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        row +\u003d \"\\n\";"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return row;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Generates the row representing a day in the timetable."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param day       The TimetableDay object for this day."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param startHour The starting hour in 24-hour representation."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param endHour   The ending hour in 24-hour representation."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return A string containing information about a day in the timetable."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private String drawTimetableDay(TimetableDay day, int startHour, int endHour) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        String row \u003d \"\";"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        row +\u003d drawTimetableDayFirstRow(day, startHour, endHour);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        row +\u003d drawTimetableDaySecondRow(day, startHour, endHour);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        row +\u003d drawBottomBorder(startHour, endHour);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return row;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Utility method to get the first day of this week."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return The first day of this week."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private LocalDate getFirstDayOfWeek() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        LocalDate now \u003d LocalDate.now();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TemporalField field \u003d WeekFields.of(Locale.forLanguageTag(\"en_SG\")).dayOfWeek();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return now.with(field, 1);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private LocalDate[] getDatesInWeek() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        LocalDate[] datesInWeek \u003d new LocalDate[7];"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        LocalDate date \u003d getFirstDayOfWeek();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            datesInWeek[i] \u003d date;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            date \u003d date.plusDays(1);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return datesInWeek;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private String getTaskListForDates(LocalDate[] dates) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        String list \u003d \"Your task list: \\n\";"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        for (LocalDate date : dates) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            if (timetableDayMap.containsKey(date)) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                list +\u003d timetableDayMap.get(date);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                list +\u003d new TimetableDay(date);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            list +\u003d \"\\n\";"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    String drawTimetable(LocalDate[] datesInWeek) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        String result \u003d drawTimetableTimeHeader(wakeUpHour, sleepHour);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        for (LocalDate date : datesInWeek) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            if (timetableDayMap.containsKey(date)) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                result +\u003d drawTimetableDay(timetableDayMap.get(date), wakeUpHour, sleepHour);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                result +\u003d drawTimetableDay(new TimetableDay(date), wakeUpHour, sleepHour);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Generates a string to show the user the timetable."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return A string representing the timetable."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        // TODO: get dates based on the forecastfilter"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        LocalDate[] dates \u003d getDatesInWeek();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        String output \u003d drawTimetable(dates);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        output +\u003d getTaskListForDates(dates);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return output.trim();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 14,
      "daniellimws": 346,
      "wish2023": 3
    }
  },
  {
    "path": "src/main/java/athena/timetable/TimetableDay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "package athena.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimws"
        },
        "content": " * Represents a day in the timetable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimws"
        },
        "content": " * Contains the date and the list of tasks, which is a subset of all the tasks"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimws"
        },
        "content": " * that the user registered into the program."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimws"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "public class TimetableDay {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Initializes the object with the date and an empty task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param date Date represented by this object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public TimetableDay(LocalDate date) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assert date !\u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Getter for date."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return date."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Getter for taskList."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return taskList."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public TaskList getTaskList() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param task Task to be added."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Generates a string containing the date and list of tasks that is to"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * be printed to the user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return A string containing the date and list of tasks."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        String message \u003d date.toString() + \":\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        if (taskList.getTasks().isEmpty()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            message +\u003d \"Got no tasks for this day\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            for (Task task : taskList.getTasks()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                message +\u003d task + \"\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimws": 74
    }
  },
  {
    "path": "src/test/java/athena/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package athena;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.logic.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * Tests method of the Parser class."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alstontham"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Creates a new Parser and TaskList object before running each test."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Checks if the help command is shown if the user enters an invalid command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws CommandException Exception thrown if there is an error with the user entered command"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void parse_unknownCommandWord_returnsHelp() throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        final String input \u003d \"unknown arguments\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        parseAndAssertCommandType(input, HelpCommand.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Tests for 0-argument commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Checks if the help command is shown if the user types \"help\"."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws CommandException Exception thrown if there is an error with the user entered command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void parse_helpCommand_parsedCorrectly() throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        final String input \u003d \"help\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        parseAndAssertCommandType(input, HelpCommand.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Checks if the program exits if the user types \"exit\"."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws CommandException Exception thrown if there is an error with the user entered command"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void parse_exitCommand_parsedCorrectly() throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        final String input \u003d \"exit\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        parseAndAssertCommandType(input, ExitCommand.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Checks if the program exits if the user types \"ex\"."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @throws CommandException Exception thrown if there is an error with the user entered command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void parse_exitShortcutCommand_parsedCorrectly() throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final String input \u003d \"ex\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        parseAndAssertCommandType(input, ExitCommand.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Tests for single index argument commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Checks if the program deletes the correct task at index 1."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws CommandException Exception thrown if there is an error with the user entered command"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void parse_deleteCommandNumericArg_indexParsedCorrectly() throws CommandException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        final int testNumber \u003d 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        final String input \u003d \"delete 1\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        final DeleteCommand parsedCommand \u003d parseAndAssertCommandType(input, DeleteCommand.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        final DeleteCommand expectedCommand \u003d new DeleteCommand(testNumber);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        assertEquals(parsedCommand, expectedCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Checks if the program deletes the correct task at index 1."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @throws CommandException Exception thrown if there is an error with the user entered command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void parse_deleteShortcutCommandNumericArg_indexParsedCorrectly() throws CommandException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final int testNumber \u003d 1;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final String input \u003d \"dl 1\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final DeleteCommand parsedCommand \u003d parseAndAssertCommandType(input, DeleteCommand.class);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final DeleteCommand expectedCommand \u003d new DeleteCommand(testNumber);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        assertEquals(parsedCommand, expectedCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Checks if the program marks the task at index 1 as done."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws CommandException Exception thrown if there is an error with the user entered command"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void parse_doneCommandNumericArg_indexParsedCorrectly() throws CommandException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        final int testNumber \u003d 1;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        final String input \u003d \"done 1\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        final DoneCommand parsedCommand \u003d parseAndAssertCommandType(input, DoneCommand.class);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        final DoneCommand expectedCommand \u003d new DoneCommand(testNumber);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        assertEquals(parsedCommand, expectedCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Checks if the program marks the task at index 1 as done."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @throws CommandException Exception thrown if there is an error with the user entered command"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void parse_doneShortcutCommandNumericArg_indexParsedCorrectly() throws CommandException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final int testNumber \u003d 1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final String input \u003d \"dn 1\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final DoneCommand parsedCommand \u003d parseAndAssertCommandType(input, DoneCommand.class);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final DoneCommand expectedCommand \u003d new DoneCommand(testNumber);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        assertEquals(parsedCommand, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Checks if the program displays the details of task at index 1."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @throws CommandException Exception thrown if there is an error with the user entered command"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void parse_viewCommandNumericArg_indexParsedCorrectly() throws CommandException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final int testNumber \u003d 1;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final String input \u003d \"view 1\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final ViewCommand parsedCommand \u003d parseAndAssertCommandType(input, ViewCommand.class);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final ViewCommand expectedCommand \u003d new ViewCommand(testNumber);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        assertEquals(parsedCommand, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Checks if the program displays the details of task at index 1."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @throws CommandException Exception thrown if there is an error with the user entered command"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void parse_viewShortcutCommandNumericArg_indexParsedCorrectly() throws CommandException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final int testNumber \u003d 1;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final String input \u003d \"v 1\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final ViewCommand parsedCommand \u003d parseAndAssertCommandType(input, ViewCommand.class);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final ViewCommand expectedCommand \u003d new ViewCommand(testNumber);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        assertEquals(parsedCommand, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Tests for multiple argument commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Checks if the program adds a task correctly."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws CommandException Exception thrown if there is an error with the user entered command"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void parse_addCommandArg_parsedCorrectly() throws CommandException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        final String input \u003d \"add n/Assignment1 t/1100 D/16-09-2020 d/2 hours r/Monday i/high a/Refer to slides\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        final AddCommand parsedCommand \u003d parseAndAssertCommandType(input, AddCommand.class);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        final AddCommand expectedCommand \u003d new AddCommand(\"Assignment1\", \"1100\","
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                \"2 hours\", \"16-09-2020\", \"Monday\", \"high\","
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"Refer to slides\", false);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        assertEquals(parsedCommand, expectedCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Checks if the program adds a task correctly."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @throws CommandException Exception thrown if there is an error with the user entered command"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void parse_addShortcutCommandArg_parsedCorrectly() throws CommandException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final String input \u003d \"a n/Assignment1 t/1100 D/16-09-2020 d/2 hours r/Monday i/high a/Refer to slides\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final AddCommand parsedCommand \u003d parseAndAssertCommandType(input, AddCommand.class);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final AddCommand expectedCommand \u003d new AddCommand(\"Assignment1\", \"1100\","
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                \"2 hours\", \"16-09-2020\", \"Monday\",\"high\","
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                \"Refer to slides\", false);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        assertEquals(parsedCommand, expectedCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Checks if the program edits a task correctly."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws CommandException Exception thrown if there is an error with the user entered command"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void parse_editCommandAllArg_parsedCorrectly() throws CommandException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(\"name\", \"1600\", \"1\", \"deadline\","
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"12-10-2020\", Importance.LOW, \"dummyNote\", false);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        final int testNumber \u003d 0;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        final String input \u003d \"edit 0 n/Assignment1 t/1100 D/16-09-2020 d/2 r/13-10-2020 i/high a/Refer to slides\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        final EditCommand parsedCommand \u003d parseAndAssertCommandType(input, EditCommand.class);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        final EditCommand expectedCommand \u003d new EditCommand(testNumber, \"Assignment1\", \"1100\","
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"2\", \"16-09-2020\", \"13-10-2020\", Importance.valueOf(\"high\".toUpperCase()),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                \"Refer to slides\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        assertEquals(parsedCommand, expectedCommand);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Checks if the program edits a task correctly."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @throws CommandException Exception thrown if there is an error with the user entered command"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void parse_editShortcutCommandAllArg_parsedCorrectly() throws CommandException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(\"name\", \"1600\", \"2\", \"deadline\","
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                \"12-10-2020\", Importance.LOW, \"dummyNote\", false);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final int testNumber \u003d 0;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final String input \u003d \"e 0 n/Assignment1 t/1100 D/16-09-2020 d/2 hours r/13-10-2020 i/high a/Refer to slides\";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final EditCommand parsedCommand \u003d parseAndAssertCommandType(input, EditCommand.class);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final EditCommand expectedCommand \u003d new EditCommand(testNumber,\"Assignment1\", \"1100\","
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                \"2 hours\", \"16-09-2020\", \"13-10-2020\", Importance.valueOf(\"high\".toUpperCase()),"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "                \"Refer to slides\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        assertEquals(parsedCommand, expectedCommand);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Checks if the program edits a task correctly with fewer parameters."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws CommandException Exception thrown if there is an error with the user entered command"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void parse_editCommandSomeArg_parsedCorrectly() throws CommandException {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(\"name\", \"1600\", \"2\", \"deadline\","
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"12-10-2020\", Importance.LOW, \"dummyNote\", false);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        final int testNumber \u003d 0;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        final String input \u003d \"edit 0 n/I have changed a/I am not filling any other arguments\";"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        final EditCommand parsedCommand \u003d parseAndAssertCommandType(input, EditCommand.class);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        final EditCommand expectedCommand \u003d new EditCommand(testNumber, \"I have changed\", \"1600\","
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"2\", \"deadline\", \"12-10-2020\", Importance.valueOf(\"low\".toUpperCase()),"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                \"I am not filling any other arguments\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        assertEquals(parsedCommand, expectedCommand);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void parse_editCommandBadArg_throwsException() throws CommandException {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        final String input \u003d \"edit abcde\";"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            parseAndAssertCommandType(input, EditCommand.class);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        });"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void parse_editCommandBadArg2_throwsException() throws CommandException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        final String input \u003d \"edit 1a/\";"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            parseAndAssertCommandType(input, EditCommand.class);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        });"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void parse_editCommandBadArg3_throwsException() throws CommandException {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        final String input \u003d \"edit 1 n/n/\";"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            parseAndAssertCommandType(input, EditCommand.class);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        });"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void parse_viewCommandBadArg_throwsException() throws CommandException {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final String input \u003d \"view abcde\";"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            parseAndAssertCommandType(input, ViewCommand.class);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        });"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void parse_doneCommandBadArg_throwsException() throws CommandException {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final String input \u003d \"done abcde\";"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            parseAndAssertCommandType(input, DoneCommand.class);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        });"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void parse_deleteCommandBadArg_throwsException() throws CommandException {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        final String input \u003d \"delete abcde\";"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "            parseAndAssertCommandType(input, DeleteCommand.class);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        });"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void parse_listCommandArg_parsedCorrectly() throws CommandException {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        final String input \u003d \"list f/WEEK i/medium\";"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        final ListCommand parsedCommand \u003d parseAndAssertCommandType(input, ListCommand.class);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        final ListCommand expectedCommand \u003d new ListCommand(Importance.MEDIUM, Forecast.WEEK);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        assertEquals(parsedCommand, expectedCommand);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Utility methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Parses input and asserts the class of the returned command object."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     *"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param input                to be parsed"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param expectedCommandClass expected class of returned command"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return the parsed command object"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    private \u003cT extends Command\u003e T parseAndAssertCommandType(String input, Class\u003cT\u003e expectedCommandClass)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        final Command result \u003d parser.parse(input, taskList);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        assertTrue(result.getClass().isAssignableFrom(expectedCommandClass));"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        return (T) result;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 155,
      "Kafcis": 12,
      "amanda-chua": 130,
      "daniellimws": 32
    }
  },
  {
    "path": "src/test/java/athena/StorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "package athena;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * Tests Storage methods."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Checks if a save file is created correctly if a save file doesn\u0027t originally exist."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    void saveTaskListData_noPreviousSave_createSaveFile() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TaskList taskList \u003d TestSetup.getTestTaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        Storage storage \u003d new Storage(\"src/test/java/athena/loadTask.csv\", ui);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        storage.saveTaskListData(taskList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        assertTrue(areFilesSame(\"src/test/java/athena/loadTask.csv\", \"src/test/java/athena/StorageTestAnswer1.csv\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Checks if two save files are the same based on their contents."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param file1 First file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param file2 Second file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return True or false depending on if the files are the same"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    private boolean areFilesSame(String file1, String file2) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        BufferedReader expected \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            expected \u003d new BufferedReader(new FileReader(file1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            BufferedReader actual \u003d new BufferedReader(new FileReader(file2));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            String expectedLine \u003d expected.readLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            String actualLine \u003d actual.readLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            while ((expectedLine !\u003d null) || (actualLine !\u003d null)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                assert expectedLine !\u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                if (!expectedLine.contentEquals(actualLine)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                expectedLine \u003d expected.readLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                actualLine \u003d actual.readLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Checks if the program is able to load a save file correctly."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    void loadTaskListData_saveFileFound_createTaskList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        Storage storage \u003d new Storage(\"src/test/java/athena/StorageTestAnswer1.csv\", ui);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TaskList taskList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList \u003d storage.loadTaskListData();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TaskList tester \u003d TestSetup.getTestTaskList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertTrue(tester.equals(taskList));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    void loadTaskListData_commaInTaskAttribute_commaIsReplaced() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "        Storage storage \u003d new Storage(\"src/test/java/athena/StorageTestAnswer2.csv\", ui);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TaskList taskList;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList \u003d storage.loadTaskListData();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TaskList tester \u003d TestSetup.getCommaTestTaskList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertTrue(tester.equals(taskList));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kafcis": 52,
      "alstontham": 15,
      "daniellimws": 12
    }
  },
  {
    "path": "src/test/java/athena/TestSetup.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "package athena;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": " * Sets up a task list for testing classes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimws"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "public class TestSetup {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Gets a task list filled with default tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return Task list of default tasks"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public static TaskList getTestTaskList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(0, \"Assignment 1\", \"1600\", \"2\", \"6pm\", \"12-12-2020\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.HIGH, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(1, \"Assignment 2\", \"1600\", \"2\", \"6pm\", \"13-12-2020\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.MEDIUM, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(2, \"Assignment 3\", \"1600\", \"2\", \"6pm\", \"14-12-2020\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.LOW, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(3, \"Assignment 4\", \"1600\", \"2\", \"6pm\", \"14-12-2020\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.MEDIUM, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(4, \"Assignment 5\", \"1600\", \"2\", \"6pm\", \"14-12-2020\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.HIGH, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(5, \"Assignment 6\", \"1600\", \"2\", \"6pm\", \"15-12-2020\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.MEDIUM, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(6, \"Assignment 7\", \"1600\", \"2\", \"6pm\", \"15-12-2020\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.HIGH, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(7, \"Assignment 8\", \"1600\", \"2\", \"6pm\", \"15-12-2020\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.MEDIUM, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(8, \"Assignment 9\", \"1600\", \"2\", \"6pm\", \"16-12-2020\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.LOW, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(9, \"Assignment 10\", \"1600\", \"2\", \"6pm\", \"16-12-2020\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.MEDIUM, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public static TaskList getCommaTestTaskList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(0, \"Assignment,1\", \"1600\", \"2\", \"6pm\", \"12-12-2020\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.HIGH, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(1, \"Assignment 2\", \"1600\", \"2\", \"6pm\", \"13-12-2020\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.MEDIUM, \"Tough assignment,\", false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(2, \"Assignment 3\", \"1600\", \"2\", \"6pm\", \"14-12-2020\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.LOW, \"Tough ,,,assignment\", false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(3, \"Assignment 4\", \"1600\", \"2\", \"6pm,\", \"14-12-2020\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.MEDIUM, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(4, \"Assignment 5\", \"1600\", \"2\", \"6pm\", \"14-12-2020\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.HIGH, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(5, \"Assignment 6\", \"1600\", \"2\", \"6pm\", \"15-12-2020\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.MEDIUM, \"Tough assignment,\", false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(6, \"Assignment 7\", \"1600\", \"2\", \"6pm\", \"15-12-2020\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.HIGH, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(7, \"Assignment 8\", \"1600\", \"2\", \"6pm\", \"15-12-2020\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.MEDIUM, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(8, \"Assignment 9\", \"1600\", \"2\", \"6pm\", \"16-12-2020\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.LOW, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(9, \"Assignment 10\", \"1600\", \"2\", \"6pm\", \"16-12-2020\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.MEDIUM, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daniellimws": 63
    }
  },
  {
    "path": "src/test/java/athena/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "package athena.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.Importance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.exceptions.AddMissingRequiredParametersException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * Tests methods of the add command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private TaskList taskListWithAddedTask;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Creates a task list for testing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return TaskList for testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static TaskList getTaskList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(0, \"Assignment 1\", \"1600\", \"2\", \"6pm\", \"12-12-2020\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                Importance.HIGH, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Creates a task list that is same as getTaskList() but with added task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return TaskList for testing with an added task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public static TaskList getTaskListWithAddedTask() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(0, \"Assignment 1\", \"1600\", \"2\", \"6pm\", \"12-12-2020\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                Importance.HIGH, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(1, \"Homework 2\", \"0800\", \"4\", \"8pm\", \"10-12-2020\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                Importance.HIGH, \"Very easy homework\", false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Creates the components needed for testing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskList \u003d getTaskList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskListWithAddedTask \u003d getTaskListWithAddedTask();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Tests that the task is added into the Tasks list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws AddMissingRequiredParametersException Exception thrown when the compulsory parameters are not given"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void execute_taskIsAdded() throws AddMissingRequiredParametersException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        assertAddSuccessful(taskList, taskListWithAddedTask);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Creates a new add command."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private AddCommand createAddCommand() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        AddCommand command \u003d new AddCommand(\"Homework 2\", \"0800\", \"4\", \"8pm\", \"10-12-2020\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"high\", \"Very easy homework\", false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Executes the command, and checks that the execution was what we expect."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param addCommand       add command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param expectedTaskList expected task list"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param actualTaskList   actual task list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws AddMissingRequiredParametersException Exception thrown when the compulsory parameters are not given"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private void assertCommandBehaviour(AddCommand addCommand, TaskList expectedTaskList,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                                        TaskList actualTaskList) throws AddMissingRequiredParametersException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        addCommand.execute(taskList, ui);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        assertEquals(expectedTaskList, actualTaskList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Asserts the task successfully added."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskList              TaskList"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskListWithAddedTask Reference taskList to compare with after adding the task"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws AddMissingRequiredParametersException Exception thrown when the compulsory parameters are not given"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private void assertAddSuccessful(TaskList taskList, TaskList taskListWithAddedTask)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alstontham"
        },
        "content": "            throws AddMissingRequiredParametersException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        TaskList expectedTaskList \u003d taskListWithAddedTask;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        TaskList actualTaskList \u003d taskList;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        AddCommand command \u003d createAddCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        assertCommandBehaviour(command, expectedTaskList, actualTaskList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 18,
      "Kafcis": 5,
      "amanda-chua": 80,
      "daniellimws": 4
    }
  },
  {
    "path": "src/test/java/athena/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "package athena.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.Importance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * Tests methods of the delete command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    private TaskList taskListWithoutTask;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Creates a task list for testing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return TaskList for testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private TaskList getTaskList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(0, \"Assignment 1\", \"1600\", \"2\", \"6pm\", \"12-12-2020\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                Importance.HIGH, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(1, \"Assignment 2\", \"1600\", \"2\", \"6pm\", \"13-12-2020\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                Importance.MEDIUM, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(2, \"Assignment 3\", \"1600\", \"2\", \"6pm\", \"13-12-2020\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                Importance.MEDIUM, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Creates a task list that is same as getTaskList() but without task number 2."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return TaskList for testing without task number 2"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private TaskList getTaskListWithoutTask() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(0, \"Assignment 1\", \"1600\", \"2\", \"6pm\", \"12-12-2020\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                Importance.HIGH, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(2, \"Assignment 3\", \"1600\", \"2\", \"6pm\", \"13-12-2020\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                Importance.MEDIUM, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Creates the components needed for testing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskList \u003d getTaskList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        taskListWithoutTask \u003d getTaskListWithoutTask();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Tests that a task is a deleted from a list if a valid task number is given."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws TaskNotFoundException Exception thrown when the given task number is not in the list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void execute_validNumber_taskIsDeleted() throws TaskNotFoundException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        assertDeletionSuccessful(1, taskList, taskListWithoutTask);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Tests that a TaskNotFoundException is thrown when an task number not in the list is given."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void execute_invalidNumber_taskListIsUnchanged() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertDeletionFailsDueToInvalidNumber(-1, taskList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Creates a new delete command."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param taskNumber of the task that we want to delete"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private DeleteCommand createDeleteCommand(int taskNumber) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        DeleteCommand command \u003d new DeleteCommand(taskNumber);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Asserts that the execution of the command results in what we expect."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param deleteCommand    Delete command"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param expectedTaskList Expected task list"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param actualTaskList   Actual task list"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws TaskNotFoundException Exception thrown when the given task number is not in the list"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private void assertCommandBehaviour(DeleteCommand deleteCommand, TaskList expectedTaskList,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                                        TaskList actualTaskList) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        deleteCommand.execute(taskList, ui);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        assertEquals(expectedTaskList, actualTaskList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Asserts that nothing changes when the task with the given number does not exist in the given task list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskNumber Task number to delete, but it should be an invalid number"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskList   TaskList to delete from"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private void assertDeletionFailsDueToInvalidNumber(int taskNumber, TaskList taskList) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        DeleteCommand command \u003d createDeleteCommand(taskNumber);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            command.execute(taskList, ui);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        });"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Asserts the task with the specified number can be successfully deleted."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskNumber          Task number of the task to delete"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskList            TaskList to delete from"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskListWithoutTask Reference taskList to compare with after deleting the task"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws TaskNotFoundException Exception thrown when the given task number is not in the list"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private void assertDeletionSuccessful(int taskNumber, TaskList taskList, TaskList taskListWithoutTask)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            throws TaskNotFoundException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        TaskList expectedTaskList \u003d taskListWithoutTask;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        TaskList actualTaskList \u003d taskList;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        DeleteCommand command \u003d createDeleteCommand(taskNumber);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        assertCommandBehaviour(command, expectedTaskList, actualTaskList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kafcis": 6,
      "alstontham": 18,
      "amanda-chua": 60,
      "daniellimws": 49
    }
  },
  {
    "path": "src/test/java/athena/logic/commands/DoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "package athena.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.Importance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * Tests methods of the done command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "class DoneCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private TaskList taskListWithDone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Creates a task list for testing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return TaskList for testing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private TaskList getTaskList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(0, \"Assignment 1\", \"1600\", \"2\", \"6pm\", \"12-12-2020\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                Importance.HIGH, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(1, \"Assignment 2\", \"1600\", \"2\", \"6pm\", \"13-12-2020\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                Importance.MEDIUM, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(2, \"Assignment 3\", \"1600\", \"2\", \"6pm\", \"13-12-2020\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                Importance.MEDIUM, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * Creates a task list that is same as getTaskList() but task number 1 is done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "     * @return TaskList for testing with a done task number 1."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private TaskList getTaskListWithDone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(0, \"Assignment 1\", \"1600\", \"2\", \"6pm\", \"12-12-2020\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                Importance.HIGH, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        Task doneTask \u003d new Task(\"Assignment 2\", \"1600\", \"2\", \"6pm\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"13-12-2020\", Importance.MEDIUM, \"Tough assignment\", 1, false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        doneTask.setDone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(doneTask);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(2, \"Assignment 3\", \"1600\", \"2\", \"6pm\", \"13-12-2020\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                Importance.MEDIUM, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Creates the components needed for testing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList \u003d getTaskList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskListWithDone \u003d getTaskListWithDone();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Tests that a task is marked as done if a valid task number is given."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws TaskNotFoundException Exception thrown when the given task number is not in the list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void execute_validNumber_taskIsDone() throws TaskNotFoundException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        assertDoneSuccessful(1, taskList, taskListWithDone);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Tests that a TaskNotFoundException is thrown when an task number not in the list is given."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void execute_invalidNumber_taskListIsUnchanged() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertDoneFailsDueToInvalidNumber(-1, taskList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Creates a new done command."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param taskNumber Task number of the task that we want to mark as done"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private DoneCommand createDoneCommand(int taskNumber) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        DoneCommand command \u003d new DoneCommand(taskNumber);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Executes the command, and checks that the execution was what we expect."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws TaskNotFoundException Exception thrown when the given task number is not in the list"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private void assertCommandBehaviour(DoneCommand doneCommand, TaskList expectedTaskList,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                                        TaskList actualTaskList) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        doneCommand.execute(taskList, ui);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertEquals(expectedTaskList, actualTaskList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Asserts that nothing changes when the task with the given number does not exist in the given task list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskNumber Task number to mark as done, but it should be an invalid number"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskList   TaskList to modify"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private void assertDoneFailsDueToInvalidNumber(int taskNumber, TaskList taskList) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        DoneCommand command \u003d createDoneCommand(taskNumber);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            command.execute(taskList, ui);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        });"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Asserts the task with the specified number can be successfully marked as done."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskNumber          Task number of the task to mark as done"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskList            TaskList to modify"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskListWithoutTask Reference taskList to compare with after marking the task as done"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws TaskNotFoundException Exception thrown when the given task number is not in the list"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private void assertDoneSuccessful(int taskNumber, TaskList taskList, TaskList taskListWithoutTask)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            throws TaskNotFoundException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TaskList expectedTaskList \u003d taskListWithoutTask;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TaskList actualTaskList \u003d taskList;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        DoneCommand command \u003d createDoneCommand(taskNumber);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertCommandBehaviour(command, expectedTaskList, actualTaskList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kafcis": 7,
      "alstontham": 12,
      "amanda-chua": 4,
      "daniellimws": 112
    }
  },
  {
    "path": "src/test/java/athena/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "package athena.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.Importance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * Tests methods of the edit command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "class EditCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private TaskList editedTaskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Creates a task list for testing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return TaskList for testing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public static TaskList getTaskList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(0, \"Assignment 1\", \"1600\", \"2\", \"6pm\", \"12-12-2020\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                Importance.HIGH, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(1, \"Assignment 2\", \"1600\", \"2\", \"6pm\", \"13-12-2020\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                Importance.MEDIUM, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(2, \"Assignment 3\", \"1600\", \"2\", \"6pm\", \"13-12-2020\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                Importance.MEDIUM, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Creates a task list that is same as getTaskList() but task number 2 is edited."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return TaskList for testing with an edited task number 2."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public static TaskList getEditedTaskList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(0, \"Assignment 1\", \"1600\", \"2\", \"6pm\", \"12-12-2020\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                Importance.HIGH, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(1,\"Homework 2\", \"0800\", \"4\", \"8pm\", \"10-12-2020\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                Importance.HIGH, \"Very easy homework\", false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(2,\"Assignment 3\", \"1600\", \"2\", \"6pm\", \"13-12-2020\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                Importance.MEDIUM, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Creates the components needed for testing."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList \u003d getTaskList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        editedTaskList \u003d getEditedTaskList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Tests that the details of a task is edited if a valid task number is given."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws TaskNotFoundException Exception thrown when the given task number is not in the list"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void execute_validNumber_taskIsEdited() throws TaskNotFoundException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amanda-chua"
        },
        "content": "        assertEditingSuccessful(1, taskList, editedTaskList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Tests that a TaskNotFoundException is thrown when an task number not in the list is given."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    public void execute_invalidNumber_taskListIsUnchanged() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertEditingFailsDueToInvalidNumber(-1, taskList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Creates a new edit command."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @param taskNumber Task number of the task that we want to edit"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private EditCommand createEditCommand(int taskNumber) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        EditCommand command \u003d new EditCommand(taskNumber, \"Homework 2\", \"0800\", \"4\", \"8pm\", \"10-12-2020\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.HIGH, \"Very easy homework\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Executes the command, and checks that the execution was what we expect."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws TaskNotFoundException Exception thrown when the given task number is not in the list"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private void assertCommandBehaviour(EditCommand editCommand, TaskList expectedTaskList,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                                        TaskList actualTaskList) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        editCommand.execute(taskList, ui);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertEquals(expectedTaskList, actualTaskList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Asserts that nothing changes when the task with the given number does not exist in the given task list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskNumber Task number to edit, but it should be an invalid number"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskList   TaskList to edit"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private void assertEditingFailsDueToInvalidNumber(int taskNumber, TaskList taskList) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        EditCommand command \u003d createEditCommand(taskNumber);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            command.execute(taskList, ui);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        });"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Asserts the task with the specified number can be successfully edited."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskNumber     Task number of the task to edit"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param taskList       TaskList to edit"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param editedTaskList Reference taskList to compare with after deleting the task"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws TaskNotFoundException Exception thrown when the given task number is not in the list"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private void assertEditingSuccessful(int taskNumber, TaskList taskList, TaskList editedTaskList)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            throws TaskNotFoundException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TaskList expectedTaskList \u003d editedTaskList;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TaskList actualTaskList \u003d taskList;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        EditCommand command \u003d createEditCommand(taskNumber);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertCommandBehaviour(command, expectedTaskList, actualTaskList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kafcis": 7,
      "alstontham": 12,
      "amanda-chua": 2,
      "daniellimws": 112
    }
  },
  {
    "path": "src/test/java/athena/task/TaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wish2023"
        },
        "content": "package athena.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.Importance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wish2023"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    private ArrayList\u003cLocalDate\u003e expectedDates;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        setupExpectedDates();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    private void setupExpectedDates() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        expectedDates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        LocalDate startDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wish2023"
        },
        "content": "            expectedDates.add(startDate.plusWeeks(i));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * Ensure repeating dates have been set correctly."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    void testSetRecurrence_thisDayOfWeek_returnsTrue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        String dayOfWeek \u003d LocalDate.now().getDayOfWeek().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task task \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                dayOfWeek, Importance.MEDIUM, \"testNotes\", 0, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        assertEquals(task.getDates(), expectedDates);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * Ensure repeating dates have not been set incorrectly."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    void testSetRecurrence_thisDayOfWeek_returnsFalse() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        String dayOfWeek \u003d LocalDate.now().plusDays(1).getDayOfWeek().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task task \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                dayOfWeek, Importance.MEDIUM, \"testNotes\", 0, false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        assertEquals(task.getDates().equals(expectedDates), false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wish2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wish2023": 51
    }
  },
  {
    "path": "src/test/java/athena/task/taskfilter/ForecastFilterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "package athena.task.taskfilter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.Forecast;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.Importance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * Tests methods of forecast filter."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wish2023"
        },
        "content": "class ForecastFilterTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    LocalDate todayDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Checks if task is included after applying the all forecast filter."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    void testIsTaskIncluded_filterAll_returnsTrue() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        ForecastFilter forecastFilter \u003d new ForecastFilter(Forecast.ALL);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task inputTask \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"20-12-2020\", Importance.MEDIUM, \"testNotes\", 0, false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        boolean isTaskIncluded \u003d forecastFilter.isTaskIncluded(inputTask);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        assertEquals(isTaskIncluded, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Checks if task in this week is included after applying the week forecast filter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    void testIsTaskIncluded_filterByWeek_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        String todayDateString \u003d LocalDate.now().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        ForecastFilter forecastFilter \u003d new ForecastFilter(Forecast.WEEK);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task inputTask \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                todayDateString, Importance.LOW, \"testNotes\", 0, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        boolean isTaskIncluded \u003d forecastFilter.isTaskIncluded(inputTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        assertEquals(isTaskIncluded, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Checks if task not in this week is not included after applying the week forecast filter."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    void testIsTaskIncluded_filterByWeek_returnsFalse() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        ForecastFilter forecastFilter \u003d new ForecastFilter(Forecast.WEEK);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task inputTask \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"30-10-2020\", Importance.LOW, \"testNotes\", 0, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        boolean isTaskIncluded \u003d forecastFilter.isTaskIncluded(inputTask);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        assertEquals(isTaskIncluded, false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Checks if task for today is included after applying the today forecast filter."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    void testIsTaskIncluded_filterByToday_returnsTrue() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        ForecastFilter forecastFilter \u003d new ForecastFilter(Forecast.TODAY);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        String todayDateString \u003d LocalDate.now().toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task inputTask \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                todayDateString, Importance.LOW, \"testNotes\", 0, false); // Tested on 13-10-2020"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        boolean isTaskIncluded \u003d forecastFilter.isTaskIncluded(inputTask);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        assertEquals(isTaskIncluded, true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Checks if task is not included after applying the today forecast filter."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    void testIsTaskIncluded_day_returnsFalse() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        ForecastFilter forecastFilter \u003d new ForecastFilter(Forecast.TODAY);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task inputTask \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"14-10-2020\", Importance.LOW, \"testNotes\", 0, false); // Tested on 13-10-2020"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        boolean isTaskIncluded \u003d forecastFilter.isTaskIncluded(inputTask);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        assertEquals(isTaskIncluded, false);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * Check if relevant dates have been removed from task after filtering for a day."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    void testRemoveExcludedDates_filterToday_returnsOnlyTodayDate() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        ForecastFilter forecastFilter \u003d new ForecastFilter(Forecast.TODAY);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task inputTask \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                todayDate.getDayOfWeek().toString(), Importance.LOW, \"testNotes\", 0, false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        String expectedDate \u003d todayDate.format(formatter);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task expectedTask \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                expectedDate, Importance.LOW, \"testNotes\", 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task actualTask \u003d forecastFilter.removeExcludedDates(inputTask);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        assertEquals(actualTask, expectedTask);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * Check if relevant dates have been removed from task after filtering for a week."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    void testRemoveExcludedDates_filterWeek_returnsOnlyTodayDate() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        ForecastFilter forecastFilter \u003d new ForecastFilter(Forecast.WEEK);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task inputTask \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                todayDate.getDayOfWeek().toString(), Importance.LOW, \"testNotes\", 0, false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        String expectedDate \u003d todayDate.format(formatter);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task expectedTask \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                expectedDate, Importance.LOW, \"testNotes\", 0, false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task actualTask \u003d forecastFilter.removeExcludedDates(inputTask);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        assertEquals(actualTask, expectedTask);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * Ensure tasks are not filtered incorrectly for day filter."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    void testRemoveExcludedDates_filterDay_returnsFalse() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        ForecastFilter forecastFilter \u003d new ForecastFilter(Forecast.TODAY);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task inputTask \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                todayDate.getDayOfWeek().toString(), Importance.LOW, \"testNotes\", 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        String wrongDate \u003d todayDate.plusDays(1).format(formatter);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task wrongTask \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                wrongDate, Importance.LOW, \"testNotes\", 0, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task actualTask \u003d forecastFilter.removeExcludedDates(inputTask);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        assertEquals(actualTask.equals(wrongTask), false);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     * Ensure tasks are not filtered incorrectly for week filter."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wish2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    void testRemoveExcludedDates_filterWeek_returnsFalse() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        ForecastFilter forecastFilter \u003d new ForecastFilter(Forecast.WEEK);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task inputTask \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                todayDate.getDayOfWeek().toString(), Importance.LOW, \"testNotes\", 0, false);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        String wrongDate \u003d todayDate.plusDays(7).format(formatter);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task wrongTask \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                wrongDate, Importance.LOW, \"testNotes\", 0, false);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Task actualTask \u003d forecastFilter.removeExcludedDates(inputTask);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        assertEquals(actualTask.equals(wrongTask), false);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wish2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 15,
      "Kafcis": 5,
      "daniellimws": 13,
      "wish2023": 117
    }
  },
  {
    "path": "src/test/java/athena/task/taskfilter/ImportanceFilterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "package athena.task.taskfilter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.Importance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "class ImportanceFilterTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Tests that the task should be included when Importance.ALL is chosen."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    void isTaskIncluded_all_returnsTrue() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        ImportanceFilter importanceFilter \u003d new ImportanceFilter(Importance.ALL);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        Task task \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"20-12-2020\", Importance.MEDIUM, \"testNotes\", 0, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        boolean isTaskIncluded \u003d importanceFilter.isTaskIncluded(task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertTrue(isTaskIncluded);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Tests that the task should be included when an Importance that is same as the task\u0027s is chosen."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    void isTaskIncluded_sameImportance_returnsTrue() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        ImportanceFilter importanceFilter \u003d new ImportanceFilter(Importance.HIGH);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        Task task \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"20-12-2020\", Importance.HIGH, \"testNotes\", 0, false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        boolean isTaskIncluded \u003d importanceFilter.isTaskIncluded(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertTrue(isTaskIncluded);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Tests that the task should not be included when an Importance that is different from the task\u0027s is chosen."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    void isTaskIncluded_differentImportance_returnsFalse() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        ImportanceFilter importanceFilter \u003d new ImportanceFilter(Importance.HIGH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        Task task \u003d new Task(\"testName\", \"0900\", \"1\", \"05-11-2020\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"20-12-2020\", Importance.LOW, \"testNotes\", 0, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        boolean isTaskIncluded \u003d importanceFilter.isTaskIncluded(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertFalse(isTaskIncluded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kafcis": 3,
      "daniellimws": 45
    }
  },
  {
    "path": "src/test/java/athena/tasklist/TaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alstontham"
        },
        "content": "package athena.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.Forecast;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.Importance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.task.taskfilter.ForecastFilter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.task.taskfilter.ImportanceFilter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alstontham"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * Tests methods of TaskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alstontham"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private TaskList testTaskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Creates a new task list before every test."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        setupTestTaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Asserts if the deleted task at a certain index is the same task that is added to the task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws TaskNotFoundException Exception thrown when the given task number is not in the list"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    void deleteTask_validTaskIndex_correctTaskDeleted() throws TaskNotFoundException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        Task expectedTask \u003d new Task(\"Assignment1\", \"1100\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"2\", \"16-09-2020\", \"13-10-2020\", Importance.HIGH,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"Refer to slides\", 12, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        testTaskList.addTask(expectedTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        Task actualTask \u003d testTaskList.deleteTask(12);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        assertEquals(expectedTask, actualTask);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Asserts if the edited task at a certain index is the same task that is expected."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @throws TaskNotFoundException Exception thrown when the given task number is not in the list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    void editTask_givenAttributes_attributeChanged() throws TaskNotFoundException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        Task task \u003d new Task(\"Assignment1\", \"1100\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"2\", \"16-09-2020\", \"13-10-2020\", Importance.HIGH,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"Refer to slides\", index, false);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        testTaskList.addTask(task);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        Task expectedTask \u003d new Task(\"Assignment2\", \"1200\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"4\", \"16-11-2020\", \"13-10-2020\", Importance.LOW,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"I have changed\", index, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        testTaskList.editTask(index, \"Assignment2\", \"1200\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"4\", \"16-11-2020\", \"13-10-2020\", Importance.LOW,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alstontham"
        },
        "content": "                \"I have changed\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertEquals(testTaskList.getTaskFromNumber(index), expectedTask);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alstontham"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    void getFilteredList_highImportance_returnTasksWithHighImportance() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        // Filter list using high, low, medium importance"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        // Filter list using today, week, all forecast"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alstontham"
        },
        "content": "        // TODO ^^"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TaskList expectedTaskList \u003d getImportanceTestExpectedTasks(Importance.HIGH);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        ImportanceFilter highFilter \u003d new ImportanceFilter(Importance.HIGH);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertEquals(testTaskList.getFilteredList(highFilter), expectedTaskList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    void getFilteredList_mediumImportance_returnTasksWithMediumImportance() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TaskList expectedTaskList \u003d getImportanceTestExpectedTasks(Importance.MEDIUM);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        ImportanceFilter mediumFilter \u003d new ImportanceFilter(Importance.MEDIUM);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertEquals(testTaskList.getFilteredList(mediumFilter), expectedTaskList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    void getFilteredList_lowImportance_returnTasksWithLowImportance() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TaskList expectedTaskList \u003d getImportanceTestExpectedTasks(Importance.LOW);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        ImportanceFilter lowFilter \u003d new ImportanceFilter(Importance.LOW);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertEquals(testTaskList.getFilteredList(lowFilter), expectedTaskList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    void getFilteredList_allForecast_returnAllTasks() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TaskList expectedTaskList \u003d getForecastTestExpectedTasks(Forecast.ALL);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        ForecastFilter allFilter \u003d new ForecastFilter(Forecast.ALL);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertEquals(testTaskList.getFilteredList(allFilter), expectedTaskList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    void getFilteredList_weekForecast_returnTasksForWeek() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TaskList expectedTaskList \u003d getForecastTestExpectedTasks(Forecast.WEEK);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        ForecastFilter weekFilter \u003d new ForecastFilter(Forecast.WEEK);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertEquals(testTaskList.getFilteredList(weekFilter), expectedTaskList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    void getFilteredList_todayForecast_returnTasksForToday() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TaskList expectedTaskList \u003d getForecastTestExpectedTasks(Forecast.TODAY);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        ForecastFilter todayFilter \u003d new ForecastFilter(Forecast.TODAY);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertEquals(testTaskList.getFilteredList(todayFilter), expectedTaskList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private TaskList getImportanceTestExpectedTasks(Importance importance) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        String todayDateString \u003d LocalDate.now().toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        Task task1 \u003d new Task(\"uno\", \"1100\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"2\", todayDateString, todayDateString, Importance.HIGH,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"Refer to slides\", 0, false);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        Task task2 \u003d new Task(\"dos\", \"1100\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"2\", \"16-09-2020\", \"23-10-2020\", Importance.MEDIUM,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"Refer to slides\", 1, false);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        Task task3 \u003d new Task(\"tres\", \"1100\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"2\", \"16-09-2020\", \"13-11-2020\", Importance.LOW,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"Refer to slides\", 2, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        if (importance \u003d\u003d Importance.HIGH) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            taskList.addTask(task1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        } else if (importance \u003d\u003d Importance.MEDIUM) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            taskList.addTask(task2);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        } else if (importance \u003d\u003d Importance.LOW) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            taskList.addTask(task3);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private TaskList getForecastTestExpectedTasks(Forecast forecast) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        String todayDateString \u003d LocalDate.now().toString();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        Task task1 \u003d new Task(\"uno\", \"1100\","
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"2\", todayDateString, todayDateString, Importance.HIGH,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"Refer to slides\", 0, false);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        Task task2 \u003d new Task(\"dos\", \"1100\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"2\", \"16-09-2020\", \"23-10-2020\", Importance.MEDIUM,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"Refer to slides\", 1, false);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        Task task3 \u003d new Task(\"tres\", \"1100\","
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"2\", \"16-09-2020\", \"13-11-2020\", Importance.LOW,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"Refer to slides\", 2, false);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        if (forecast \u003d\u003d Forecast.ALL) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            taskList.addTask(task1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            taskList.addTask(task2);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            taskList.addTask(task3);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        } else if (forecast \u003d\u003d Forecast.WEEK) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            taskList.addTask(task1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            taskList.addTask(task2);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        } else if (forecast \u003d\u003d Forecast.TODAY) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            taskList.addTask(task1);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wish2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wish2023"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private void setupTestTaskList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        String todayDateString \u003d LocalDate.now().toString();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        testTaskList.addTask(new Task(\"uno\", \"1100\","
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"2\", todayDateString, todayDateString, Importance.HIGH,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"Refer to slides\", index++, false));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        testTaskList.addTask(new Task(\"dos\", \"1100\","
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"2\", \"16-09-2020\", \"23-10-2020\", Importance.MEDIUM,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"Refer to slides\", index++, false));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        testTaskList.addTask(new Task(\"tres\", \"1100\","
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"2\", \"16-09-2020\", \"13-11-2020\", Importance.LOW,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"Refer to slides\", index++, false));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alstontham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alstontham": 52,
      "Kafcis": 14,
      "daniellimws": 66,
      "wish2023": 48
    }
  },
  {
    "path": "src/test/java/athena/timetable/TimetableTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "package athena.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.Forecast;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.Importance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.TestSetup;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wish2023"
        },
        "content": "import athena.task.taskfilter.ForecastFilter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import athena.task.taskfilter.ImportanceFilter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.time.temporal.TemporalField;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.time.temporal.WeekFields;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kafcis"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alstontham"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alstontham"
        },
        "content": " * Test methods of Timetable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alstontham"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "class TimetableTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Tests that the timetable from 8am to 12pm is drawn correctly."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    void drawTimetable_start8End12_returnsCorrectlyDrawnTimetable() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(\"Assignment 1\", \"0800\", \"2\", \"6pm\", \"19-10-2020\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.HIGH, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(\"Tutorial 2\", \"0900\", \"2\", \"6pm\", \"20-10-2020\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.HIGH, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(\"OP 3\", \"1000\", \"2\", \"6pm\", \"21-10-2020\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.HIGH, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        taskList.addTask(\"TP 4\", \"1100\", \"2\", \"6pm\", \"22-10-2020\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                Importance.HIGH, \"Tough assignment\", false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        LocalDate[] dates \u003d new LocalDate[7];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"18-10-2020\", DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            dates[i] \u003d date;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            date \u003d date.plusDays(1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        Timetable timetable \u003d new Timetable(taskList, 8, 12);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        String drawnTimetable \u003d timetable.drawTimetable(dates);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        String expectedDrawnTimetable \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                \"+-------08---------09---------10---------11---------+\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                        + \"|  SUN  |          |          |          |          |\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                        + \"| 18/10 |          |          |          |          |\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                        + \"+-------+----------+----------+----------+----------+\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                        + \"|  MON  | Assignment 1        |          |          |\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                        + \"| 19/10 | [0]                 |          |          |\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                        + \"+-------+----------+----------+----------+----------+\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                        + \"|  TUE  |          | Tutorial 2          |          |\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                        + \"| 20/10 |          | [1]                 |          |\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                        + \"+-------+----------+----------+----------+----------+\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                        + \"|  WED  |          |          | OP 3                |\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                        + \"| 21/10 |          |          | [2]                 |\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                        + \"+-------+----------+----------+----------+----------+\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                        + \"|  THU  |          |          |          | TP 4     |\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                        + \"| 22/10 |          |          |          | [3]      |\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                        + \"+-------+----------+----------+----------+----------+\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                        + \"|  FRI  |          |          |          |          |\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                        + \"| 23/10 |          |          |          |          |\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                        + \"+-------+----------+----------+----------+----------+\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                        + \"|  SAT  |          |          |          |          |\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                        + \"| 24/10 |          |          |          |          |\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                        + \"+-------+----------+----------+----------+----------+\\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertEquals(drawnTimetable, expectedDrawnTimetable);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Checks if the timetable returns all tasks with no filter."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    void getTimetable_noFilter_returnsAllTasks() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        final ArrayList\u003cTimetableDay\u003e days \u003d new ArrayList\u003cTimetableDay\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        LocalDate date;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TimetableDay day;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        date \u003d LocalDate.parse(\"12-12-2020\", formatter);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day \u003d new TimetableDay(date);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day.addTask(new Task(\"Assignment 1\", \"1600\", \"2\", \"6pm\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"12-12-2020\", Importance.HIGH, \"Tough assignment\", 0, false));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        days.add(day);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        date \u003d LocalDate.parse(\"13-12-2020\", formatter);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day \u003d new TimetableDay(date);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day.addTask(new Task(\"Assignment 2\", \"1600\", \"2\", \"6pm\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"13-12-2020\", Importance.MEDIUM, \"Tough assignment\", 1, false));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        days.add(day);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        date \u003d LocalDate.parse(\"14-12-2020\", formatter);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day \u003d new TimetableDay(date);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day.addTask(new Task(\"Assignment 3\", \"1600\", \"2\", \"6pm\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"14-12-2020\", Importance.LOW, \"Tough assignment\", 2, false));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day.addTask(new Task(\"Assignment 4\", \"1600\", \"2\", \"6pm\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"14-12-2020\", Importance.MEDIUM, \"Tough assignment\", 3, false));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day.addTask(new Task(\"Assignment 5\", \"1600\", \"2\", \"6pm\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"14-12-2020\", Importance.HIGH, \"Tough assignment\", 4, false));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        days.add(day);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        date \u003d LocalDate.parse(\"15-12-2020\", formatter);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day \u003d new TimetableDay(date);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day.addTask(new Task(\"Assignment 6\", \"1600\", \"2\", \"6pm\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"15-12-2020\", Importance.MEDIUM, \"Tough assignment\", 5, false));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day.addTask(new Task(\"Assignment 7\", \"1600\", \"2\", \"6pm\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"15-12-2020\", Importance.HIGH, \"Tough assignment\", 6, false));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day.addTask(new Task(\"Assignment 8\", \"1600\", \"2\", \"6pm\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"15-12-2020\", Importance.MEDIUM, \"Tough assignment\", 7, false));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        days.add(day);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        date \u003d LocalDate.parse(\"16-12-2020\", formatter);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day \u003d new TimetableDay(date);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day.addTask(new Task(\"Assignment 9\", \"1600\", \"2\", \"6pm\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"16-12-2020\", Importance.LOW, \"Tough assignment\", 8, false));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day.addTask(new Task(\"Assignment 10\", \"1600\", \"2\", \"6pm\","
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"16-12-2020\", Importance.MEDIUM, \"Tough assignment\", 9, false));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        days.add(day);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TaskList taskList \u003d TestSetup.getTestTaskList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        Timetable timetable \u003d new Timetable(taskList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertTrue(areTimetablesSame(timetable, days));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Checks if the timetable returns only high importance tasks with the high importance filter."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    void getTimetable_highImportanceFilter_returnsHighImportanceTasks() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        final ArrayList\u003cTimetableDay\u003e days \u003d new ArrayList\u003cTimetableDay\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        LocalDate date;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TimetableDay day;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        date \u003d LocalDate.parse(\"12-12-2020\", formatter);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day \u003d new TimetableDay(date);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day.addTask(new Task(\"Assignment 1\", \"1600\", \"2\", \"6pm\","
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"12-12-2020\", Importance.HIGH, \"Tough assignment\", 0, false));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        days.add(day);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        date \u003d LocalDate.parse(\"14-12-2020\", formatter);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day \u003d new TimetableDay(date);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day.addTask(new Task(\"Assignment 5\", \"1600\", \"2\", \"6pm\","
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"14-12-2020\", Importance.HIGH, \"Tough assignment\", 4, false));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        days.add(day);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        date \u003d LocalDate.parse(\"15-12-2020\", formatter);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day \u003d new TimetableDay(date);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        day.addTask(new Task(\"Assignment 7\", \"1600\", \"2\", \"6pm\","
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "                \"15-12-2020\", Importance.HIGH, \"Tough assignment\", 6, false));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        days.add(day);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TaskList taskList \u003d TestSetup.getTestTaskList();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wish2023"
        },
        "content": "        Timetable timetable \u003d new Timetable(taskList, new ImportanceFilter(Importance.HIGH),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wish2023"
        },
        "content": "                new ForecastFilter(Forecast.ALL));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        assertTrue(areTimetablesSame(timetable, days));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * Utility method to get the first day of this week."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     * @return The first day of this week."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private LocalDate getFirstDayOfWeek() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        LocalDate now \u003d LocalDate.now();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        TemporalField field \u003d WeekFields.of(Locale.forLanguageTag(\"en_SG\")).dayOfWeek();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return now.with(field, 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alstontham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * Checks if two timetables are the same."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kafcis"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param timetable Pre-created timetable"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @param days      ArrayList of days"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     * @return True or false depending if the two timetables are the same"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alstontham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    private boolean areTimetablesSame(Timetable timetable, ArrayList\u003cTimetableDay\u003e days) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        ArrayList\u003cTimetableDay\u003e timetableDays \u003d timetable.getTimetableDays();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        if (timetableDays.size() !\u003d days.size()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        for (int i \u003d 0; i \u003c timetableDays.size(); ++i) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            ArrayList\u003cTask\u003e tasks1 \u003d timetableDays.get(i).getTaskList().getTasks();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            ArrayList\u003cTask\u003e tasks2 \u003d days.get(i).getTaskList().getTasks();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            if (tasks1.size() !\u003d tasks2.size()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            for (int j \u003d 0; j \u003c tasks1.size(); ++j) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                if (!tasks1.get(j).equals(tasks2.get(j))) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "                }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "daniellimws"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kafcis": 16,
      "alstontham": 15,
      "daniellimws": 179,
      "wish2023": 4
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "help"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "add n/Assignment1 t/1100 D/16-09-2020 d/2 r/today i/high a/Refer to lecture notes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "list i/high"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "list i/medium"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "list f/week"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "list i/medium f/today"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "edit 1 n/Homework 1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "delete -1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "delete 10"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "list f/all"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daniellimws"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "daniellimws": 18
    }
  }
]
